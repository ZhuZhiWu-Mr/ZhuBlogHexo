/*!
  * pinia v2.0.0-alpha.14
  * (c) 2021 Eduardo San Martin Morote
  * @license MIT
  */
import { ref, warn, getCurrentInstance, inject, provide, computed, reactive, watch, onUnmounted } from 'vue';

const IS_CLIENT = typeof window !== 'undefined';

/**
 * setActivePinia must be called to handle SSR at the top of functions like
 * `fetch`, `setup`, `serverPrefetch` and others
 */
let activePinia;
/**
 * Sets or unsets the active pinia. Used in SSR and internally when calling
 * actions and getters
 *
 * @param pinia - Pinia instance
 */
const setActivePinia = (pinia) => (activePinia = pinia);
/**
 * Get the currently active pinia
 */
const getActivePinia = () => {
    if ((process.env.NODE_ENV !== 'production') && !activePinia) {
        warn(`[🍍]: getActivePinia was called with no active Pinia. Did you forget to install pinia?\n\n` +
            `const pinia = createPinia()\n` +
            `app.use(pinia)\n\n` +
            `This will fail in production.`);
    }
    return activePinia;
};
/**
 * Map of stores based on a Pinia instance. Allows setting and retrieving stores
 * for the current running application (with its pinia).
 */
const storesMap = new WeakMap();
/**
 * Expose the client-side application instance used for devtools
 */
let clientAppPromise;
let resolveApp;
const setClientApp = (app) => resolveApp && resolveApp(app);
const getClientApp = () => clientAppPromise ||
    (clientAppPromise = new Promise((resolve) => (resolveApp = resolve)));
const piniaSymbol = ((process.env.NODE_ENV !== 'production')
    ? Symbol('pinia')
    : /* istanbul ignore next */
        Symbol());
/**
 * Creates a Pinia instance to be used by the application
 */
function createPinia() {
    // NOTE: here we could check the window object for a state and directly set it
    // if there is anything like it with Vue 3 SSR
    const state = ref({});
    let localApp;
    let _p = [];
    // plugins added before calling app.use(pinia)
    const toBeInstalled = [];
    const pinia = {
        install(app) {
            pinia._a = localApp = app;
            // pinia._a = app
            app.provide(piniaSymbol, pinia);
            app.config.globalProperties.$pinia = pinia;
            // TODO: write test
            // only set the app on client for devtools
            if (IS_CLIENT) {
                setClientApp(app);
                // this allows calling useStore() outside of a component setup after
                // installing pinia's plugin
                setActivePinia(pinia);
            }
            toBeInstalled.forEach((plugin) => _p.push(plugin));
        },
        use(plugin) {
            if (!localApp) {
                toBeInstalled.push(plugin);
            }
            else {
                _p.push(plugin);
            }
            return this;
        },
        _p,
        // it's actually undefined here
        _a: localApp,
        state,
    };
    return pinia;
}

function isPlainObject(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
o) {
    return (o &&
        typeof o === 'object' &&
        Object.prototype.toString.call(o) === '[object Object]' &&
        typeof o.toJSON !== 'function');
}

function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
    // @ts-ignore
    return typeof navigator !== 'undefined'
        ? window
        : typeof global !== 'undefined'
            ? global
            : {};
}

const HOOK_SETUP = 'devtools-plugin:setup';

function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const hook = getDevtoolsGlobalHook();
    if (hook) {
        hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);
    }
    else {
        const target = getTarget();
        const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
        list.push({
            pluginDescriptor,
            setupFn
        });
    }
}

function formatDisplay(display) {
    return {
        _custom: {
            display,
        },
    };
}
/**
 * Registered stores used for devtools.
 */
const registeredStores = /*#__PURE__*/ new Set();
function toastMessage(message, type) {
    const piniaMessage = '🍍 ' + message;
    if (typeof __VUE_DEVTOOLS_TOAST__ === 'function') {
        __VUE_DEVTOOLS_TOAST__(piniaMessage, type);
    }
    else if (type === 'error') {
        console.error(piniaMessage);
    }
    else if (type === 'warning') {
        console.warn(piniaMessage);
    }
    else {
        console.log(piniaMessage);
    }
}
let isAlreadyInstalled;
const componentStateTypes = [];
function addDevtools(app, store) {
    registeredStores.add(store);
    componentStateTypes.push('🍍 ' + store.$id);
    setupDevtoolsPlugin({
        id: 'dev.esm.pinia',
        label: 'Pinia 🍍',
        logo: 'https://pinia.esm.dev/logo.svg',
        packageName: 'pinia',
        homepage: 'https://pinia.esm.dev',
        componentStateTypes,
        app,
    }, (api) => {
        // watch(router.currentRoute, () => {
        //   // @ts-ignore
        //   api.notifyComponentUpdate()
        // })
        const mutationsLayerId = 'pinia:mutations';
        const piniaInspectorId = 'pinia';
        if (!isAlreadyInstalled) {
            api.on.inspectComponent((payload, ctx) => {
                if (payload.instanceData) {
                    payload.instanceData.state.push({
                        type: '🍍 ' + store.$id,
                        key: 'state',
                        editable: false,
                        value: store.$state,
                    });
                }
            });
            api.addTimelineLayer({
                id: mutationsLayerId,
                label: `Pinia 🍍`,
                color: 0xe5df88,
            });
            api.addInspector({
                id: piniaInspectorId,
                label: 'Pinia 🍍',
                icon: 'storage',
                treeFilterPlaceholder: 'Search stores',
            });
            isAlreadyInstalled = true;
        }
        else {
            api.notifyComponentUpdate();
            api.sendInspectorTree(piniaInspectorId);
            api.sendInspectorState(piniaInspectorId);
        }
        store.$subscribe((mutation, state) => {
            // rootStore.state[store.id] = state
            const data = {
                store: formatDisplay(mutation.storeName),
                // type: formatDisplay(mutation.type),
            };
            if (mutation.payload) {
                data.payload = mutation.payload;
            }
            api.notifyComponentUpdate();
            api.sendInspectorState(piniaInspectorId);
            api.addTimelineEvent({
                layerId: mutationsLayerId,
                event: {
                    time: Date.now(),
                    title: mutation.type,
                    data,
                },
            });
        });
        api.on.getInspectorTree((payload) => {
            if (payload.app === app && payload.inspectorId === piniaInspectorId) {
                const stores = Array.from(registeredStores);
                payload.rootNodes = (payload.filter
                    ? stores.filter((store) => store.$id.toLowerCase().includes(payload.filter.toLowerCase()))
                    : stores).map(formatStoreForInspectorTree);
            }
        });
        api.on.getInspectorState((payload) => {
            if (payload.app === app && payload.inspectorId === piniaInspectorId) {
                const stores = Array.from(registeredStores);
                const store = stores.find((store) => store.$id === payload.nodeId);
                if (store) {
                    payload.state = {
                        options: formatStoreForInspectorState(store),
                    };
                }
                else {
                    toastMessage(`store "${payload.nodeId}" not found`, 'error');
                }
            }
        });
        // trigger an update so it can display new registered stores
        // @ts-ignore
        api.notifyComponentUpdate();
        toastMessage(`"${store.$id}" store installed`);
    });
}
function formatStoreForInspectorTree(store) {
    return {
        id: store.$id,
        label: store.$id,
        tags: [],
    };
}
function formatStoreForInspectorState(store) {
    const fields = [
        { editable: false, key: 'id', value: formatDisplay(store.$id) },
        { editable: true, key: 'state', value: store.$state },
        {
            editable: false,
            key: 'getters',
            value: (store._getters || []).reduce((getters, key) => {
                getters[key] = store[key];
                return getters;
            }, {}),
        },
    ];
    return fields;
}

function innerPatch(target, patchToApply) {
    // TODO: get all keys like symbols as well
    for (const key in patchToApply) {
        const subPatch = patchToApply[key];
        const targetValue = target[key];
        if (isPlainObject(targetValue) && isPlainObject(subPatch)) {
            target[key] = innerPatch(targetValue, subPatch);
        }
        else {
            // @ts-ignore
            target[key] = subPatch;
        }
    }
    return target;
}
const { assign } = Object;
/**
 * Create an object of computed properties referring to
 *
 * @param rootStateRef - pinia.state
 * @param id - unique name
 */
function computedFromState(rootStateRef, id) {
    // let asComputed = computed<T>()
    const reactiveObject = {};
    const state = rootStateRef.value[id];
    for (const key in state) {
        // @ts-ignore: the key matches
        reactiveObject[key] = computed({
            get: () => rootStateRef.value[id][key],
            set: (value) => (rootStateRef.value[id][key] = value),
        });
    }
    return reactiveObject;
}
/**
 * Creates a store with its state object. This is meant to be augmented with getters and actions
 *
 * @param id - unique identifier of the store, like a name. eg: main, cart, user
 * @param buildState - function to build the initial state
 * @param initialState - initial state applied to the store, Must be correctly typed to infer typings
 */
function initStore($id, buildState = () => ({}), initialState) {
    const pinia = getActivePinia();
    pinia.state.value[$id] = initialState || buildState();
    // const state: Ref<S> = toRef(_p.state.value, $id)
    let isListening = true;
    let subscriptions = [];
    function $patch(partialStateOrMutator) {
        let partialState = {};
        let type;
        isListening = false;
        if (typeof partialStateOrMutator === 'function') {
            partialStateOrMutator(pinia.state.value[$id]);
            type = '🧩 patch';
        }
        else {
            innerPatch(pinia.state.value[$id], partialStateOrMutator);
            partialState = partialStateOrMutator;
            type = '⤵️ patch';
        }
        isListening = true;
        // because we paused the watcher, we need to manually call the subscriptions
        subscriptions.forEach((callback) => {
            callback({ storeName: $id, type, payload: partialState }, pinia.state.value[$id]);
        });
    }
    function $subscribe(callback) {
        subscriptions.push(callback);
        // watch here to link the subscription to the current active instance
        // e.g. inside the setup of a component
        const stopWatcher = watch(() => pinia.state.value[$id], (state) => {
            if (isListening) {
                callback({ storeName: $id, type: '🧩 in place', payload: {} }, state);
            }
        }, {
            deep: true,
            flush: 'sync',
        });
        const removeSubscription = () => {
            const idx = subscriptions.indexOf(callback);
            if (idx > -1) {
                subscriptions.splice(idx, 1);
                stopWatcher();
            }
        };
        if (getCurrentInstance()) {
            onUnmounted(removeSubscription);
        }
        return removeSubscription;
    }
    function $reset() {
        pinia.state.value[$id] = buildState();
    }
    const storeWithState = {
        $id,
        _p: pinia,
        // $state is added underneath
        $patch,
        $subscribe,
        $reset,
    };
    const injectionSymbol = (process.env.NODE_ENV !== 'production')
        ? Symbol(`PiniaStore(${$id})`)
        : /* istanbul ignore next */
            Symbol();
    return [
        storeWithState,
        {
            get: () => pinia.state.value[$id],
            set: (newState) => {
                isListening = false;
                pinia.state.value[$id] = newState;
                isListening = true;
            },
        },
        injectionSymbol,
    ];
}
/**
 * Creates a store bound to the lifespan of where the function is called. This
 * means creating the store inside of a component's setup will bound it to the
 * lifespan of that component while creating it outside of a component will
 * create an ever living store
 *
 * @param partialStore - store with state returned by initStore
 * @param descriptor - descriptor to setup $state property
 * @param $id - unique name of the store
 * @param getters - getters of the store
 * @param actions - actions of the store
 */
function buildStoreToUse(partialStore, descriptor, $id, getters = {}, actions = {}, options) {
    const pinia = getActivePinia();
    const computedGetters = {};
    for (const getterName in getters) {
        // @ts-ignore: it's only readonly for the users
        computedGetters[getterName] = computed(() => {
            setActivePinia(pinia);
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            // @ts-expect-error: the argument count is correct
            return getters[getterName].call(store, store);
        });
    }
    const wrappedActions = {};
    for (const actionName in actions) {
        wrappedActions[actionName] = function () {
            setActivePinia(pinia);
            // eslint-disable-next-line
            return actions[actionName].apply(store, arguments);
        };
    }
    const store = reactive(assign({}, partialStore, 
    // using this means no new properties can be added as state
    computedFromState(pinia.state, $id), computedGetters, wrappedActions));
    // use this instead of a computed with setter to be able to create it anywhere
    // without linking the computed lifespan to wherever the store is first
    // created.
    Object.defineProperty(store, '$state', descriptor);
    if (IS_CLIENT && true && (process.env.NODE_ENV !== 'production')) {
        store._getters = Object.keys(getters);
    }
    // apply all plugins
    pinia._p.forEach((extender) => {
        assign(store, extender({ store, app: pinia._a, pinia, options }));
    });
    return store;
}
/**
 * Creates a `useStore` function that retrieves the store instance
 * @param options - options to define the store
 */
function defineStore(options) {
    const { id, state, getters, actions } = options;
    function useStore(pinia) {
        const hasInstance = getCurrentInstance();
        // only run provide when pinia hasn't been manually passed
        const shouldProvide = hasInstance && !pinia;
        // avoid injecting if `useStore` when not possible
        pinia = pinia || (hasInstance && inject(piniaSymbol));
        if (pinia)
            setActivePinia(pinia);
        // TODO: worth warning on server if no piniaKey as it can leak data
        pinia = getActivePinia();
        let stores = storesMap.get(pinia);
        if (!stores)
            storesMap.set(pinia, (stores = new Map()));
        let storeAndDescriptor = stores.get(id);
        if (!storeAndDescriptor) {
            storeAndDescriptor = initStore(id, state, pinia.state.value[id]);
            stores.set(id, storeAndDescriptor);
            const store = buildStoreToUse(storeAndDescriptor[0], storeAndDescriptor[1], id, getters, actions, 
            // @ts-expect-error: because of the extend on Actions
            options);
            // allow children to reuse this store instance to avoid creating a new
            // store for each child
            if (shouldProvide) {
                provide(storeAndDescriptor[2], store);
            }
            if (IS_CLIENT &&
                true &&
                (process.env.NODE_ENV !== 'production') /*|| __FEATURE_PROD_DEVTOOLS__*/) {
                getClientApp().then((app) => addDevtools(app, store));
            }
            return store;
        }
        return (
        // null avoids the warning for not found injection key
        (hasInstance && inject(storeAndDescriptor[2], null)) ||
            buildStoreToUse(storeAndDescriptor[0], storeAndDescriptor[1], id, getters, actions, 
            // @ts-expect-error: because of the extend on Actions
            options));
    }
    // needed by map helpers
    useStore.$id = id;
    return useStore;
}

function getCachedStore(vm, useStore) {
    const cache = '_pStores' in vm ? vm._pStores : (vm._pStores = {});
    const id = useStore.$id;
    return (cache[id] || (cache[id] = useStore(vm.$pinia)));
}
let mapStoreSuffix = 'Store';
/**
 * Changes the suffix added by `mapStores()`. Can be set to an empty string.
 * Defaults to `"Store"`. Make sure to extend the MapStoresCustomization
 * interface if you need are using TypeScript.
 *
 * @param suffix - new suffix
 */
function setMapStoreSuffix(suffix // could be 'Store' but that would be annoying for JS
) {
    mapStoreSuffix = suffix;
}
/**
 * Allows using stores without the composition API (`setup()`) by generating an
 * object to be spread in the `computed` field of a component. It accepts a list
 * of store definitions.
 *
 * @example
 * ```js
 * export default {
 *   computed: {
 *     // other computed properties
 *     ...mapStores(useUserStore, useCartStore)
 *   },
 *
 *   created() {
 *     this.userStore // store with id "user"
 *     this.cartStore // store with id "cart"
 *   }
 * }
 * ```
 *
 * @param stores - list of stores to map to an object
 */
function mapStores(...stores) {
    if ((process.env.NODE_ENV !== 'production') && Array.isArray(stores[0])) {
        console.warn(`[🍍]: Directly pass all stores to "mapStores()" without putting them in an array:\n` +
            `Replace\n` +
            `\tmapStores([useAuthStore, useCartStore])\n` +
            `with\n` +
            `\tmapStores(useAuthStore, useCartStore)\n` +
            `This will fail in production if not fixed.`);
        stores = stores[0];
    }
    return stores.reduce((reduced, useStore) => {
        // @ts-ignore: $id is added by defineStore
        reduced[useStore.$id + mapStoreSuffix] = function () {
            return getCachedStore(this, useStore);
        };
        return reduced;
    }, {});
}
/**
 * Allows using state and getters from one store without using the composition
 * API (`setup()`) by generating an object to be spread in the `computed` field
 * of a component.
 *
 * @param useStore - store to map from
 * @param keysOrMapper - array or object
 */
function mapState(useStore, keysOrMapper) {
    return Array.isArray(keysOrMapper)
        ? keysOrMapper.reduce((reduced, key) => {
            reduced[key] = function () {
                return getCachedStore(this, useStore)[key];
            };
            return reduced;
        }, {})
        : Object.keys(keysOrMapper).reduce((reduced, key) => {
            reduced[key] = function () {
                const store = getCachedStore(this, useStore);
                const storeKey = keysOrMapper[key];
                // for some reason TS is unable to infer the type of storeKey to be a
                // function
                return typeof storeKey === 'function'
                    ? storeKey.call(this, store)
                    : store[storeKey];
            };
            return reduced;
        }, {});
}
/**
 * Alias for `mapState()`. You should use `mapState()` instead.
 * @deprecated use `mapState()` instead.
 */
const mapGetters = mapState;
/**
 * Allows directly using actions from your store without using the composition
 * API (`setup()`) by generating an object to be spread in the `methods` field
 * of a component.
 *
 * @param useStore - store to map from
 * @param keysOrMapper - array or object
 */
function mapActions(useStore, keysOrMapper) {
    return Array.isArray(keysOrMapper)
        ? keysOrMapper.reduce((reduced, key) => {
            reduced[key] = function (...args) {
                return getCachedStore(this, useStore)[key](...args);
            };
            return reduced;
        }, {})
        : Object.keys(keysOrMapper).reduce((reduced, key) => {
            reduced[key] = function (...args) {
                return getCachedStore(this, useStore)[keysOrMapper[key]](...args);
            };
            return reduced;
        }, {});
}
/**
 * Allows using state and getters from one store without using the composition
 * API (`setup()`) by generating an object to be spread in the `computed` field
 * of a component.
 *
 * @param useStore - store to map from
 * @param keysOrMapper - array or object
 */
function mapWritableState(useStore, keysOrMapper) {
    return Array.isArray(keysOrMapper)
        ? keysOrMapper.reduce((reduced, key) => {
            // @ts-ignore
            reduced[key] = {
                get() {
                    return getCachedStore(this, useStore)[key];
                },
                set(value) {
                    // it's easier to type it here as any
                    return (getCachedStore(this, useStore)[key] = value);
                },
            };
            return reduced;
        }, {})
        : Object.keys(keysOrMapper).reduce((reduced, key) => {
            // @ts-ignore
            reduced[key] = {
                get() {
                    return getCachedStore(this, useStore)[keysOrMapper[key]];
                },
                set(value) {
                    // it's easier to type it here as any
                    return (getCachedStore(this, useStore)[keysOrMapper[key]] = value);
                },
            };
            return reduced;
        }, {});
}

/**
 * {@inheritDoc defineStore}
 * @deprecated Use {@link defineStore}
 */
const createStore = ((options) => {
    console.warn('[🍍]: "createStore" has been deprecated and will be removed on the sable release, use "defineStore" instead.');
    return defineStore(options);
});

export { createPinia, createStore, defineStore, mapActions, mapGetters, mapState, mapStores, mapWritableState, setActivePinia, setMapStoreSuffix };
