{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/js/live2d.min.js","path":"js/live2d.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.d2421d67.css","path":"static/css/about.d2421d67.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.ba119bbe.css","path":"static/css/app.ba119bbe.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.2ac789f8.css","path":"static/css/archives.2ac789f8.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.c1088f8c.css","path":"static/css/page.c1088f8c.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.7d1e319c.js","path":"static/js/404.7d1e319c.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.a692bc92.js","path":"static/js/about.a692bc92.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.1b8edba8.js","path":"static/js/app.1b8edba8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.8199f2a6.js","path":"static/js/archives.8199f2a6.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.cd195d1b.js","path":"static/js/categories.cd195d1b.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.9b3ced64.js","path":"static/js/chunk-libs.9b3ced64.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.3891b867.js","path":"static/js/page.3891b867.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.611fd0ff.js","path":"static/js/post.611fd0ff.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.5e4b4d15.js","path":"static/js/result.5e4b4d15.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.6714cd29.js","path":"static/js/tags.6714cd29.js","modified":0,"renderable":1},{"_id":"source/images/head.jpg","path":"images/head.jpg","modified":0,"renderable":0},{"_id":"source/svg/bilibili-fill.svg","path":"svg/bilibili-fill.svg","modified":0,"renderable":0},{"_id":"source/svg/qq.svg","path":"svg/qq.svg","modified":0,"renderable":0},{"_id":"source/svg/github.svg","path":"svg/github.svg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG211263245974.jpg","path":"images/banners/VCG211263245974.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG21gic13799691.jpg","path":"images/banners/VCG21gic13799691.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG21gic18180994.jpg","path":"images/banners/VCG21gic18180994.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG211284641681.jpg","path":"images/banners/VCG211284641681.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41154059609.jpg","path":"images/banners/VCG41154059609.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41183545763.jpg","path":"images/banners/VCG41183545763.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41533095859.jpg","path":"images/banners/VCG41533095859.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41N1070447322.jpg","path":"images/banners/VCG41N1070447322.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41N1158547769.jpg","path":"images/banners/VCG41N1158547769.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41N1169192820.jpg","path":"images/banners/VCG41N1169192820.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41186545379.jpg","path":"images/banners/VCG41186545379.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41N1126025444.jpg","path":"images/banners/VCG41N1126025444.jpg","modified":0,"renderable":0},{"_id":"source/images/questions/image-20210514201311899.png","path":"images/questions/image-20210514201311899.png","modified":0,"renderable":0},{"_id":"source/images/questions/image-20210514201558920.png","path":"images/questions/image-20210514201558920.png","modified":0,"renderable":0},{"_id":"source/images/questions/image-20210515082344998.png","path":"images/questions/image-20210515082344998.png","modified":0,"renderable":0},{"_id":"source/images/questions/image-20210515083455591.png","path":"images/questions/image-20210515083455591.png","modified":0,"renderable":0},{"_id":"source/images/questions/image-20210515082847958.png","path":"images/questions/image-20210515082847958.png","modified":0,"renderable":0},{"_id":"source/images/questions/image-20210515083752655.png","path":"images/questions/image-20210515083752655.png","modified":0,"renderable":0},{"_id":"source/images/questions/image-20210528213456016.png","path":"images/questions/image-20210528213456016.png","modified":0,"renderable":0},{"_id":"source/images/questions/image-20210528213456019.png","path":"images/questions/image-20210528213456019.png","modified":0,"renderable":0},{"_id":"source/images/questions/image-20210528213624999.png","path":"images/questions/image-20210528213624999.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/7整数反转.md","hash":"05fa388db77d0526d152d018ab5564e7ad33b6e3","modified":1620200715675},{"_id":"source/_posts/Django.md","hash":"c6b00590797e53b7cca8474bdc05e4fe03fdd522","modified":1620200930956},{"_id":"source/_posts/linux.md","hash":"ade3905b15183767031abfbd4835b4d36c9497c7","modified":1620200663145},{"_id":"source/_posts/nginx.md","hash":"33733028bb82a922a3b37704bf4c6a4058ca9780","modified":1620200854169},{"_id":"source/_posts/shell脚本.md","hash":"f149fa580c0052ffa6fd32f7f0753a1c82adf42b","modified":1620188257384},{"_id":"source/_posts/vim操作宝典.md","hash":"cde6c8bf453cd728b7bd89aa87c7f7239052c0c8","modified":1620201182058},{"_id":"source/_posts/两数之和.md","hash":"68fd97630c088d3dc5ab13f8f2e8c20b1c198341","modified":1620198025752},{"_id":"source/_posts/砖墙问题.md","hash":"5ba55ba5ff440f5a39f703315a2c5a2b3d5c7c03","modified":1620198029365},{"_id":"source/images/head.jpg","hash":"108c18bb80f7fd2d3c594a6c3204e464b8be4487","modified":1620027936063},{"_id":"source/svg/bilibili-fill.svg","hash":"b0f6428f535e292fec0a9a7d7160097c33b8c250","modified":1620033226498},{"_id":"source/svg/qq.svg","hash":"b2ed79161356aaeef1e08dd7f55aff71d5070716","modified":1620032994690},{"_id":"source/svg/github.svg","hash":"95e356da588979e3b3051aa301a5d75c3ccf7fcf","modified":1620033042685},{"_id":"source/about/index.md","hash":"3c719782591e5e465d2b342e74116d75c14b8914","modified":1620039862231},{"_id":"source/_posts/7整数反转/image-20210504005805249.png","hash":"124978b6dfd06337516dbaedbe6bb34235bfe861","modified":1620061095828},{"_id":"source/_posts/7整数反转/image-20210504010425266.png","hash":"2edb6abdd9666f50102a9e9513831a256f931e3f","modified":1620061469966},{"_id":"source/_posts/砖墙问题/wall.png","hash":"7a306f76cedd6bf239c3995e3c48a4e67ccb2544","modified":1620047408516},{"_id":"source/images/banners/VCG41N1169192820.jpg","hash":"b334f26acd6b881efe9df8de6f41dcc0368bdb2e","modified":1620044673348},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"3933fad8a2015509d0a31bf082ad4ca20c3e524f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"ee28d7eaeadf8e62e214de1dbdb89c887c280f4e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"f47e4e99a00e37fd4d2ee298d022d56bd8a478bf","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"dcd4d744818ddc58f3f6cb4cbb828b067879ae1f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"04d65cecb6443b21847968b2a1ea5be29c1222cd","modified":1620144045309},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"f0e830f32a197a8a563f406a7ce8b9a700dc6f32","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"b0fc392bc9a4f9b995156a06183da891d2829e4d","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"9db1738ffc13a7d5468b68416f934a83abf5a33d","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.d2421d67.css","hash":"54cca6a0365209e19b32e3fd4bb7fca8890b7b78","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.2ac789f8.css","hash":"bf700cf68d78261894580e7396306e156914faf6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.c1088f8c.css","hash":"8acf05239902d069cfa328660536492d69106bc0","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.7d1e319c.js","hash":"9bb840aca0bd21f8cf4dec9c45ee70b4f251d06f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.a692bc92.js","hash":"bfbb366e63a83475ad80653009d496d741b6ff38","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.8199f2a6.js","hash":"4256bf7213f854551cac1f64bfd9ca89c6bdd37c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.cd195d1b.js","hash":"4f6bc0869d65833cb814a3f027d33aa738762045","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.3891b867.js","hash":"964058593622fd8fbbb1aa36071c9fbb0a14a23b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.611fd0ff.js","hash":"74f39f7b17f764f35e6355615ffa08aa3690ee95","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.5e4b4d15.js","hash":"4ef46ad988dc93570d3c653630534fdff0ae5dd1","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.6714cd29.js","hash":"51ee7b189bb856a43e250e0ab96e580c84424410","modified":499162500000},{"_id":"source/images/banners/VCG41N1158547769.jpg","hash":"0752112cd6e32965eb26030efbe9142b0fb477da","modified":1620201928031},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.ba119bbe.css","hash":"1607c5e961b4c14eefd51654f4fbad07cff34b3f","modified":499162500000},{"_id":"source/_posts/砖墙问题/querstion.png","hash":"caeb154d0d17aba3669164ce0f6c6d7de0b9be59","modified":1620047662582},{"_id":"source/images/banners/VCG211263245974.jpg","hash":"311ef2b828275e73991ccd000037693d5128264d","modified":1620060773284},{"_id":"source/images/banners/VCG211284641681.jpg","hash":"37228eecaa21e5099a43a4e6578ad3e82118af9a","modified":1620044290233},{"_id":"source/images/banners/VCG41533095859.jpg","hash":"e6b3783830bde51f1318711841c6f28829659743","modified":1620044825889},{"_id":"node_modules/hexo-theme-aurora/source/js/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":499162500000},{"_id":"source/images/banners/VCG41154059609.jpg","hash":"42801fee859971bc0492ea0c27c74f69813a91ef","modified":1620202014440},{"_id":"source/images/banners/VCG41N1070447322.jpg","hash":"9fd2651c1c69d2533e7518aa8e4a23e3d527942b","modified":1620201975740},{"_id":"source/images/banners/VCG21gic18180994.jpg","hash":"074d9d61e125d9c2ca872fd9a89d349047a84004","modified":1620201961165},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.9b3ced64.js","hash":"a95c9484a610100008db504a6a58e7811392e1a7","modified":499162500000},{"_id":"source/images/banners/VCG21gic13799691.jpg","hash":"6a666deb73f68f2566c27cdbb778c4734e9c1393","modified":1620202000372},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.1b8edba8.js","hash":"94c4b93f713e7c0b3979612ee88847b86bc8e1d9","modified":1620145793973},{"_id":"source/images/banners/VCG41183545763.jpg","hash":"1d2fcb3f96fc6e51a578cc6aaab57cca2dcfdb58","modified":1620201945443},{"_id":"public/api/posts/1.json","hash":"bb171ea928cc2f5ffd0c369abb683421e0958843","modified":1622440815697},{"_id":"public/api/articles/nginx.json","hash":"e923b2ff91f35345763716e58f7276cf3497b50a","modified":1621693725465},{"_id":"public/api/articles/7整数反转.json","hash":"db85a1c27b9429a438e53c1e1af931ba8e4c66af","modified":1621693725465},{"_id":"public/api/articles/两数之和.json","hash":"6fb7f34b37e8809ea23fb8f1684e222c67ded416","modified":1621693725465},{"_id":"public/api/articles/砖墙问题.json","hash":"80eed911abc719bf1a91b8e5df194c3283fdab77","modified":1621693725465},{"_id":"public/api/articles/vim操作宝典.json","hash":"01ac5e3d3158688541e01203fba57b7298d1b7ad","modified":1621693725465},{"_id":"public/api/articles/shell脚本.json","hash":"e107bd88794cd502a1d37c3f6f5fb16bdbde147d","modified":1620201216301},{"_id":"public/api/articles/linux.json","hash":"675a3a6d639c89c332ccf29ee890f25f227bff06","modified":1620201216301},{"_id":"public/api/features.json","hash":"8556540e4aa52633306a5e17e7b664b0f45fad77","modified":1622440815697},{"_id":"public/api/authors/blog-author.json","hash":"f3a60943447607b4cb6bb1d548755890ac36ee65","modified":1622440815697},{"_id":"public/api/site.json","hash":"b954f4b264ee1d95fe94f04a51883f7e8aae227b","modified":1622440822339},{"_id":"public/api/categories.json","hash":"e8ddd2a0ce23c29bb78d92e65cad165deeaa0d44","modified":1622440815697},{"_id":"public/api/categories/算法.json","hash":"b562bbfeb6967d45a5a507ec7386755d6f87dad9","modified":1622209473143},{"_id":"public/api/categories/Nginx.json","hash":"cc5c51b2cdf91e2ee12d1a9576400ef1dfa56cf8","modified":1620221290999},{"_id":"public/api/categories/Django.json","hash":"7f14ebc170ef45928c40598bde8a34a993a5bcb4","modified":1621693725465},{"_id":"public/api/categories/Linux.json","hash":"597bfa501d598d8cf3448e7cf3eedc54ecbf104f","modified":1620201216301},{"_id":"public/api/categories/Shell.json","hash":"3babfae8a9460df8ff016f3fc8cb341450d5f432","modified":1620200434922},{"_id":"public/api/categories/Vim.json","hash":"3ee10800414e1cd4c645f3e7587998c4b29eb5a6","modified":1620201216301},{"_id":"public/api/tags.json","hash":"46ee734f946d1aadec0a9264c50a897fb352203c","modified":1622440815697},{"_id":"public/api/tags/算法.json","hash":"d7f69a58225b969f6b8a5cc1b189d9fb1f011630","modified":1622209473143},{"_id":"public/api/tags/Python.json","hash":"4962d49a6bdec5a630298bcd6fcff9b62152d59b","modified":1622209473143},{"_id":"public/api/tags/Nginx.json","hash":"cc5c51b2cdf91e2ee12d1a9576400ef1dfa56cf8","modified":1620221290999},{"_id":"public/api/tags/Django.json","hash":"7f14ebc170ef45928c40598bde8a34a993a5bcb4","modified":1621693725465},{"_id":"public/api/tags/Linux.json","hash":"c6e602ebc491faecd5c13725cc234b3ddaac0a5f","modified":1620201216301},{"_id":"public/api/tags/Shell.json","hash":"3babfae8a9460df8ff016f3fc8cb341450d5f432","modified":1620200434922},{"_id":"public/api/tags/Vim.json","hash":"3ee10800414e1cd4c645f3e7587998c4b29eb5a6","modified":1620201216301},{"_id":"public/api/tags/Hash.json","hash":"21b67b40e042524245e6cffcd404a8ca1152d675","modified":1621693725465},{"_id":"public/api/pages/about/index.json","hash":"29700e0e31e9af0c0d2416244872941e7fa7b356","modified":1620200434922},{"_id":"public/api/statistic.json","hash":"53e1bc3dfd4d9ef322f810a9bd6f6ded1896364d","modified":1622440815697},{"_id":"public/api/search.json","hash":"edbd3a9fb8c6f330e44cdacda164aac6a0c55ae3","modified":1622440815697},{"_id":"public/post/Django.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/post/nginx.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/post/7整数反转.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/post/两数之和.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/post/砖墙问题.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/post/vim操作宝典.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/post/shell脚本.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/post/linux.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/index.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/tags/index.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/archives/index.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/page/about/index.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/tags/search/index.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620200434922},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1620200434922},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1620200434922},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1620200434922},{"_id":"public/images/head.jpg","hash":"108c18bb80f7fd2d3c594a6c3204e464b8be4487","modified":1620200434922},{"_id":"public/svg/bilibili-fill.svg","hash":"b0f6428f535e292fec0a9a7d7160097c33b8c250","modified":1620200434922},{"_id":"public/svg/qq.svg","hash":"b2ed79161356aaeef1e08dd7f55aff71d5070716","modified":1620200434922},{"_id":"public/svg/github.svg","hash":"95e356da588979e3b3051aa301a5d75c3ccf7fcf","modified":1620200434922},{"_id":"public/post/7整数反转/image-20210504005805249.png","hash":"124978b6dfd06337516dbaedbe6bb34235bfe861","modified":1620200434922},{"_id":"public/post/7整数反转/image-20210504010425266.png","hash":"2edb6abdd9666f50102a9e9513831a256f931e3f","modified":1620200434922},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1620200434922},{"_id":"public/images/banners/VCG41N1169192820.jpg","hash":"b334f26acd6b881efe9df8de6f41dcc0368bdb2e","modified":1620200434922},{"_id":"public/post/砖墙问题/wall.png","hash":"7a306f76cedd6bf239c3995e3c48a4e67ccb2544","modified":1620200434922},{"_id":"public/images/banners/VCG211263245974.jpg","hash":"311ef2b828275e73991ccd000037693d5128264d","modified":1620200434922},{"_id":"public/static/css/about.d2421d67.css","hash":"54cca6a0365209e19b32e3fd4bb7fca8890b7b78","modified":1620200434922},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1620200434922},{"_id":"public/static/css/archives.2ac789f8.css","hash":"bf700cf68d78261894580e7396306e156914faf6","modified":1620200434922},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1620200434922},{"_id":"public/static/css/page.c1088f8c.css","hash":"8acf05239902d069cfa328660536492d69106bc0","modified":1620200434922},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1620200434922},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1620200434922},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1620200434922},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1620200434922},{"_id":"public/static/js/404.7d1e319c.js","hash":"9bb840aca0bd21f8cf4dec9c45ee70b4f251d06f","modified":1620200434922},{"_id":"public/static/js/about.a692bc92.js","hash":"bfbb366e63a83475ad80653009d496d741b6ff38","modified":1620200434922},{"_id":"public/static/js/archives.8199f2a6.js","hash":"4256bf7213f854551cac1f64bfd9ca89c6bdd37c","modified":1620200434922},{"_id":"public/static/js/categories.cd195d1b.js","hash":"4f6bc0869d65833cb814a3f027d33aa738762045","modified":1620200434922},{"_id":"public/static/js/page.3891b867.js","hash":"964058593622fd8fbbb1aa36071c9fbb0a14a23b","modified":1620200434922},{"_id":"public/static/js/result.5e4b4d15.js","hash":"4ef46ad988dc93570d3c653630534fdff0ae5dd1","modified":1620200434922},{"_id":"public/static/js/post.611fd0ff.js","hash":"74f39f7b17f764f35e6355615ffa08aa3690ee95","modified":1620200434922},{"_id":"public/static/js/tags.6714cd29.js","hash":"51ee7b189bb856a43e250e0ab96e580c84424410","modified":1620200434922},{"_id":"public/images/banners/VCG211284641681.jpg","hash":"37228eecaa21e5099a43a4e6578ad3e82118af9a","modified":1620200434922},{"_id":"public/images/banners/VCG41N1158547769.jpg","hash":"0752112cd6e32965eb26030efbe9142b0fb477da","modified":1620202046661},{"_id":"public/images/banners/VCG41533095859.jpg","hash":"e6b3783830bde51f1318711841c6f28829659743","modified":1620200434922},{"_id":"public/images/banners/VCG41N1070447322.jpg","hash":"9fd2651c1c69d2533e7518aa8e4a23e3d527942b","modified":1620202046661},{"_id":"public/post/砖墙问题/querstion.png","hash":"caeb154d0d17aba3669164ce0f6c6d7de0b9be59","modified":1620200434922},{"_id":"public/images/banners/VCG21gic18180994.jpg","hash":"074d9d61e125d9c2ca872fd9a89d349047a84004","modified":1620202046661},{"_id":"public/images/banners/VCG41154059609.jpg","hash":"42801fee859971bc0492ea0c27c74f69813a91ef","modified":1620202046661},{"_id":"public/static/css/app.ba119bbe.css","hash":"1607c5e961b4c14eefd51654f4fbad07cff34b3f","modified":1620200434922},{"_id":"public/images/banners/VCG41183545763.jpg","hash":"1d2fcb3f96fc6e51a578cc6aaab57cca2dcfdb58","modified":1620202046661},{"_id":"public/images/banners/VCG21gic13799691.jpg","hash":"6a666deb73f68f2566c27cdbb778c4734e9c1393","modified":1620202046661},{"_id":"public/js/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1620200434922},{"_id":"public/static/js/chunk-libs.9b3ced64.js","hash":"a95c9484a610100008db504a6a58e7811392e1a7","modified":1620200434922},{"_id":"public/static/js/app.1b8edba8.js","hash":"45a9cdb9e9b011cc97b4d1d144fa65103112fbba","modified":1620200434922},{"_id":"public/api/articles/Django.json","hash":"7e1ee45f14327303f930630dd2845652434d6409","modified":1621693725465},{"_id":"source/_posts/136只出现一次的数字.md","hash":"8a409d9cc1e29432b48581f71d5999027bf61c67","modified":1620308106030},{"_id":"source/_posts/237删除链表中的节点.md","hash":"f6b352ad9bedaac2667c129b6d7e1a867053d9a5","modified":1620288512208},{"_id":"public/api/articles/136只出现一次的数字.json","hash":"8924cc98c4fdc111c56afd2c6e5e78d8ca066c04","modified":1621693725465},{"_id":"public/api/articles/237删除链表中的节点.json","hash":"6be052a1dba6cace0d8cfe33e8b81e1b6cc8e951","modified":1621693725465},{"_id":"public/api/tags/异或.json","hash":"b4c9cc0187694a3a4c8883f089f538a479116124","modified":1621693725465},{"_id":"public/api/tags/链表.json","hash":"97d94825fab484e2c37a6bd9d80205460c418c8f","modified":1621693725465},{"_id":"public/post/136只出现一次的数字.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620221290999},{"_id":"public/post/237删除链表中的节点.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620221290999},{"_id":"source/images/banners/VCG41186545379.jpg","hash":"b082c830da2fcb620fdc5fac954b0dbc8b370c27","modified":1620288483427},{"_id":"source/images/banners/VCG41N1126025444.jpg","hash":"094109ee11730e68f47b374f8b9801e0a062a280","modified":1620288474096},{"_id":"public/images/banners/VCG41186545379.jpg","hash":"b082c830da2fcb620fdc5fac954b0dbc8b370c27","modified":1620288524810},{"_id":"public/images/banners/VCG41N1126025444.jpg","hash":"094109ee11730e68f47b374f8b9801e0a062a280","modified":1620288524810},{"_id":"source/_posts/169多数元素.md","hash":"ce3dbc49a466e78dbf91135f9fc389c9a4387bd8","modified":1620314769202},{"_id":"source/_posts/1734解码异或的排列.md","hash":"1d4e278dd5cca84e8f5b9644ef19c472489b1e77","modified":1620802150106},{"_id":"source/_posts/TCP和UDP协议.md","hash":"5ae7e858c106ff3961fdc344be9a8d38bf80ad5b","modified":1620887523211},{"_id":"public/api/posts/2.json","hash":"7f9053ca3da737b2a8bdfe0a8e0112785c5e3ba0","modified":1622440815697},{"_id":"public/api/articles/169多数元素.json","hash":"fbb42e05834c303ed1c361557110f09c93b3b523","modified":1621693725465},{"_id":"public/api/articles/1734解码异或的排列.json","hash":"cfe81a48891536d332440338ee675415e8f1b37e","modified":1621693725465},{"_id":"public/api/articles/TCP和UDP协议.json","hash":"b30813d380f0de6dfb1731d4800a86444982a4b6","modified":1621693725465},{"_id":"public/post/TCP和UDP协议.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620802161605},{"_id":"public/post/1734解码异或的排列.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620802161605},{"_id":"public/post/169多数元素.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620802161605},{"_id":"public/page/2/index.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1620802161605},{"_id":"public/api/categories/网络.json","hash":"4c763712368d472481687f994502ac3acd9beec8","modified":1621250983287},{"_id":"public/api/tags/TCP.json","hash":"b7b05853b65817567ad36d59528a94a5f5dd53b0","modified":1621250983287},{"_id":"public/api/tags/UDP.json","hash":"d3ce0e9e4a7651d067aeb0485879aee2ea2c6d63","modified":1621250983287},{"_id":"source/_posts/数据结构与算法-1.md","hash":"6cb46a6618fa0c39234dbd94cc73350d42ceb327","modified":1621693687840},{"_id":"source/images/questions/image-20210514201558920.png","hash":"50ca8f99e97da11adef31eeca9f1e85208e4bc40","modified":1621038750551},{"_id":"source/images/questions/image-20210515082344998.png","hash":"2d77201be8723e22765a576baa65bb4c0021e42d","modified":1621038754957},{"_id":"source/images/questions/image-20210515082847958.png","hash":"90ed721e9d65cfeec54d0e4f61a2ab6d365e2a78","modified":1621038758587},{"_id":"source/images/questions/image-20210515083752655.png","hash":"80bbc6afa0fc07a1610ec0827b1924df61c8b080","modified":1621039072695},{"_id":"source/_posts/数据结构与算法-1/image-20210514201311899.png","hash":"18e02540c4d29c463cca8d2e0da40ca45dbccf7d","modified":1620994403331},{"_id":"source/images/questions/image-20210514201311899.png","hash":"18e02540c4d29c463cca8d2e0da40ca45dbccf7d","modified":1621038732173},{"_id":"source/images/questions/image-20210515083455591.png","hash":"8326d8be923fdc572d86350c9a5b34aa6cb070e6","modified":1621038895658},{"_id":"source/_posts/TCP和UDP协议/tcp三次握手四次挥手.png","hash":"f8ef7c65b05dbe552b58f2a5902dd01ea620637f","modified":1620887459267},{"_id":"public/api/articles/数据结构与算法-1.json","hash":"cf9b5fae4fd860fccb35bf88b0baed4b73ae20b1","modified":1622209473143},{"_id":"public/post/数据结构与算法-1.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1621245509884},{"_id":"public/images/questions/image-20210515082344998.png","hash":"2d77201be8723e22765a576baa65bb4c0021e42d","modified":1621245509884},{"_id":"public/images/questions/image-20210514201558920.png","hash":"50ca8f99e97da11adef31eeca9f1e85208e4bc40","modified":1621245509884},{"_id":"public/images/questions/image-20210515082847958.png","hash":"90ed721e9d65cfeec54d0e4f61a2ab6d365e2a78","modified":1621245509884},{"_id":"public/images/questions/image-20210515083752655.png","hash":"80bbc6afa0fc07a1610ec0827b1924df61c8b080","modified":1621245509884},{"_id":"public/images/questions/image-20210514201311899.png","hash":"18e02540c4d29c463cca8d2e0da40ca45dbccf7d","modified":1621245509884},{"_id":"public/images/questions/image-20210515083455591.png","hash":"8326d8be923fdc572d86350c9a5b34aa6cb070e6","modified":1621245509884},{"_id":"public/post/数据结构与算法-1/image-20210514201311899.png","hash":"18e02540c4d29c463cca8d2e0da40ca45dbccf7d","modified":1621245509884},{"_id":"public/post/TCP和UDP协议/tcp三次握手四次挥手.png","hash":"f8ef7c65b05dbe552b58f2a5902dd01ea620637f","modified":1621245509884},{"_id":"source/_posts/70爬楼梯.md","hash":"3b86be11ccc3e1f4db933bff3c578fc774103670","modified":1621250966906},{"_id":"public/api/articles/70爬楼梯.json","hash":"41ff5a4e5c7d4b5b3d0aaff2e132c2f91c174b2f","modified":1622440815697},{"_id":"public/api/tags/递归.json","hash":"6f21703b26d9f7d59022ddf50ac6677afdad3e9d","modified":1622209473143},{"_id":"public/api/tags/动态规划.json","hash":"6df4a357c1343373e5295b2b5fddc4b45224f12e","modified":1622209473143},{"_id":"public/post/70爬楼梯.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1621250983287},{"_id":"source/_posts/15三数之和.md","hash":"b89a3d8d683fbf9c0a33d3ed1cb2981069508532","modified":1621301581387},{"_id":"public/api/articles/15三数之和.json","hash":"ca125c30c3e47514f792224a9887d259cfce26a9","modified":1622440815697},{"_id":"public/post/15三数之和.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1621303241777},{"_id":"source/_posts/Python合并文件夹下的PDF.md","hash":"4a63b52d263ff53ff209f0ca4eee2c0b99992619","modified":1621693716399},{"_id":"public/api/articles/Python合并文件夹下的PDF.json","hash":"3ece7b18ac2926a7913d3af9f8ecc2a4f20b16b2","modified":1622440815697},{"_id":"public/api/tags/小工具.json","hash":"3863ab3e8910012f23700bd2781e11f9512a6927","modified":1621693725465},{"_id":"public/post/Python合并文件夹下的PDF.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1621693725465},{"_id":"source/_posts/92反转链表.md","hash":"7328a0acf65c0b6603c4d6bffd92a24ccd166807","modified":1622209003009},{"_id":"source/images/questions/image-20210528213624999.png","hash":"ff0a719f4bfadcdb05f23bbee5e2b17efa46680b","modified":1622208985008},{"_id":"source/images/questions/image-20210528213456016.png","hash":"0dfa9cde53c3096e85050be3db9c4ac8ec338c4d","modified":1622208896035},{"_id":"source/images/questions/image-20210528213456019.png","hash":"0dfa9cde53c3096e85050be3db9c4ac8ec338c4d","modified":1622208914195},{"_id":"public/api/articles/92反转链表.json","hash":"90511d11070ec76aecb0ee8f6cd7cac2580c4942","modified":1622440815697},{"_id":"public/post/92反转链表.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1622209473143},{"_id":"public/images/questions/image-20210528213624999.png","hash":"ff0a719f4bfadcdb05f23bbee5e2b17efa46680b","modified":1622209473143},{"_id":"public/images/questions/image-20210528213456016.png","hash":"0dfa9cde53c3096e85050be3db9c4ac8ec338c4d","modified":1622209473143},{"_id":"public/images/questions/image-20210528213456019.png","hash":"0dfa9cde53c3096e85050be3db9c4ac8ec338c4d","modified":1622209473143},{"_id":"source/_posts/SpringBoot.md","hash":"788efe39607448d05b77c1669bb5380e79ea71c5","modified":1622440781293},{"_id":"source/_posts/SpringBoot/image-20210228152740784.png","hash":"f134341a1c759439412be8a47d383fef24c82fe0","modified":1614497271831},{"_id":"source/_posts/SpringBoot/image-20210228154312645.png","hash":"ce682c7bb7bb3a6ca9298b411e266e606560bec9","modified":1614498196934},{"_id":"source/_posts/SpringBoot/image-20210228154415200.png","hash":"b8be76601673c704c833aecb442ff8a807809312","modified":1614498267162},{"_id":"source/_posts/SpringBoot/1614492402407.png","hash":"f997b339aa3bba4184bb170f958e496fce615869","modified":1614492415710},{"_id":"public/api/articles/SpringBoot.json","hash":"124503513dcf84d823a72b5623acffb2d35027ed","modified":1622440815697},{"_id":"public/api/categories/SpringBoot.json","hash":"025d43d38fceb294a266e2172e7cf1239e8bb151","modified":1622440815697},{"_id":"public/api/tags/Java.json","hash":"a7a2d3c09a20896e4838187270e68c5891e6f98d","modified":1622440815697},{"_id":"public/api/tags/SpringBoot.json","hash":"025d43d38fceb294a266e2172e7cf1239e8bb151","modified":1622440815697},{"_id":"public/post/SpringBoot.html","hash":"1edbb32aee58a8ed8e3eaf50178dbe919e626019","modified":1622440815697},{"_id":"public/post/SpringBoot/image-20210228152740784.png","hash":"f134341a1c759439412be8a47d383fef24c82fe0","modified":1622440815697},{"_id":"public/post/SpringBoot/image-20210228154415200.png","hash":"b8be76601673c704c833aecb442ff8a807809312","modified":1622440815697},{"_id":"public/post/SpringBoot/image-20210228154312645.png","hash":"ce682c7bb7bb3a6ca9298b411e266e606560bec9","modified":1622440815697},{"_id":"public/post/SpringBoot/1614492402407.png","hash":"f997b339aa3bba4184bb170f958e496fce615869","modified":1622440815697}],"Category":[{"name":"算法","_id":"ckob5i8zy0003k0ufeala33mm"},{"name":"Nginx","_id":"ckob5i9020007k0ufcl7j7ma1"},{"name":"Django","_id":"ckob5i903000ak0uf98jmddne"},{"name":"Linux","_id":"ckob5i903000fk0ufa81c61ft"},{"name":"Shell","_id":"ckob5i90a000pk0ufdh0i6o6e"},{"name":"Vim","_id":"ckob5i90d000tk0uf4nvzdwg4"},{"name":"网络","_id":"ckol3yg3d0000iwuf1e7j30sn"},{"name":"SpringBoot","_id":"ckpc7de2x0001g4uf5uoscgi2"}],"Data":[],"Page":[{"title":"关于","date":"2021-05-03T07:26:23.000Z","tags":"关于","thumbnail":"/images/head.jpg","_content":"2021年5月23日，完成了这个博客网站，开启书写博客之路\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-05-03 15:26:23\ntags: 关于\nthumbnail: /images/head.jpg\n---\n2021年5月23日，完成了这个博客网站，开启书写博客之路\n\n","updated":"2021-05-03T11:04:22.231Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckob5i8zr0000k0uf2zr45cid","content":"<p>2021年5月23日，完成了这个博客网站，开启书写博客之路</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2021年5月23日，完成了这个博客网站，开启书写博客之路</p>\n"}],"Post":[{"title":"整数反转 leetCode 7","date":"2021-05-03T16:27:50.000Z","cover":"/images/banners/VCG211263245974.jpg","_content":"\n给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）\n\n## 1、解法1，未优化写法   40ms\n\n### 思路：\n:::details 展开我的思路\n\n   （1）这个题挺简单，就是通过%运算，每次都取到数的最后一位\n   （2）考虑到负数的问题，所以while那里使用了 x!=0，因为按这种方式计算，最后都会为0\n   （3）注意题目规定的整数范围，这里代码做了提前一位的判断。看下图解\n\n   ![](/post/7整数反转/image-20210504005805249.png)\n\n   第二排数字中，橘子的是5，它是大于上面同位置的4，这就意味着5后跟任何数字，都会比最大32为整数都大。\n   所以，我们到【最大数的1/10】时，就要开始判断了\n   如果某个数字**大于** 214748364那后面就不用再判断了，肯定溢出了。\n   如果某个数字**等于** 214748364呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的**末尾数字**比较，如果这个数字比**7**还大，说明溢出了。\n\n\n\n**负数也是一样：**\n\n![](/post/7整数反转/image-20210504010425266.png)\n\n上图中绿色部分是最小的32位整数，同样是在【最小数的 1/10】时开始判断\n如果某个数字**小于** -214748364说明溢出了\n如果某个数字**等于** -214748364，还需要跟最小数的**末尾比较**，即看它是否**小于8**\n\n\n:::\n\n\n### 遇到问题：\n\t因为Python 的%运算，是使用的floor的方式，在计算负数的时候，会出现和Java不同，所以，都转成正数来取模运算\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        reverse_num = 0\n        # 2147483647\n        # -2147483648\n        while(x != 0):\n            if x < 0:\n                tmp_num = -x % 10\n                tmp_num = -tmp_num\n            else:\n                tmp_num = x % 10\n            # 判断是否溢出\n            if (reverse_num > 214748364) or (reverse_num == 214748364 and tmp_num > 7):\n                return 0\n            if (reverse_num < -214748364) or (reverse_num == 214748364 and tmp_num > 7):\n                return 0\n            reverse_num = reverse_num * 10 + tmp_num\n            x = int(x/10)\n        return reverse_num\n```\n\n## 2、 将解法1所写的代码进行优化   32ms\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        # 2147483647\n        # -2147483648\n        y, res = abs(x), 0\n        while(y != 0):\n            tmp_num = y % 10\n            # 判断是否溢出\n            if res < -214748364:\n                return 0\n            if (res > 214748364) or (res == 214748364 and tmp_num > 7):\n                return 0\n            res = res * 10 + tmp_num\n            y = int(y/10)\n        return res if x > 0 else -res\n```\n\n## 3、使用字符串反转的方法  36ms\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        y = str(x)\n        ins = 1\n        res = \"\"\n        if y[0] == \"-\":\n            ins = -1\n            res = y[1:][::-1]\n        else:\n            res = y[::-1]\n        nums = int(res)\n        return 0 if nums <-2**31 or nums > 2**31-1 else (ins * nums)\n```\n\n### 题目总结：\n\t在用字符串反转的方法时，我发现Ptyhon这样将字符串进行转换，整型不会内存溢出，很好奇的我，去网上查阅了资料，发现Python3之后，都是统一使用了长整型\n\n现在是2021年5月4号零晨1:45分，这是我刷leetcode的第三道题，每次将自己写的一串很长的代码，优化成很简单，看着自己的代码运行时间越写越短，内心有一点无比自豪的感觉，很喜欢这种超越自己的，继续加油吧。哈哈哈哈哈哈","source":"_posts/7整数反转.md","raw":"---\ntitle: 整数反转 leetCode 7\ndate: 2021-05-04 00:27:50\ntags:\n\t- 算法\n\t- Python\ncategories: 算法\ncover: /images/banners/VCG211263245974.jpg\n---\n\n给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）\n\n## 1、解法1，未优化写法   40ms\n\n### 思路：\n:::details 展开我的思路\n\n   （1）这个题挺简单，就是通过%运算，每次都取到数的最后一位\n   （2）考虑到负数的问题，所以while那里使用了 x!=0，因为按这种方式计算，最后都会为0\n   （3）注意题目规定的整数范围，这里代码做了提前一位的判断。看下图解\n\n   ![](/post/7整数反转/image-20210504005805249.png)\n\n   第二排数字中，橘子的是5，它是大于上面同位置的4，这就意味着5后跟任何数字，都会比最大32为整数都大。\n   所以，我们到【最大数的1/10】时，就要开始判断了\n   如果某个数字**大于** 214748364那后面就不用再判断了，肯定溢出了。\n   如果某个数字**等于** 214748364呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的**末尾数字**比较，如果这个数字比**7**还大，说明溢出了。\n\n\n\n**负数也是一样：**\n\n![](/post/7整数反转/image-20210504010425266.png)\n\n上图中绿色部分是最小的32位整数，同样是在【最小数的 1/10】时开始判断\n如果某个数字**小于** -214748364说明溢出了\n如果某个数字**等于** -214748364，还需要跟最小数的**末尾比较**，即看它是否**小于8**\n\n\n:::\n\n\n### 遇到问题：\n\t因为Python 的%运算，是使用的floor的方式，在计算负数的时候，会出现和Java不同，所以，都转成正数来取模运算\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        reverse_num = 0\n        # 2147483647\n        # -2147483648\n        while(x != 0):\n            if x < 0:\n                tmp_num = -x % 10\n                tmp_num = -tmp_num\n            else:\n                tmp_num = x % 10\n            # 判断是否溢出\n            if (reverse_num > 214748364) or (reverse_num == 214748364 and tmp_num > 7):\n                return 0\n            if (reverse_num < -214748364) or (reverse_num == 214748364 and tmp_num > 7):\n                return 0\n            reverse_num = reverse_num * 10 + tmp_num\n            x = int(x/10)\n        return reverse_num\n```\n\n## 2、 将解法1所写的代码进行优化   32ms\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        # 2147483647\n        # -2147483648\n        y, res = abs(x), 0\n        while(y != 0):\n            tmp_num = y % 10\n            # 判断是否溢出\n            if res < -214748364:\n                return 0\n            if (res > 214748364) or (res == 214748364 and tmp_num > 7):\n                return 0\n            res = res * 10 + tmp_num\n            y = int(y/10)\n        return res if x > 0 else -res\n```\n\n## 3、使用字符串反转的方法  36ms\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        y = str(x)\n        ins = 1\n        res = \"\"\n        if y[0] == \"-\":\n            ins = -1\n            res = y[1:][::-1]\n        else:\n            res = y[::-1]\n        nums = int(res)\n        return 0 if nums <-2**31 or nums > 2**31-1 else (ins * nums)\n```\n\n### 题目总结：\n\t在用字符串反转的方法时，我发现Ptyhon这样将字符串进行转换，整型不会内存溢出，很好奇的我，去网上查阅了资料，发现Python3之后，都是统一使用了长整型\n\n现在是2021年5月4号零晨1:45分，这是我刷leetcode的第三道题，每次将自己写的一串很长的代码，优化成很简单，看着自己的代码运行时间越写越短，内心有一点无比自豪的感觉，很喜欢这种超越自己的，继续加油吧。哈哈哈哈哈哈","slug":"7整数反转","published":1,"updated":"2021-05-05T07:45:15.675Z","_id":"ckob5i8zu0001k0ufdduwhr5c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）</p>\n<h2 id=\"1、解法1，未优化写法-40ms\"><a href=\"#1、解法1，未优化写法-40ms\" class=\"headerlink\" title=\"1、解法1，未优化写法   40ms\"></a>1、解法1，未优化写法   40ms</h2><h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><details class=\"custom-details\">\n<summary>展开我的思路</summary>\n<p>   （1）这个题挺简单，就是通过%运算，每次都取到数的最后一位<br>   （2）考虑到负数的问题，所以while那里使用了 x!=0，因为按这种方式计算，最后都会为0<br>   （3）注意题目规定的整数范围，这里代码做了提前一位的判断。看下图解</p>\n<p>   <img src=\"/post/7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/image-20210504005805249.png\"></p>\n<p>   第二排数字中，橘子的是5，它是大于上面同位置的4，这就意味着5后跟任何数字，都会比最大32为整数都大。<br>   所以，我们到【最大数的1/10】时，就要开始判断了<br>   如果某个数字<strong>大于</strong> 214748364那后面就不用再判断了，肯定溢出了。<br>   如果某个数字<strong>等于</strong> 214748364呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的<strong>末尾数字</strong>比较，如果这个数字比<strong>7</strong>还大，说明溢出了。</p>\n<p><strong>负数也是一样：</strong></p>\n<p><img src=\"/post/7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/image-20210504010425266.png\"></p>\n<p>上图中绿色部分是最小的32位整数，同样是在【最小数的 1/10】时开始判断<br>如果某个数字<strong>小于</strong> -214748364说明溢出了<br>如果某个数字<strong>等于</strong> -214748364，还需要跟最小数的<strong>末尾比较</strong>，即看它是否<strong>小于8</strong></p>\n\n</details>\n<h3 id=\"遇到问题：\"><a href=\"#遇到问题：\" class=\"headerlink\" title=\"遇到问题：\"></a>遇到问题：</h3><pre><code>因为Python 的%运算，是使用的floor的方式，在计算负数的时候，会出现和Java不同，所以，都转成正数来取模运算\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        reverse_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token comment\"># 2147483647</span>\n        <span class=\"token comment\"># -2147483648</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                tmp_num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n                tmp_num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>tmp_num\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tmp_num <span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            <span class=\"token comment\"># 判断是否溢出</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">></span> <span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            reverse_num <span class=\"token operator\">=</span> reverse_num <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> tmp_num\n            x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> reverse_num<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2、-将解法1所写的代码进行优化-32ms\"><a href=\"#2、-将解法1所写的代码进行优化-32ms\" class=\"headerlink\" title=\"2、 将解法1所写的代码进行优化   32ms\"></a>2、 将解法1所写的代码进行优化   32ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 2147483647</span>\n        <span class=\"token comment\"># -2147483648</span>\n        y<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            tmp_num <span class=\"token operator\">=</span> y <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            <span class=\"token comment\"># 判断是否溢出</span>\n            <span class=\"token keyword\">if</span> res <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">214748364</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">></span> <span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> tmp_num\n            y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span>res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3、使用字符串反转的方法-36ms\"><a href=\"#3、使用字符串反转的方法-36ms\" class=\"headerlink\" title=\"3、使用字符串反转的方法  36ms\"></a>3、使用字符串反转的方法  36ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        ins <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">:</span>\n            ins <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            res <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> nums <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span> <span class=\"token keyword\">or</span> nums <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>ins <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"题目总结：\"><a href=\"#题目总结：\" class=\"headerlink\" title=\"题目总结：\"></a>题目总结：</h3><pre><code>在用字符串反转的方法时，我发现Ptyhon这样将字符串进行转换，整型不会内存溢出，很好奇的我，去网上查阅了资料，发现Python3之后，都是统一使用了长整型\n</code></pre>\n<p>现在是2021年5月4号零晨1:45分，这是我刷leetcode的第三道题，每次将自己写的一串很长的代码，优化成很简单，看着自己的代码运行时间越写越短，内心有一点无比自豪的感觉，很喜欢这种超越自己的，继续加油吧。哈哈哈哈哈哈</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）</p>\n<h2 id=\"1、解法1，未优化写法-40ms\"><a href=\"#1、解法1，未优化写法-40ms\" class=\"headerlink\" title=\"1、解法1，未优化写法   40ms\"></a>1、解法1，未优化写法   40ms</h2><h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>:::details 展开我的思路</p>\n<p>   （1）这个题挺简单，就是通过%运算，每次都取到数的最后一位<br>   （2）考虑到负数的问题，所以while那里使用了 x!=0，因为按这种方式计算，最后都会为0<br>   （3）注意题目规定的整数范围，这里代码做了提前一位的判断。看下图解</p>\n<p>   <img src=\"/post/7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/image-20210504005805249.png\"></p>\n<p>   第二排数字中，橘子的是5，它是大于上面同位置的4，这就意味着5后跟任何数字，都会比最大32为整数都大。<br>   所以，我们到【最大数的1/10】时，就要开始判断了<br>   如果某个数字<strong>大于</strong> 214748364那后面就不用再判断了，肯定溢出了。<br>   如果某个数字<strong>等于</strong> 214748364呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的<strong>末尾数字</strong>比较，如果这个数字比<strong>7</strong>还大，说明溢出了。</p>\n<p><strong>负数也是一样：</strong></p>\n<p><img src=\"/post/7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/image-20210504010425266.png\"></p>\n<p>上图中绿色部分是最小的32位整数，同样是在【最小数的 1/10】时开始判断<br>如果某个数字<strong>小于</strong> -214748364说明溢出了<br>如果某个数字<strong>等于</strong> -214748364，还需要跟最小数的<strong>末尾比较</strong>，即看它是否<strong>小于8</strong></p>\n<p>:::</p>\n<h3 id=\"遇到问题：\"><a href=\"#遇到问题：\" class=\"headerlink\" title=\"遇到问题：\"></a>遇到问题：</h3><pre><code>因为Python 的%运算，是使用的floor的方式，在计算负数的时候，会出现和Java不同，所以，都转成正数来取模运算\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        reverse_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token comment\"># 2147483647</span>\n        <span class=\"token comment\"># -2147483648</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                tmp_num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n                tmp_num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>tmp_num\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tmp_num <span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            <span class=\"token comment\"># 判断是否溢出</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">></span> <span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            reverse_num <span class=\"token operator\">=</span> reverse_num <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> tmp_num\n            x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> reverse_num<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2、-将解法1所写的代码进行优化-32ms\"><a href=\"#2、-将解法1所写的代码进行优化-32ms\" class=\"headerlink\" title=\"2、 将解法1所写的代码进行优化   32ms\"></a>2、 将解法1所写的代码进行优化   32ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 2147483647</span>\n        <span class=\"token comment\"># -2147483648</span>\n        y<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            tmp_num <span class=\"token operator\">=</span> y <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            <span class=\"token comment\"># 判断是否溢出</span>\n            <span class=\"token keyword\">if</span> res <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">214748364</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">></span> <span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> tmp_num\n            y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span>res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3、使用字符串反转的方法-36ms\"><a href=\"#3、使用字符串反转的方法-36ms\" class=\"headerlink\" title=\"3、使用字符串反转的方法  36ms\"></a>3、使用字符串反转的方法  36ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        ins <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">:</span>\n            ins <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            res <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> nums <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span> <span class=\"token keyword\">or</span> nums <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>ins <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"题目总结：\"><a href=\"#题目总结：\" class=\"headerlink\" title=\"题目总结：\"></a>题目总结：</h3><pre><code>在用字符串反转的方法时，我发现Ptyhon这样将字符串进行转换，整型不会内存溢出，很好奇的我，去网上查阅了资料，发现Python3之后，都是统一使用了长整型\n</code></pre>\n<p>现在是2021年5月4号零晨1:45分，这是我刷leetcode的第三道题，每次将自己写的一串很长的代码，优化成很简单，看着自己的代码运行时间越写越短，内心有一点无比自豪的感觉，很喜欢这种超越自己的，继续加油吧。哈哈哈哈哈哈</p>\n"},{"title":"nginx","date":"2021-05-05T04:39:04.000Z","cover":"/images/banners/VCG41183545763.jpg","_content":"\n## 设置开机自动启动\n:::details nginx开机自动启动(Centos8测试环境)\n### 1、init.d下创建文件nginx\n```bash\nvim /etc/init.d/nginx\n```\n[nginx官方文档](https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/)\n\n\n### 2、将官方配置，添加到编辑的文件中：\n```shell\nnginx=”/usr/local/nginx/sbin/nginx” //修改成nginx执行程序的路径。\nNGINX_CONF_FILE=”/usr/local/nginx/conf/nginx.conf” //修改成nginx.conf文\n件的路径。\n```\n### 3、保存后设置文件的执行权限\n```bash\nchmod a+x /etc/init.d/nginx\n```\n\n### 4、通过下面指令控制启动停止\n```bash\n/etc/init.d/nginx start\n/etc/init.d/nginx stop\n```\n**查看进程命令**\n\n```bash\nps aux | grep nginx\n也可以通过kill掉pid来关闭进程\n```\n### 5、上面测试通过后、将nginx服务加入chkconfig管理列表：\n```bash\nchkconfig --add /etc/init.d/nginx\n```\n\n### 6、加完5之后，可以使用service对nginx进行启动，重启等操作。\n```bash\nservice nginx start\nservice nginx stop\nservice nginx restart\n```\n### 7、最后设置开机自动启动\n```bash\nchkconfig nginx on\n```\n:::","source":"_posts/nginx.md","raw":"---\ntitle: nginx\ndate: 2021-05-5 12:39:04\ntags: \n\t- Nginx\ncategories: Nginx\ncover: /images/banners/VCG41183545763.jpg\n---\n\n## 设置开机自动启动\n:::details nginx开机自动启动(Centos8测试环境)\n### 1、init.d下创建文件nginx\n```bash\nvim /etc/init.d/nginx\n```\n[nginx官方文档](https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/)\n\n\n### 2、将官方配置，添加到编辑的文件中：\n```shell\nnginx=”/usr/local/nginx/sbin/nginx” //修改成nginx执行程序的路径。\nNGINX_CONF_FILE=”/usr/local/nginx/conf/nginx.conf” //修改成nginx.conf文\n件的路径。\n```\n### 3、保存后设置文件的执行权限\n```bash\nchmod a+x /etc/init.d/nginx\n```\n\n### 4、通过下面指令控制启动停止\n```bash\n/etc/init.d/nginx start\n/etc/init.d/nginx stop\n```\n**查看进程命令**\n\n```bash\nps aux | grep nginx\n也可以通过kill掉pid来关闭进程\n```\n### 5、上面测试通过后、将nginx服务加入chkconfig管理列表：\n```bash\nchkconfig --add /etc/init.d/nginx\n```\n\n### 6、加完5之后，可以使用service对nginx进行启动，重启等操作。\n```bash\nservice nginx start\nservice nginx stop\nservice nginx restart\n```\n### 7、最后设置开机自动启动\n```bash\nchkconfig nginx on\n```\n:::","slug":"nginx","published":1,"updated":"2021-05-05T07:47:34.169Z","_id":"ckob5i8zx0002k0uf4z6daxer","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"设置开机自动启动\"><a href=\"#设置开机自动启动\" class=\"headerlink\" title=\"设置开机自动启动\"></a>设置开机自动启动</h2><details class=\"custom-details\">\n<summary>nginx开机自动启动(Centos8测试环境)</summary>\n<p><h3 id=\"1、init-d下创建文件nginx\"><a href=\"#1、init-d下创建文件nginx\" class=\"headerlink\" title=\"1、init.d下创建文件nginx\"></a>1、init.d下创建文件nginx</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/init.d/nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><a href=\"https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/\">nginx官方文档</a></p>\n<h3 id=\"2、将官方配置，添加到编辑的文件中：\"><a href=\"#2、将官方配置，添加到编辑的文件中：\" class=\"headerlink\" title=\"2、将官方配置，添加到编辑的文件中：\"></a>2、将官方配置，添加到编辑的文件中：</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">nginx</span><span class=\"token operator\">=</span>”/usr/local/nginx/sbin/nginx” //修改成nginx执行程序的路径。\n<span class=\"token assign-left variable\">NGINX_CONF_FILE</span><span class=\"token operator\">=</span>”/usr/local/nginx/conf/nginx.conf” //修改成nginx.conf文\n件的路径。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3、保存后设置文件的执行权限\"><a href=\"#3、保存后设置文件的执行权限\" class=\"headerlink\" title=\"3、保存后设置文件的执行权限\"></a>3、保存后设置文件的执行权限</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> a+x /etc/init.d/nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4、通过下面指令控制启动停止\"><a href=\"#4、通过下面指令控制启动停止\" class=\"headerlink\" title=\"4、通过下面指令控制启动停止\"></a>4、通过下面指令控制启动停止</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/etc/init.d/nginx start\n/etc/init.d/nginx stop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>查看进程命令</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> aux <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> nginx\n也可以通过kill掉pid来关闭进程<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"5、上面测试通过后、将nginx服务加入chkconfig管理列表：\"><a href=\"#5、上面测试通过后、将nginx服务加入chkconfig管理列表：\" class=\"headerlink\" title=\"5、上面测试通过后、将nginx服务加入chkconfig管理列表：\"></a>5、上面测试通过后、将nginx服务加入chkconfig管理列表：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chkconfig</span> --add /etc/init.d/nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6、加完5之后，可以使用service对nginx进行启动，重启等操作。\"><a href=\"#6、加完5之后，可以使用service对nginx进行启动，重启等操作。\" class=\"headerlink\" title=\"6、加完5之后，可以使用service对nginx进行启动，重启等操作。\"></a>6、加完5之后，可以使用service对nginx进行启动，重启等操作。</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">service</span> nginx start\n<span class=\"token function\">service</span> nginx stop\n<span class=\"token function\">service</span> nginx restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"7、最后设置开机自动启动\"><a href=\"#7、最后设置开机自动启动\" class=\"headerlink\" title=\"7、最后设置开机自动启动\"></a>7、最后设置开机自动启动</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chkconfig</span> nginx on<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</p>\n</details>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设置开机自动启动\"><a href=\"#设置开机自动启动\" class=\"headerlink\" title=\"设置开机自动启动\"></a>设置开机自动启动</h2><p>:::details nginx开机自动启动(Centos8测试环境)</p>\n<h3 id=\"1、init-d下创建文件nginx\"><a href=\"#1、init-d下创建文件nginx\" class=\"headerlink\" title=\"1、init.d下创建文件nginx\"></a>1、init.d下创建文件nginx</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/init.d/nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><a href=\"https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/\">nginx官方文档</a></p>\n<h3 id=\"2、将官方配置，添加到编辑的文件中：\"><a href=\"#2、将官方配置，添加到编辑的文件中：\" class=\"headerlink\" title=\"2、将官方配置，添加到编辑的文件中：\"></a>2、将官方配置，添加到编辑的文件中：</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">nginx</span><span class=\"token operator\">=</span>”/usr/local/nginx/sbin/nginx” //修改成nginx执行程序的路径。\n<span class=\"token assign-left variable\">NGINX_CONF_FILE</span><span class=\"token operator\">=</span>”/usr/local/nginx/conf/nginx.conf” //修改成nginx.conf文\n件的路径。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3、保存后设置文件的执行权限\"><a href=\"#3、保存后设置文件的执行权限\" class=\"headerlink\" title=\"3、保存后设置文件的执行权限\"></a>3、保存后设置文件的执行权限</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> a+x /etc/init.d/nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4、通过下面指令控制启动停止\"><a href=\"#4、通过下面指令控制启动停止\" class=\"headerlink\" title=\"4、通过下面指令控制启动停止\"></a>4、通过下面指令控制启动停止</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/etc/init.d/nginx start\n/etc/init.d/nginx stop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>查看进程命令</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> aux <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> nginx\n也可以通过kill掉pid来关闭进程<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"5、上面测试通过后、将nginx服务加入chkconfig管理列表：\"><a href=\"#5、上面测试通过后、将nginx服务加入chkconfig管理列表：\" class=\"headerlink\" title=\"5、上面测试通过后、将nginx服务加入chkconfig管理列表：\"></a>5、上面测试通过后、将nginx服务加入chkconfig管理列表：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chkconfig</span> --add /etc/init.d/nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6、加完5之后，可以使用service对nginx进行启动，重启等操作。\"><a href=\"#6、加完5之后，可以使用service对nginx进行启动，重启等操作。\" class=\"headerlink\" title=\"6、加完5之后，可以使用service对nginx进行启动，重启等操作。\"></a>6、加完5之后，可以使用service对nginx进行启动，重启等操作。</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">service</span> nginx start\n<span class=\"token function\">service</span> nginx stop\n<span class=\"token function\">service</span> nginx restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"7、最后设置开机自动启动\"><a href=\"#7、最后设置开机自动启动\" class=\"headerlink\" title=\"7、最后设置开机自动启动\"></a>7、最后设置开机自动启动</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chkconfig</span> nginx on<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>:::</p>\n"},{"title":"Django","date":"2021-05-05T06:39:18.000Z","cover":"/images/banners/VCG41N1158547769.jpg","_content":"\n## Django程序开机自动启动\n\n:::details 通过shell脚本，设置开机自动启动Django的uwsgi服务（测试环境Cento8）\n\n### 1、切换到/etc/init.d/，目录下创建一个自己的脚本\n\n### 2、制作sh脚本 vim start_uwsgi\n**注意，注释也要加进去**\n\n```shell\n#!/bin/sh\n#add for chkconfig\n#chkconfig: 2345 70 30\n#description: the description of the shell   #关于脚本的简短描述\n#processname: andyStart      #第一个进程名，后边设置自启动的时候会用到\n#下面要启动服务的命令\nsource /418pro/env/djangoVenv/bin/activate && uwsgi --ini /418pro/uwsgi-configs/django.ini   #进入虚拟环境 && 启动uwsgi 配置文件的具体位置\n```\n\n**说明：**\n\n（1）2345是指脚本的运行级别，即在2345这4种模式下都可以运行，234都是文本界面，5就是图形界面X\n\n（1）70是指脚本将来的启动顺序号，如果别的程序的启动顺序号比70小（比如44、45），则脚本需要等这些程序都启动以后才启动。\n\n（1）30是指系统关闭时，脚本的停止顺序号。\n\n**linux 下shell脚本执行多个命令的方法**\n\n(1)每个命令之间用;隔开\n\n说明：各命令的执行给果，不会影响其它命令的执行。换句话说，各个命令都会执行，但不保证每个命令都执行成功。\n\n(2)每个命令之间用&&隔开\n\n说明：若前面的命令执行成功，才会去执行后面的命令。这样可以保证所有的命令执行完毕后，执行过程都是成功的。\n\n**(3)每个命令之间用||隔开**\n\n说明：||是或的意思，只有前面的命令执行失败后才去执行下一条命令，直到执行成功一条命令为止。\n\n### 3、给脚本加上可执行权限：\n\n```bash\nchmod a+x start_uwsgi\n```\n\n\n### 4、利用chkconfig命令将脚本设置为自启动：\n\n```bash\nchkconfig --add start_uwsgi\n```\n:::\n\n","source":"_posts/Django.md","raw":"---\ntitle: Django\ndate: 2021-05-05 14:39:18\ntags: \n\t- Django\n\t- Python\ncategories: Django\ncover: /images/banners/VCG41N1158547769.jpg\n---\n\n## Django程序开机自动启动\n\n:::details 通过shell脚本，设置开机自动启动Django的uwsgi服务（测试环境Cento8）\n\n### 1、切换到/etc/init.d/，目录下创建一个自己的脚本\n\n### 2、制作sh脚本 vim start_uwsgi\n**注意，注释也要加进去**\n\n```shell\n#!/bin/sh\n#add for chkconfig\n#chkconfig: 2345 70 30\n#description: the description of the shell   #关于脚本的简短描述\n#processname: andyStart      #第一个进程名，后边设置自启动的时候会用到\n#下面要启动服务的命令\nsource /418pro/env/djangoVenv/bin/activate && uwsgi --ini /418pro/uwsgi-configs/django.ini   #进入虚拟环境 && 启动uwsgi 配置文件的具体位置\n```\n\n**说明：**\n\n（1）2345是指脚本的运行级别，即在2345这4种模式下都可以运行，234都是文本界面，5就是图形界面X\n\n（1）70是指脚本将来的启动顺序号，如果别的程序的启动顺序号比70小（比如44、45），则脚本需要等这些程序都启动以后才启动。\n\n（1）30是指系统关闭时，脚本的停止顺序号。\n\n**linux 下shell脚本执行多个命令的方法**\n\n(1)每个命令之间用;隔开\n\n说明：各命令的执行给果，不会影响其它命令的执行。换句话说，各个命令都会执行，但不保证每个命令都执行成功。\n\n(2)每个命令之间用&&隔开\n\n说明：若前面的命令执行成功，才会去执行后面的命令。这样可以保证所有的命令执行完毕后，执行过程都是成功的。\n\n**(3)每个命令之间用||隔开**\n\n说明：||是或的意思，只有前面的命令执行失败后才去执行下一条命令，直到执行成功一条命令为止。\n\n### 3、给脚本加上可执行权限：\n\n```bash\nchmod a+x start_uwsgi\n```\n\n\n### 4、利用chkconfig命令将脚本设置为自启动：\n\n```bash\nchkconfig --add start_uwsgi\n```\n:::\n\n","slug":"Django","published":1,"updated":"2021-05-05T07:48:50.956Z","_id":"ckob5i9000005k0ufdzs10v6y","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Django程序开机自动启动\"><a href=\"#Django程序开机自动启动\" class=\"headerlink\" title=\"Django程序开机自动启动\"></a>Django程序开机自动启动</h2><details class=\"custom-details\">\n<summary>通过shell脚本，设置开机自动启动Django的uwsgi服务（测试环境Cento8）</summary>\n<p><h3 id=\"1、切换到-etc-init-d-，目录下创建一个自己的脚本\"><a href=\"#1、切换到-etc-init-d-，目录下创建一个自己的脚本\" class=\"headerlink\" title=\"1、切换到/etc/init.d/，目录下创建一个自己的脚本\"></a>1、切换到/etc/init.d/，目录下创建一个自己的脚本</h3><h3 id=\"2、制作sh脚本-vim-start-uwsgi\"><a href=\"#2、制作sh脚本-vim-start-uwsgi\" class=\"headerlink\" title=\"2、制作sh脚本 vim start_uwsgi\"></a>2、制作sh脚本 vim start_uwsgi</h3><p><strong>注意，注释也要加进去</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token comment\">#add for chkconfig</span>\n<span class=\"token comment\">#chkconfig: 2345 70 30</span>\n<span class=\"token comment\">#description: the description of the shell   #关于脚本的简短描述</span>\n<span class=\"token comment\">#processname: andyStart      #第一个进程名，后边设置自启动的时候会用到</span>\n<span class=\"token comment\">#下面要启动服务的命令</span>\n<span class=\"token builtin class-name\">source</span> /418pro/env/djangoVenv/bin/activate <span class=\"token operator\">&amp;&amp;</span> uwsgi --ini /418pro/uwsgi-configs/django.ini   <span class=\"token comment\">#进入虚拟环境 &amp;&amp; 启动uwsgi 配置文件的具体位置</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>说明：</strong></p>\n<p>（1）2345是指脚本的运行级别，即在2345这4种模式下都可以运行，234都是文本界面，5就是图形界面X</p>\n<p>（1）70是指脚本将来的启动顺序号，如果别的程序的启动顺序号比70小（比如44、45），则脚本需要等这些程序都启动以后才启动。</p>\n<p>（1）30是指系统关闭时，脚本的停止顺序号。</p>\n<p><strong>linux 下shell脚本执行多个命令的方法</strong></p>\n<p>(1)每个命令之间用;隔开</p>\n<p>说明：各命令的执行给果，不会影响其它命令的执行。换句话说，各个命令都会执行，但不保证每个命令都执行成功。</p>\n<p>(2)每个命令之间用&amp;&amp;隔开</p>\n<p>说明：若前面的命令执行成功，才会去执行后面的命令。这样可以保证所有的命令执行完毕后，执行过程都是成功的。</p>\n<p><strong>(3)每个命令之间用||隔开</strong></p>\n<p>说明：||是或的意思，只有前面的命令执行失败后才去执行下一条命令，直到执行成功一条命令为止。</p>\n<h3 id=\"3、给脚本加上可执行权限：\"><a href=\"#3、给脚本加上可执行权限：\" class=\"headerlink\" title=\"3、给脚本加上可执行权限：\"></a>3、给脚本加上可执行权限：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> a+x start_uwsgi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"4、利用chkconfig命令将脚本设置为自启动：\"><a href=\"#4、利用chkconfig命令将脚本设置为自启动：\" class=\"headerlink\" title=\"4、利用chkconfig命令将脚本设置为自启动：\"></a>4、利用chkconfig命令将脚本设置为自启动：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chkconfig</span> --add start_uwsgi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</p>\n</details>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Django程序开机自动启动\"><a href=\"#Django程序开机自动启动\" class=\"headerlink\" title=\"Django程序开机自动启动\"></a>Django程序开机自动启动</h2><p>:::details 通过shell脚本，设置开机自动启动Django的uwsgi服务（测试环境Cento8）</p>\n<h3 id=\"1、切换到-etc-init-d-，目录下创建一个自己的脚本\"><a href=\"#1、切换到-etc-init-d-，目录下创建一个自己的脚本\" class=\"headerlink\" title=\"1、切换到/etc/init.d/，目录下创建一个自己的脚本\"></a>1、切换到/etc/init.d/，目录下创建一个自己的脚本</h3><h3 id=\"2、制作sh脚本-vim-start-uwsgi\"><a href=\"#2、制作sh脚本-vim-start-uwsgi\" class=\"headerlink\" title=\"2、制作sh脚本 vim start_uwsgi\"></a>2、制作sh脚本 vim start_uwsgi</h3><p><strong>注意，注释也要加进去</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token comment\">#add for chkconfig</span>\n<span class=\"token comment\">#chkconfig: 2345 70 30</span>\n<span class=\"token comment\">#description: the description of the shell   #关于脚本的简短描述</span>\n<span class=\"token comment\">#processname: andyStart      #第一个进程名，后边设置自启动的时候会用到</span>\n<span class=\"token comment\">#下面要启动服务的命令</span>\n<span class=\"token builtin class-name\">source</span> /418pro/env/djangoVenv/bin/activate <span class=\"token operator\">&amp;&amp;</span> uwsgi --ini /418pro/uwsgi-configs/django.ini   <span class=\"token comment\">#进入虚拟环境 &amp;&amp; 启动uwsgi 配置文件的具体位置</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>说明：</strong></p>\n<p>（1）2345是指脚本的运行级别，即在2345这4种模式下都可以运行，234都是文本界面，5就是图形界面X</p>\n<p>（1）70是指脚本将来的启动顺序号，如果别的程序的启动顺序号比70小（比如44、45），则脚本需要等这些程序都启动以后才启动。</p>\n<p>（1）30是指系统关闭时，脚本的停止顺序号。</p>\n<p><strong>linux 下shell脚本执行多个命令的方法</strong></p>\n<p>(1)每个命令之间用;隔开</p>\n<p>说明：各命令的执行给果，不会影响其它命令的执行。换句话说，各个命令都会执行，但不保证每个命令都执行成功。</p>\n<p>(2)每个命令之间用&amp;&amp;隔开</p>\n<p>说明：若前面的命令执行成功，才会去执行后面的命令。这样可以保证所有的命令执行完毕后，执行过程都是成功的。</p>\n<p><strong>(3)每个命令之间用||隔开</strong></p>\n<p>说明：||是或的意思，只有前面的命令执行失败后才去执行下一条命令，直到执行成功一条命令为止。</p>\n<h3 id=\"3、给脚本加上可执行权限：\"><a href=\"#3、给脚本加上可执行权限：\" class=\"headerlink\" title=\"3、给脚本加上可执行权限：\"></a>3、给脚本加上可执行权限：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> a+x start_uwsgi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"4、利用chkconfig命令将脚本设置为自启动：\"><a href=\"#4、利用chkconfig命令将脚本设置为自启动：\" class=\"headerlink\" title=\"4、利用chkconfig命令将脚本设置为自启动：\"></a>4、利用chkconfig命令将脚本设置为自启动：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chkconfig</span> --add start_uwsgi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>:::</p>\n"},{"title":"linux操作宝典","date":"2021-04-29T06:33:15.000Z","cover":"/images/banners/VCG211284641681.jpg","_content":"\n## 按内容搜索所有文件\n\n```\ngrep -rn \"hello,world!\" *\n```\n\n\t* 表示当前目录所有文件，也可以是某个文件名\n\t-r 是递归查找\n\t-n 是显示行号\n\t-R 查找所有文件包含子目录\n\t-i 忽略大小写\n\t-l 只列出匹配的文件名\n\t-L 列出不匹配的文件名\n\t-w 只匹配整个单词，而不是字符串的一部分（匹配 hello，不匹配helloo）\n\n\n\n## 排查内存占用\n\n### 1.排查磁盘满的节点，执行以下命令：\n\n```\ndf -h\n```\n\n### 2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\n\n\n```\ndu -sh * | grep G\n```\n\n### 3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\n\n```\ndu -sh * | grep G 或者 du -sh * | grep T\n```\n\n### 4.删除查找出来的异常文件命令：\n\n```\nrm -rf 文件名\n```\n\n### 5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\n\n\n```\nlsof -n | grep delete\n```\n\n### 6.找出已删除的文件但未释放内存的进程，然后释放进程。\n\n\n```\nkill -9 进程号\n```","source":"_posts/linux.md","raw":"---\ntitle: linux操作宝典 \ndate: 2021-04-29 14:33:15\ntags: \n\t- Linux\ncategories: Linux\ncover: /images/banners/VCG211284641681.jpg\n---\n\n## 按内容搜索所有文件\n\n```\ngrep -rn \"hello,world!\" *\n```\n\n\t* 表示当前目录所有文件，也可以是某个文件名\n\t-r 是递归查找\n\t-n 是显示行号\n\t-R 查找所有文件包含子目录\n\t-i 忽略大小写\n\t-l 只列出匹配的文件名\n\t-L 列出不匹配的文件名\n\t-w 只匹配整个单词，而不是字符串的一部分（匹配 hello，不匹配helloo）\n\n\n\n## 排查内存占用\n\n### 1.排查磁盘满的节点，执行以下命令：\n\n```\ndf -h\n```\n\n### 2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\n\n\n```\ndu -sh * | grep G\n```\n\n### 3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\n\n```\ndu -sh * | grep G 或者 du -sh * | grep T\n```\n\n### 4.删除查找出来的异常文件命令：\n\n```\nrm -rf 文件名\n```\n\n### 5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\n\n\n```\nlsof -n | grep delete\n```\n\n### 6.找出已删除的文件但未释放内存的进程，然后释放进程。\n\n\n```\nkill -9 进程号\n```","slug":"linux","published":1,"updated":"2021-05-05T07:44:23.145Z","_id":"ckob5i9010006k0ufgkll3pq3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"按内容搜索所有文件\"><a href=\"#按内容搜索所有文件\" class=\"headerlink\" title=\"按内容搜索所有文件\"></a>按内容搜索所有文件</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">grep -rn &quot;hello,world!&quot; *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre><code>* 表示当前目录所有文件，也可以是某个文件名\n-r 是递归查找\n-n 是显示行号\n-R 查找所有文件包含子目录\n-i 忽略大小写\n-l 只列出匹配的文件名\n-L 列出不匹配的文件名\n-w 只匹配整个单词，而不是字符串的一部分（匹配 hello，不匹配helloo）\n</code></pre>\n<h2 id=\"排查内存占用\"><a href=\"#排查内存占用\" class=\"headerlink\" title=\"排查内存占用\"></a>排查内存占用</h2><h3 id=\"1-排查磁盘满的节点，执行以下命令：\"><a href=\"#1-排查磁盘满的节点，执行以下命令：\" class=\"headerlink\" title=\"1.排查磁盘满的节点，执行以下命令：\"></a>1.排查磁盘满的节点，执行以下命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">df -h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-进入df-h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\"><a href=\"#2-进入df-h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\" class=\"headerlink\" title=\"2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\"></a>2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">du -sh * | grep G<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\"><a href=\"#3-进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\" class=\"headerlink\" title=\"3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\"></a>3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">du -sh * | grep G 或者 du -sh * | grep T<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-删除查找出来的异常文件命令：\"><a href=\"#4-删除查找出来的异常文件命令：\" class=\"headerlink\" title=\"4.删除查找出来的异常文件命令：\"></a>4.删除查找出来的异常文件命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">rm -rf 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\"><a href=\"#5-如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\" class=\"headerlink\" title=\"5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\"></a>5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">lsof -n | grep delete<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-找出已删除的文件但未释放内存的进程，然后释放进程。\"><a href=\"#6-找出已删除的文件但未释放内存的进程，然后释放进程。\" class=\"headerlink\" title=\"6.找出已删除的文件但未释放内存的进程，然后释放进程。\"></a>6.找出已删除的文件但未释放内存的进程，然后释放进程。</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">kill -9 进程号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"按内容搜索所有文件\"><a href=\"#按内容搜索所有文件\" class=\"headerlink\" title=\"按内容搜索所有文件\"></a>按内容搜索所有文件</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">grep -rn &quot;hello,world!&quot; *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre><code>* 表示当前目录所有文件，也可以是某个文件名\n-r 是递归查找\n-n 是显示行号\n-R 查找所有文件包含子目录\n-i 忽略大小写\n-l 只列出匹配的文件名\n-L 列出不匹配的文件名\n-w 只匹配整个单词，而不是字符串的一部分（匹配 hello，不匹配helloo）\n</code></pre>\n<h2 id=\"排查内存占用\"><a href=\"#排查内存占用\" class=\"headerlink\" title=\"排查内存占用\"></a>排查内存占用</h2><h3 id=\"1-排查磁盘满的节点，执行以下命令：\"><a href=\"#1-排查磁盘满的节点，执行以下命令：\" class=\"headerlink\" title=\"1.排查磁盘满的节点，执行以下命令：\"></a>1.排查磁盘满的节点，执行以下命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">df -h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-进入df-h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\"><a href=\"#2-进入df-h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\" class=\"headerlink\" title=\"2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\"></a>2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">du -sh * | grep G<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\"><a href=\"#3-进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\" class=\"headerlink\" title=\"3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\"></a>3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">du -sh * | grep G 或者 du -sh * | grep T<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-删除查找出来的异常文件命令：\"><a href=\"#4-删除查找出来的异常文件命令：\" class=\"headerlink\" title=\"4.删除查找出来的异常文件命令：\"></a>4.删除查找出来的异常文件命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">rm -rf 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\"><a href=\"#5-如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\" class=\"headerlink\" title=\"5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\"></a>5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">lsof -n | grep delete<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-找出已删除的文件但未释放内存的进程，然后释放进程。\"><a href=\"#6-找出已删除的文件但未释放内存的进程，然后释放进程。\" class=\"headerlink\" title=\"6.找出已删除的文件但未释放内存的进程，然后释放进程。\"></a>6.找出已删除的文件但未释放内存的进程，然后释放进程。</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">kill -9 进程号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"shell脚本","date":"2021-04-25T03:42:36.000Z","cover":"/images/banners/VCG41N1169192820.jpg","_content":"\n\n###  清屏\n```shell\nclear\n```\n### 输出换行，两个\n```shell\necho -e \"\\n\\n\"\n```\n### 休息一秒\n```shell\nsleep 1\n```\n### 输出用户数\n```shell\nwho | awk '{print $1}' | sort | uniq | wc -l\n```\n### 让计算机发出蜂鸣声\n```shell\necho -en \"\\007\"\n```\n\n### 判断文件夹是否存在\n```shell\nif [ ! -d \"./QQ/\" ];\nthen\n  mkdir QQ\nelse\n  echo \"文件夹存在\"\nfi\n```\n### 文件目录追加到文件中\n```shell\nls >> 文件名\n```\n\n### 输出白底黑字的文字\n```shell\necho -e \"\\033[47;30m Now at your service,*Zhu-Zhi-Wu* \\033[0m\"\n```\n\n### 监听键盘输入任意键\n```shell\nread -n 1 -p \"the End…\"\n```\n\n\n\n### 输入三个数，输出最大数\n\n```shell\nprintf \"请输入三个书：\\n\"\nread first_num\nread secend_num\nread thd_num\nif [ $first_num -gt $secend_num ]\nthen\n  max=$first_num\nelse\n  max=$secend_num\nfi\n\nif [ $thd_num -gt $max ]\nthen\n  max=$thd_num\nfi\n\necho \"$max\"\n```","source":"_posts/shell脚本.md","raw":"---\ntitle: shell脚本 \ndate: 2021-04-25 11:42:36\ntags: \n\t- Shell\n\t- Linux\ncategories: \n\t- Shell\n\t\ncover: /images/banners/VCG41N1169192820.jpg\n---\n\n\n###  清屏\n```shell\nclear\n```\n### 输出换行，两个\n```shell\necho -e \"\\n\\n\"\n```\n### 休息一秒\n```shell\nsleep 1\n```\n### 输出用户数\n```shell\nwho | awk '{print $1}' | sort | uniq | wc -l\n```\n### 让计算机发出蜂鸣声\n```shell\necho -en \"\\007\"\n```\n\n### 判断文件夹是否存在\n```shell\nif [ ! -d \"./QQ/\" ];\nthen\n  mkdir QQ\nelse\n  echo \"文件夹存在\"\nfi\n```\n### 文件目录追加到文件中\n```shell\nls >> 文件名\n```\n\n### 输出白底黑字的文字\n```shell\necho -e \"\\033[47;30m Now at your service,*Zhu-Zhi-Wu* \\033[0m\"\n```\n\n### 监听键盘输入任意键\n```shell\nread -n 1 -p \"the End…\"\n```\n\n\n\n### 输入三个数，输出最大数\n\n```shell\nprintf \"请输入三个书：\\n\"\nread first_num\nread secend_num\nread thd_num\nif [ $first_num -gt $secend_num ]\nthen\n  max=$first_num\nelse\n  max=$secend_num\nfi\n\nif [ $thd_num -gt $max ]\nthen\n  max=$thd_num\nfi\n\necho \"$max\"\n```","slug":"shell脚本","published":1,"updated":"2021-05-05T04:17:37.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckob5i908000nk0ufdh1y16ar","content":"<h3 id=\"清屏\"><a href=\"#清屏\" class=\"headerlink\" title=\"清屏\"></a>清屏</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">clear</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"输出换行，两个\"><a href=\"#输出换行，两个\" class=\"headerlink\" title=\"输出换行，两个\"></a>输出换行，两个</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"休息一秒\"><a href=\"#休息一秒\" class=\"headerlink\" title=\"休息一秒\"></a>休息一秒</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"输出用户数\"><a href=\"#输出用户数\" class=\"headerlink\" title=\"输出用户数\"></a>输出用户数</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">who</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print <span class=\"token variable\">$1</span>&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"让计算机发出蜂鸣声\"><a href=\"#让计算机发出蜂鸣声\" class=\"headerlink\" title=\"让计算机发出蜂鸣声\"></a>让计算机发出蜂鸣声</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> -en <span class=\"token string\">\"<span class=\"token entity\" title=\"\\007\">\\007</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"判断文件夹是否存在\"><a href=\"#判断文件夹是否存在\" class=\"headerlink\" title=\"判断文件夹是否存在\"></a>判断文件夹是否存在</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -d <span class=\"token string\">\"./QQ/\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token function\">mkdir</span> QQ\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"文件夹存在\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"文件目录追加到文件中\"><a href=\"#文件目录追加到文件中\" class=\"headerlink\" title=\"文件目录追加到文件中\"></a>文件目录追加到文件中</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">ls</span> <span class=\"token operator\">>></span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"输出白底黑字的文字\"><a href=\"#输出白底黑字的文字\" class=\"headerlink\" title=\"输出白底黑字的文字\"></a>输出白底黑字的文字</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[47;30m Now at your service,*Zhu-Zhi-Wu* <span class=\"token entity\" title=\"\\033\">\\033</span>[0m\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"监听键盘输入任意键\"><a href=\"#监听键盘输入任意键\" class=\"headerlink\" title=\"监听键盘输入任意键\"></a>监听键盘输入任意键</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">read</span> -n <span class=\"token number\">1</span> -p <span class=\"token string\">\"the End…\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"输入三个数，输出最大数\"><a href=\"#输入三个数，输出最大数\" class=\"headerlink\" title=\"输入三个数，输出最大数\"></a>输入三个数，输出最大数</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"请输入三个书：<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>\n<span class=\"token builtin class-name\">read</span> first_num\n<span class=\"token builtin class-name\">read</span> secend_num\n<span class=\"token builtin class-name\">read</span> thd_num\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$first_num</span> -gt <span class=\"token variable\">$secend_num</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token variable\">$first_num</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token variable\">$secend_num</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$thd_num</span> -gt <span class=\"token variable\">$max</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token variable\">$thd_num</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$max</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"清屏\"><a href=\"#清屏\" class=\"headerlink\" title=\"清屏\"></a>清屏</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">clear</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"输出换行，两个\"><a href=\"#输出换行，两个\" class=\"headerlink\" title=\"输出换行，两个\"></a>输出换行，两个</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"休息一秒\"><a href=\"#休息一秒\" class=\"headerlink\" title=\"休息一秒\"></a>休息一秒</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"输出用户数\"><a href=\"#输出用户数\" class=\"headerlink\" title=\"输出用户数\"></a>输出用户数</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">who</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print <span class=\"token variable\">$1</span>&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"让计算机发出蜂鸣声\"><a href=\"#让计算机发出蜂鸣声\" class=\"headerlink\" title=\"让计算机发出蜂鸣声\"></a>让计算机发出蜂鸣声</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> -en <span class=\"token string\">\"<span class=\"token entity\" title=\"\\007\">\\007</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"判断文件夹是否存在\"><a href=\"#判断文件夹是否存在\" class=\"headerlink\" title=\"判断文件夹是否存在\"></a>判断文件夹是否存在</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -d <span class=\"token string\">\"./QQ/\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token function\">mkdir</span> QQ\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"文件夹存在\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"文件目录追加到文件中\"><a href=\"#文件目录追加到文件中\" class=\"headerlink\" title=\"文件目录追加到文件中\"></a>文件目录追加到文件中</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">ls</span> <span class=\"token operator\">>></span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"输出白底黑字的文字\"><a href=\"#输出白底黑字的文字\" class=\"headerlink\" title=\"输出白底黑字的文字\"></a>输出白底黑字的文字</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[47;30m Now at your service,*Zhu-Zhi-Wu* <span class=\"token entity\" title=\"\\033\">\\033</span>[0m\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"监听键盘输入任意键\"><a href=\"#监听键盘输入任意键\" class=\"headerlink\" title=\"监听键盘输入任意键\"></a>监听键盘输入任意键</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">read</span> -n <span class=\"token number\">1</span> -p <span class=\"token string\">\"the End…\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"输入三个数，输出最大数\"><a href=\"#输入三个数，输出最大数\" class=\"headerlink\" title=\"输入三个数，输出最大数\"></a>输入三个数，输出最大数</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"请输入三个书：<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>\n<span class=\"token builtin class-name\">read</span> first_num\n<span class=\"token builtin class-name\">read</span> secend_num\n<span class=\"token builtin class-name\">read</span> thd_num\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$first_num</span> -gt <span class=\"token variable\">$secend_num</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token variable\">$first_num</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token variable\">$secend_num</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$thd_num</span> -gt <span class=\"token variable\">$max</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token variable\">$thd_num</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$max</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"vim操作宝典","date":"2021-05-01T12:41:12.000Z","cover":"/images/banners/VCG21gic18180994.jpg","_content":"\n### 在行尾插入\n```shell\n视图模式：a 键\n```\n\n### Vim显示文件已经打开\n非正常退出，就会产生.swp文件，可以把他删除\n```shell\nrm -rf .文件名.swp\t\t\n```\n\n### 复制多行\n\n**数字键加yy**\n\n例：复制4行\n\n`4yy`\n\n### 在行上方或者下方插入\n\n```shell\n两个都是字母\no：在下方\nO：在上方\n```\n\n### 合并两行\n\n```shell\n视图模式：J\n```\n\n### 多行注释\n\n```shell\n    （1）首先按键盘上的ESC进入命令行模式\n    （2）再按Ctrl+V进入VISUAL BLOCK模式\n    （3）利用上下左右键调整需要注释多少行以及行的宽度\n    （4）再按Shift+i或s进入插入模式\n    （5）输入代表注释的符号，比如#\n    （6）再次按ESC键，这时就可完成多行注释（可能需要等上一会，不要着急）\n```\n\n\n### 去注释\n\n```shell\n    （1）:起始行号,结束行号s/^/注释符/g\n```\n### 打开目录\n\n```shell\n    nt\n```\n\n### 纵向分屏，复制当前窗口\n```shell\n    : vsp\n```\n### 在当前窗口切换编辑文件\n\n```shell\n    : e 文件路径\n```\n\n### 粘贴历史行\n```shell\n    \"3p  （中间数字1到9）\n```","source":"_posts/vim操作宝典.md","raw":"---\ntitle: vim操作宝典\ndate: 2021-05-01 20:41:12\ntags: \n\t- Vim\n\t- Linux\ncategories: \n\t- Vim\ncover: /images/banners/VCG21gic18180994.jpg\n---\n\n### 在行尾插入\n```shell\n视图模式：a 键\n```\n\n### Vim显示文件已经打开\n非正常退出，就会产生.swp文件，可以把他删除\n```shell\nrm -rf .文件名.swp\t\t\n```\n\n### 复制多行\n\n**数字键加yy**\n\n例：复制4行\n\n`4yy`\n\n### 在行上方或者下方插入\n\n```shell\n两个都是字母\no：在下方\nO：在上方\n```\n\n### 合并两行\n\n```shell\n视图模式：J\n```\n\n### 多行注释\n\n```shell\n    （1）首先按键盘上的ESC进入命令行模式\n    （2）再按Ctrl+V进入VISUAL BLOCK模式\n    （3）利用上下左右键调整需要注释多少行以及行的宽度\n    （4）再按Shift+i或s进入插入模式\n    （5）输入代表注释的符号，比如#\n    （6）再次按ESC键，这时就可完成多行注释（可能需要等上一会，不要着急）\n```\n\n\n### 去注释\n\n```shell\n    （1）:起始行号,结束行号s/^/注释符/g\n```\n### 打开目录\n\n```shell\n    nt\n```\n\n### 纵向分屏，复制当前窗口\n```shell\n    : vsp\n```\n### 在当前窗口切换编辑文件\n\n```shell\n    : e 文件路径\n```\n\n### 粘贴历史行\n```shell\n    \"3p  （中间数字1到9）\n```","slug":"vim操作宝典","published":1,"updated":"2021-05-05T07:53:02.058Z","_id":"ckob5i909000ok0uf2z0d9ec8","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"在行尾插入\"><a href=\"#在行尾插入\" class=\"headerlink\" title=\"在行尾插入\"></a>在行尾插入</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">视图模式：a 键<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Vim显示文件已经打开\"><a href=\"#Vim显示文件已经打开\" class=\"headerlink\" title=\"Vim显示文件已经打开\"></a>Vim显示文件已经打开</h3><p>非正常退出，就会产生.swp文件，可以把他删除</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">rm</span> -rf .文件名.swp\t\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"复制多行\"><a href=\"#复制多行\" class=\"headerlink\" title=\"复制多行\"></a>复制多行</h3><p><strong>数字键加yy</strong></p>\n<p>例：复制4行</p>\n<p><code>4yy</code></p>\n<h3 id=\"在行上方或者下方插入\"><a href=\"#在行上方或者下方插入\" class=\"headerlink\" title=\"在行上方或者下方插入\"></a>在行上方或者下方插入</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">两个都是字母\no：在下方\nO：在上方<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"合并两行\"><a href=\"#合并两行\" class=\"headerlink\" title=\"合并两行\"></a>合并两行</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">视图模式：J<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"多行注释\"><a href=\"#多行注释\" class=\"headerlink\" title=\"多行注释\"></a>多行注释</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">（1）首先按键盘上的ESC进入命令行模式\n（2）再按Ctrl+V进入VISUAL BLOCK模式\n（3）利用上下左右键调整需要注释多少行以及行的宽度\n（4）再按Shift+i或s进入插入模式\n（5）输入代表注释的符号，比如<span class=\"token comment\">#</span>\n（6）再次按ESC键，这时就可完成多行注释（可能需要等上一会，不要着急）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"去注释\"><a href=\"#去注释\" class=\"headerlink\" title=\"去注释\"></a>去注释</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">（1）:起始行号,结束行号s/^/注释符/g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"打开目录\"><a href=\"#打开目录\" class=\"headerlink\" title=\"打开目录\"></a>打开目录</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">nt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"纵向分屏，复制当前窗口\"><a href=\"#纵向分屏，复制当前窗口\" class=\"headerlink\" title=\"纵向分屏，复制当前窗口\"></a>纵向分屏，复制当前窗口</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">:</span> vsp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"在当前窗口切换编辑文件\"><a href=\"#在当前窗口切换编辑文件\" class=\"headerlink\" title=\"在当前窗口切换编辑文件\"></a>在当前窗口切换编辑文件</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">:</span> e 文件路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"粘贴历史行\"><a href=\"#粘贴历史行\" class=\"headerlink\" title=\"粘贴历史行\"></a>粘贴历史行</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">\"3p  （中间数字1到9）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"在行尾插入\"><a href=\"#在行尾插入\" class=\"headerlink\" title=\"在行尾插入\"></a>在行尾插入</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">视图模式：a 键<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Vim显示文件已经打开\"><a href=\"#Vim显示文件已经打开\" class=\"headerlink\" title=\"Vim显示文件已经打开\"></a>Vim显示文件已经打开</h3><p>非正常退出，就会产生.swp文件，可以把他删除</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">rm</span> -rf .文件名.swp\t\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"复制多行\"><a href=\"#复制多行\" class=\"headerlink\" title=\"复制多行\"></a>复制多行</h3><p><strong>数字键加yy</strong></p>\n<p>例：复制4行</p>\n<p><code>4yy</code></p>\n<h3 id=\"在行上方或者下方插入\"><a href=\"#在行上方或者下方插入\" class=\"headerlink\" title=\"在行上方或者下方插入\"></a>在行上方或者下方插入</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">两个都是字母\no：在下方\nO：在上方<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"合并两行\"><a href=\"#合并两行\" class=\"headerlink\" title=\"合并两行\"></a>合并两行</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">视图模式：J<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"多行注释\"><a href=\"#多行注释\" class=\"headerlink\" title=\"多行注释\"></a>多行注释</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">（1）首先按键盘上的ESC进入命令行模式\n（2）再按Ctrl+V进入VISUAL BLOCK模式\n（3）利用上下左右键调整需要注释多少行以及行的宽度\n（4）再按Shift+i或s进入插入模式\n（5）输入代表注释的符号，比如<span class=\"token comment\">#</span>\n（6）再次按ESC键，这时就可完成多行注释（可能需要等上一会，不要着急）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"去注释\"><a href=\"#去注释\" class=\"headerlink\" title=\"去注释\"></a>去注释</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">（1）:起始行号,结束行号s/^/注释符/g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"打开目录\"><a href=\"#打开目录\" class=\"headerlink\" title=\"打开目录\"></a>打开目录</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">nt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"纵向分屏，复制当前窗口\"><a href=\"#纵向分屏，复制当前窗口\" class=\"headerlink\" title=\"纵向分屏，复制当前窗口\"></a>纵向分屏，复制当前窗口</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">:</span> vsp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"在当前窗口切换编辑文件\"><a href=\"#在当前窗口切换编辑文件\" class=\"headerlink\" title=\"在当前窗口切换编辑文件\"></a>在当前窗口切换编辑文件</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">:</span> e 文件路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"粘贴历史行\"><a href=\"#粘贴历史行\" class=\"headerlink\" title=\"粘贴历史行\"></a>粘贴历史行</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">\"3p  （中间数字1到9）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"两数之和 leetCode 1","date":"2021-05-03T11:55:20.000Z","cover":"/images/banners/VCG41154059609.jpg","_content":"题目：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案\n<!--more-->\n\n示例 1：\n\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n示例 2：\n\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n示例 3：\n\n输入：nums = [3,3], target = 6\n输出：[0,1]\n\n## 解法1  Hash表解法\n思路：\n1、hash表存入的数据key:nums , value :对应下标\n使用目标值target减去数组中的每一个数，如果得到的值，不在hash表中，继续循环，如果存在，那说明是要找的数，直接返回两个下标。\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        hash_table = dict()\n        for i,num in enumerate(nums):\n            if target - num in hash_table:\n                return [hash_table[target - num], i]\n            hash_table[num] = i\n```\n\n\n\n","source":"_posts/两数之和.md","raw":"---\ntitle: 两数之和 leetCode 1\ndate: 2021-05-03 19:55:20\ntags: \n\t- 算法\n\t- Python\n\t- Hash\ncategories: 算法\ncover: /images/banners/VCG41154059609.jpg\n---\n题目：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案\n<!--more-->\n\n示例 1：\n\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n示例 2：\n\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n示例 3：\n\n输入：nums = [3,3], target = 6\n输出：[0,1]\n\n## 解法1  Hash表解法\n思路：\n1、hash表存入的数据key:nums , value :对应下标\n使用目标值target减去数组中的每一个数，如果得到的值，不在hash表中，继续循环，如果存在，那说明是要找的数，直接返回两个下标。\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        hash_table = dict()\n        for i,num in enumerate(nums):\n            if target - num in hash_table:\n                return [hash_table[target - num], i]\n            hash_table[num] = i\n```\n\n\n\n","slug":"两数之和","published":1,"updated":"2021-05-05T07:45:28.392Z","_id":"ckob5i90a000rk0uf0zv2c8ns","comments":1,"layout":"post","photos":[],"link":"","content":"<p>题目：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案</p>\n<span id=\"more\"></span>\n\n<p>示例 1：</p>\n<p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br>示例 2：</p>\n<p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br>示例 3：</p>\n<p>输入：nums = [3,3], target = 6<br>输出：[0,1]</p>\n<h2 id=\"解法1-Hash表解法\"><a href=\"#解法1-Hash表解法\" class=\"headerlink\" title=\"解法1  Hash表解法\"></a>解法1  Hash表解法</h2><p>思路：<br>1、hash表存入的数据key:nums , value :对应下标<br>使用目标值target减去数组中的每一个数，如果得到的值，不在hash表中，继续循环，如果存在，那说明是要找的数，直接返回两个下标。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        hash_table <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>num <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> target <span class=\"token operator\">-</span> num <span class=\"token keyword\">in</span> hash_table<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>hash_table<span class=\"token punctuation\">[</span>target <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span>\n            hash_table<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","site":{"data":{}},"excerpt":"<p>题目：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案</p>","more":"<p>示例 1：</p>\n<p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br>示例 2：</p>\n<p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br>示例 3：</p>\n<p>输入：nums = [3,3], target = 6<br>输出：[0,1]</p>\n<h2 id=\"解法1-Hash表解法\"><a href=\"#解法1-Hash表解法\" class=\"headerlink\" title=\"解法1  Hash表解法\"></a>解法1  Hash表解法</h2><p>思路：<br>1、hash表存入的数据key:nums , value :对应下标<br>使用目标值target减去数组中的每一个数，如果得到的值，不在hash表中，继续循环，如果存在，那说明是要找的数，直接返回两个下标。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        hash_table <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>num <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> target <span class=\"token operator\">-</span> num <span class=\"token keyword\">in</span> hash_table<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>hash_table<span class=\"token punctuation\">[</span>target <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span>\n            hash_table<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"砖墙问题 leetCode 554","date":"2021-05-03T06:22:29.000Z","cover":"/images/banners/VCG41N1070447322.jpg","_content":"题目：你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。\n\n你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。\n\n给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 \n\n\n![](/post/砖墙问题//querstion.png)\n\n输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n输出：2\n示例 2：\n\n输入：wall = [[1],[1],[1]]\n输出：3\n<!--more-->\n\n### 1、题目分析\n* 题目要求穿过的砖块数量最少，等效于通过他的间隙最多\n* 将所有行总数，减去间隙，就是穿过最少的砖块数\n* 记住，每行的间隙位置，就是砖的左侧宽度和\n\n![](/post/砖墙问题/wall.png)\n\n* 第 1 行的间隙有 [1,3,5]\n* 第 2 行的间隙有 [3,4]\n* 第 3 行的间隙有 [1,4]\n* 第 4 行的间隙有 [2]\n* 第 5 行的间隙有 [3,4]\n* 第 6 行的间隙有 [1,4,5]\n\n1. 上述的每行的每个值，代表间隙位置，单行的间隙位置不会相同出\n1. 统计间隙数，最后用总行数减去出现次数，即得到【最少穿过砖块数】\n\n## 解法1：使用hash表  52ms\n\n```python\nclass Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        hashtable = dict()\n        for w in wall:\n            # 记录每一块砖缝，出现次数\n            ans = 0   # 每一行墙，墙缝 \n            # 最后一块砖的墙缝不算, [:-1]代表只取到倒数每二个数\n            for num in w[:-1]:\n                # 统计墙缝\n                ans += num\n                hashtable[ans] = hashtable.get(ans, 0) + 1\n        # 判断，所有行只有一块砖，就直接穿过所有\n        if not hashtable:\n            return len(wall)\n        return len(wall) - max(hashtable.values())\n    \n```\n\n\n```","source":"_posts/砖墙问题.md","raw":"---\ntitle: 砖墙问题 leetCode 554 \ndate: 2021-05-03 14:22:29\ntags: \n\t- 算法\n\t- Python\n\t- Hash\ncategories: 算法\ncover: /images/banners/VCG41N1070447322.jpg\n---\n题目：你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。\n\n你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。\n\n给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 \n\n\n![](/post/砖墙问题//querstion.png)\n\n输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n输出：2\n示例 2：\n\n输入：wall = [[1],[1],[1]]\n输出：3\n<!--more-->\n\n### 1、题目分析\n* 题目要求穿过的砖块数量最少，等效于通过他的间隙最多\n* 将所有行总数，减去间隙，就是穿过最少的砖块数\n* 记住，每行的间隙位置，就是砖的左侧宽度和\n\n![](/post/砖墙问题/wall.png)\n\n* 第 1 行的间隙有 [1,3,5]\n* 第 2 行的间隙有 [3,4]\n* 第 3 行的间隙有 [1,4]\n* 第 4 行的间隙有 [2]\n* 第 5 行的间隙有 [3,4]\n* 第 6 行的间隙有 [1,4,5]\n\n1. 上述的每行的每个值，代表间隙位置，单行的间隙位置不会相同出\n1. 统计间隙数，最后用总行数减去出现次数，即得到【最少穿过砖块数】\n\n## 解法1：使用hash表  52ms\n\n```python\nclass Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        hashtable = dict()\n        for w in wall:\n            # 记录每一块砖缝，出现次数\n            ans = 0   # 每一行墙，墙缝 \n            # 最后一块砖的墙缝不算, [:-1]代表只取到倒数每二个数\n            for num in w[:-1]:\n                # 统计墙缝\n                ans += num\n                hashtable[ans] = hashtable.get(ans, 0) + 1\n        # 判断，所有行只有一块砖，就直接穿过所有\n        if not hashtable:\n            return len(wall)\n        return len(wall) - max(hashtable.values())\n    \n```\n\n\n```","slug":"砖墙问题","published":1,"updated":"2021-05-05T07:00:29.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckob5i90b000sk0ufeah598x1","content":"<p>题目：你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。</p>\n<p>你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。</p>\n<p>给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 </p>\n<p><img src=\"/post/%E7%A0%96%E5%A2%99%E9%97%AE%E9%A2%98/querstion.png\"></p>\n<p>输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]<br>输出：2<br>示例 2：</p>\n<p>输入：wall = [[1],[1],[1]]<br>输出：3</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1、题目分析\"><a href=\"#1、题目分析\" class=\"headerlink\" title=\"1、题目分析\"></a>1、题目分析</h3><ul>\n<li>题目要求穿过的砖块数量最少，等效于通过他的间隙最多</li>\n<li>将所有行总数，减去间隙，就是穿过最少的砖块数</li>\n<li>记住，每行的间隙位置，就是砖的左侧宽度和</li>\n</ul>\n<p><img src=\"/post/%E7%A0%96%E5%A2%99%E9%97%AE%E9%A2%98/wall.png\"></p>\n<ul>\n<li>第 1 行的间隙有 [1,3,5]</li>\n<li>第 2 行的间隙有 [3,4]</li>\n<li>第 3 行的间隙有 [1,4]</li>\n<li>第 4 行的间隙有 [2]</li>\n<li>第 5 行的间隙有 [3,4]</li>\n<li>第 6 行的间隙有 [1,4,5]</li>\n</ul>\n<ol>\n<li>上述的每行的每个值，代表间隙位置，单行的间隙位置不会相同出</li>\n<li>统计间隙数，最后用总行数减去出现次数，即得到【最少穿过砖块数】</li>\n</ol>\n<h2 id=\"解法1：使用hash表-52ms\"><a href=\"#解法1：使用hash表-52ms\" class=\"headerlink\" title=\"解法1：使用hash表  52ms\"></a>解法1：使用hash表  52ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">leastBricks</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> wall<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        hashtable <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> wall<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 记录每一块砖缝，出现次数</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span>   <span class=\"token comment\"># 每一行墙，墙缝 </span>\n            <span class=\"token comment\"># 最后一块砖的墙缝不算, [:-1]代表只取到倒数每二个数</span>\n            <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> w<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 统计墙缝</span>\n                ans <span class=\"token operator\">+=</span> num\n                hashtable<span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hashtable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># 判断，所有行只有一块砖，就直接穿过所有</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> hashtable<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>wall<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>wall<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>```</p>\n","site":{"data":{}},"excerpt":"<p>题目：你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。</p>\n<p>你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。</p>\n<p>给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 </p>\n<p><img src=\"/post/%E7%A0%96%E5%A2%99%E9%97%AE%E9%A2%98/querstion.png\"></p>\n<p>输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]<br>输出：2<br>示例 2：</p>\n<p>输入：wall = [[1],[1],[1]]<br>输出：3</p>","more":"<h3 id=\"1、题目分析\"><a href=\"#1、题目分析\" class=\"headerlink\" title=\"1、题目分析\"></a>1、题目分析</h3><ul>\n<li>题目要求穿过的砖块数量最少，等效于通过他的间隙最多</li>\n<li>将所有行总数，减去间隙，就是穿过最少的砖块数</li>\n<li>记住，每行的间隙位置，就是砖的左侧宽度和</li>\n</ul>\n<p><img src=\"/post/%E7%A0%96%E5%A2%99%E9%97%AE%E9%A2%98/wall.png\"></p>\n<ul>\n<li>第 1 行的间隙有 [1,3,5]</li>\n<li>第 2 行的间隙有 [3,4]</li>\n<li>第 3 行的间隙有 [1,4]</li>\n<li>第 4 行的间隙有 [2]</li>\n<li>第 5 行的间隙有 [3,4]</li>\n<li>第 6 行的间隙有 [1,4,5]</li>\n</ul>\n<ol>\n<li>上述的每行的每个值，代表间隙位置，单行的间隙位置不会相同出</li>\n<li>统计间隙数，最后用总行数减去出现次数，即得到【最少穿过砖块数】</li>\n</ol>\n<h2 id=\"解法1：使用hash表-52ms\"><a href=\"#解法1：使用hash表-52ms\" class=\"headerlink\" title=\"解法1：使用hash表  52ms\"></a>解法1：使用hash表  52ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">leastBricks</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> wall<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        hashtable <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> wall<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 记录每一块砖缝，出现次数</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span>   <span class=\"token comment\"># 每一行墙，墙缝 </span>\n            <span class=\"token comment\"># 最后一块砖的墙缝不算, [:-1]代表只取到倒数每二个数</span>\n            <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> w<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 统计墙缝</span>\n                ans <span class=\"token operator\">+=</span> num\n                hashtable<span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hashtable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># 判断，所有行只有一块砖，就直接穿过所有</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> hashtable<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>wall<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>wall<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>```</p>"},{"title":"136只出现一次的数字 LeetCode","date":"2021-05-05T12:27:25.000Z","cover":"/images/banners/VCG41186545379.jpg","_content":"\n**题目：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。**\n\n说明：\n\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n\n示例 1:\n\n输入: [2,2,1]\n输出: 1\n示例 2:\n\n输入: [4,1,2,1,2]\n输出: 4\n\n**主要学习解法2**\n\n## 一、解法1，使用set()\n**set()** 函数创建一个**无序不重复**元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等\n\n代码比较简单，不做过多的解释，看看就懂。\n\n```python\n    def singleNumber(self, nums: List[int]) -> int:\n        num_set = set()\n        for num in nums:\n            if num in num_set:\n                num_set.remove(num)\n            else:\n                num_set.add(num)\n        return list(num_set)[0]\n\n```\n\n\n\n## 二、解法2，使用异或运算\n⊕: 异或符号\n\n答案是使用位运算。对于这道题，可使用异或运算 ⊕。异或运算有以下三个性质。\n\n1. 任何数和 0 做异或运算，结果仍然是原来的数，即 a ⊕ 0=a\n\n1. 任何数和其自身做异或运算，结果是 0，即 a  ⊕ a=0\n\n1. 异或运算满足交换律和结合律，即 a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b（简单来说，就是不管异或的顺序如何，最终结果都是一样的，本解法，关键就是利用这一点）\n\n  **交换律和结合律详解**\n\t比如:\n\n```\tpython\na=1,b=2,c=2,d=4,e=4\na ^ d ^ c ^ b ^ e == b ^ c ^ d ^ e ^ a  == 1\t\n# 不管顺序如何,如果都是一样,结果都是一样\n```\n\n**博主思考：**\n1. 写完这个题的时候,我就在床上思考, 如果a⊕a = 0,那么a⊕a⊕a呢,那他就不是0了,怎么可以求得解呢?\n\n答:就在这时,我去重新看了一眼题目,题目表明了,每个数都只出现**两次**,只有一个数出现了**一次**,审题得仔细.\n\n**也可以把这个思考当做一个新题目去做,在一堆不确定出现次数的数中,找出只出现了一次的数,又或者是在一堆数字中,找出现次数最少的数字**\n\n```python\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        re_num = 0\n        for num in nums:\n            re_num = num ^ re_num\n        return re_num\n```\n\n\n\n\n\n","source":"_posts/136只出现一次的数字.md","raw":"---\ntitle: 136只出现一次的数字 LeetCode\ndate: 2021-05-05 20:27:25\ntags:\n\t- 算法\n\t- Python\n\t- 异或\ncategories: 算法\ncover: /images/banners/VCG41186545379.jpg\n---\n\n**题目：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。**\n\n说明：\n\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n\n示例 1:\n\n输入: [2,2,1]\n输出: 1\n示例 2:\n\n输入: [4,1,2,1,2]\n输出: 4\n\n**主要学习解法2**\n\n## 一、解法1，使用set()\n**set()** 函数创建一个**无序不重复**元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等\n\n代码比较简单，不做过多的解释，看看就懂。\n\n```python\n    def singleNumber(self, nums: List[int]) -> int:\n        num_set = set()\n        for num in nums:\n            if num in num_set:\n                num_set.remove(num)\n            else:\n                num_set.add(num)\n        return list(num_set)[0]\n\n```\n\n\n\n## 二、解法2，使用异或运算\n⊕: 异或符号\n\n答案是使用位运算。对于这道题，可使用异或运算 ⊕。异或运算有以下三个性质。\n\n1. 任何数和 0 做异或运算，结果仍然是原来的数，即 a ⊕ 0=a\n\n1. 任何数和其自身做异或运算，结果是 0，即 a  ⊕ a=0\n\n1. 异或运算满足交换律和结合律，即 a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b（简单来说，就是不管异或的顺序如何，最终结果都是一样的，本解法，关键就是利用这一点）\n\n  **交换律和结合律详解**\n\t比如:\n\n```\tpython\na=1,b=2,c=2,d=4,e=4\na ^ d ^ c ^ b ^ e == b ^ c ^ d ^ e ^ a  == 1\t\n# 不管顺序如何,如果都是一样,结果都是一样\n```\n\n**博主思考：**\n1. 写完这个题的时候,我就在床上思考, 如果a⊕a = 0,那么a⊕a⊕a呢,那他就不是0了,怎么可以求得解呢?\n\n答:就在这时,我去重新看了一眼题目,题目表明了,每个数都只出现**两次**,只有一个数出现了**一次**,审题得仔细.\n\n**也可以把这个思考当做一个新题目去做,在一堆不确定出现次数的数中,找出只出现了一次的数,又或者是在一堆数字中,找出现次数最少的数字**\n\n```python\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        re_num = 0\n        for num in nums:\n            re_num = num ^ re_num\n        return re_num\n```\n\n\n\n\n\n","slug":"136只出现一次的数字","published":1,"updated":"2021-05-06T13:35:06.030Z","_id":"ckobhx9qs000028ufbpu9cs2v","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>题目：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</strong></p>\n<p>说明：</p>\n<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>\n<p>示例 1:</p>\n<p>输入: [2,2,1]<br>输出: 1<br>示例 2:</p>\n<p>输入: [4,1,2,1,2]<br>输出: 4</p>\n<p><strong>主要学习解法2</strong></p>\n<h2 id=\"一、解法1，使用set\"><a href=\"#一、解法1，使用set\" class=\"headerlink\" title=\"一、解法1，使用set()\"></a>一、解法1，使用set()</h2><p><strong>set()</strong> 函数创建一个<strong>无序不重复</strong>元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等</p>\n<p>代码比较简单，不做过多的解释，看看就懂。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    num_set <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token keyword\">in</span> num_set<span class=\"token punctuation\">:</span>\n            num_set<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            num_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>num_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"二、解法2，使用异或运算\"><a href=\"#二、解法2，使用异或运算\" class=\"headerlink\" title=\"二、解法2，使用异或运算\"></a>二、解法2，使用异或运算</h2><p>⊕: 异或符号</p>\n<p>答案是使用位运算。对于这道题，可使用异或运算 ⊕。异或运算有以下三个性质。</p>\n<ol>\n<li><p>任何数和 0 做异或运算，结果仍然是原来的数，即 a ⊕ 0=a</p>\n</li>\n<li><p>任何数和其自身做异或运算，结果是 0，即 a  ⊕ a=0</p>\n</li>\n<li><p>异或运算满足交换律和结合律，即 a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b（简单来说，就是不管异或的顺序如何，最终结果都是一样的，本解法，关键就是利用这一点）</p>\n</li>\n</ol>\n<p>  <strong>交换律和结合律详解</strong><br>    比如:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>e<span class=\"token operator\">=</span><span class=\"token number\">4</span>\na <span class=\"token operator\">^</span> d <span class=\"token operator\">^</span> c <span class=\"token operator\">^</span> b <span class=\"token operator\">^</span> e <span class=\"token operator\">==</span> b <span class=\"token operator\">^</span> c <span class=\"token operator\">^</span> d <span class=\"token operator\">^</span> e <span class=\"token operator\">^</span> a  <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\t\n<span class=\"token comment\"># 不管顺序如何,如果都是一样,结果都是一样</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>博主思考：</strong></p>\n<ol>\n<li>写完这个题的时候,我就在床上思考, 如果a⊕a = 0,那么a⊕a⊕a呢,那他就不是0了,怎么可以求得解呢?</li>\n</ol>\n<p>答:就在这时,我去重新看了一眼题目,题目表明了,每个数都只出现<strong>两次</strong>,只有一个数出现了<strong>一次</strong>,审题得仔细.</p>\n<p><strong>也可以把这个思考当做一个新题目去做,在一堆不确定出现次数的数中,找出只出现了一次的数,又或者是在一堆数字中,找出现次数最少的数字</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        re_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            re_num <span class=\"token operator\">=</span> num <span class=\"token operator\">^</span> re_num\n        <span class=\"token keyword\">return</span> re_num<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>题目：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</strong></p>\n<p>说明：</p>\n<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>\n<p>示例 1:</p>\n<p>输入: [2,2,1]<br>输出: 1<br>示例 2:</p>\n<p>输入: [4,1,2,1,2]<br>输出: 4</p>\n<p><strong>主要学习解法2</strong></p>\n<h2 id=\"一、解法1，使用set\"><a href=\"#一、解法1，使用set\" class=\"headerlink\" title=\"一、解法1，使用set()\"></a>一、解法1，使用set()</h2><p><strong>set()</strong> 函数创建一个<strong>无序不重复</strong>元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等</p>\n<p>代码比较简单，不做过多的解释，看看就懂。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    num_set <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token keyword\">in</span> num_set<span class=\"token punctuation\">:</span>\n            num_set<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            num_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>num_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"二、解法2，使用异或运算\"><a href=\"#二、解法2，使用异或运算\" class=\"headerlink\" title=\"二、解法2，使用异或运算\"></a>二、解法2，使用异或运算</h2><p>⊕: 异或符号</p>\n<p>答案是使用位运算。对于这道题，可使用异或运算 ⊕。异或运算有以下三个性质。</p>\n<ol>\n<li><p>任何数和 0 做异或运算，结果仍然是原来的数，即 a ⊕ 0=a</p>\n</li>\n<li><p>任何数和其自身做异或运算，结果是 0，即 a  ⊕ a=0</p>\n</li>\n<li><p>异或运算满足交换律和结合律，即 a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b（简单来说，就是不管异或的顺序如何，最终结果都是一样的，本解法，关键就是利用这一点）</p>\n</li>\n</ol>\n<p>  <strong>交换律和结合律详解</strong><br>    比如:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>e<span class=\"token operator\">=</span><span class=\"token number\">4</span>\na <span class=\"token operator\">^</span> d <span class=\"token operator\">^</span> c <span class=\"token operator\">^</span> b <span class=\"token operator\">^</span> e <span class=\"token operator\">==</span> b <span class=\"token operator\">^</span> c <span class=\"token operator\">^</span> d <span class=\"token operator\">^</span> e <span class=\"token operator\">^</span> a  <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\t\n<span class=\"token comment\"># 不管顺序如何,如果都是一样,结果都是一样</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>博主思考：</strong></p>\n<ol>\n<li>写完这个题的时候,我就在床上思考, 如果a⊕a = 0,那么a⊕a⊕a呢,那他就不是0了,怎么可以求得解呢?</li>\n</ol>\n<p>答:就在这时,我去重新看了一眼题目,题目表明了,每个数都只出现<strong>两次</strong>,只有一个数出现了<strong>一次</strong>,审题得仔细.</p>\n<p><strong>也可以把这个思考当做一个新题目去做,在一堆不确定出现次数的数中,找出只出现了一次的数,又或者是在一堆数字中,找出现次数最少的数字</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        re_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            re_num <span class=\"token operator\">=</span> num <span class=\"token operator\">^</span> re_num\n        <span class=\"token keyword\">return</span> re_num<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n"},{"title":"237删除链表中的节点 leetCode","date":"2021-05-05T12:03:58.000Z","cover":"/images/banners/VCG41N1126025444.jpg","_content":"\n### 题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。\n\n这个题一开始，我也有点懞，被这个题目弄傻了。后面看了下题解，豁然开朗。\n\n**主要思路**\n\n- 将下一个节点的值赋值给当前节点\n\n- 然后把下一个节点删除即可（删除方法：将当前节点next指向下一个节点的next）\n\n```python\nclass Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        node.val = node.next.val\n        node.next = node.next.next\n```","source":"_posts/237删除链表中的节点.md","raw":"---\ntitle: 237删除链表中的节点 leetCode\ndate: 2021-05-05 20:03:58\ntags:\n\t- 算法\n\t- Python\n\t- 链表\ncategories: 算法\ncover: /images/banners/VCG41N1126025444.jpg\n---\n\n### 题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。\n\n这个题一开始，我也有点懞，被这个题目弄傻了。后面看了下题解，豁然开朗。\n\n**主要思路**\n\n- 将下一个节点的值赋值给当前节点\n\n- 然后把下一个节点删除即可（删除方法：将当前节点next指向下一个节点的next）\n\n```python\nclass Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        node.val = node.next.val\n        node.next = node.next.next\n```","slug":"237删除链表中的节点","published":1,"updated":"2021-05-06T08:08:32.208Z","_id":"ckobhx9r0000628uf2n8g5hmq","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为-要被删除的节点-。\"><a href=\"#题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为-要被删除的节点-。\" class=\"headerlink\" title=\"题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。\"></a>题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。</h3><p>这个题一开始，我也有点懞，被这个题目弄傻了。后面看了下题解，豁然开朗。</p>\n<p><strong>主要思路</strong></p>\n<ul>\n<li><p>将下一个节点的值赋值给当前节点</p>\n</li>\n<li><p>然后把下一个节点删除即可（删除方法：将当前节点next指向下一个节点的next）</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">deleteNode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"</span>\n        node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>val\n        node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为-要被删除的节点-。\"><a href=\"#题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为-要被删除的节点-。\" class=\"headerlink\" title=\"题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。\"></a>题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。</h3><p>这个题一开始，我也有点懞，被这个题目弄傻了。后面看了下题解，豁然开朗。</p>\n<p><strong>主要思路</strong></p>\n<ul>\n<li><p>将下一个节点的值赋值给当前节点</p>\n</li>\n<li><p>然后把下一个节点删除即可（删除方法：将当前节点next指向下一个节点的next）</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">deleteNode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"</span>\n        node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>val\n        node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"1734解码异或的排列","date":"2021-05-12T04:29:27.000Z","cover":"/images/banners/VCG41N1126025444.jpg","_content":"\n### 给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 encoded = [2,1] 。给你 encoded 数组，请你返回原始数组 perm 。题目保证答案存在且唯一。\n\n**示例 1：**\n输入：encoded = [3,1]\n输出：[1,2,3]\n解释：如果 perm = [1,2,3] ，那么 encoded = [1 XOR 2,2 XOR 3] = [3,1]\n\n**示例 2：**\n输入：encoded = [6,5,4,6]\n输出：[2,4,1,5,3]\n\n**此题是leetcode 1720的升级版**\n\n## 一、解法一：通过数据解题思路（异或运算）\n\n### 1.1 思路\n\n我在LeetCode上面看题解的时候，看得好吃力，完全没看懂，然后跟着思路用纸写一遍，突然就懂了。话不多说，开始：\n\n**我们知道异或运算有如下性质（不懂的话，可以查一下，不多做解释了）：**\n\n1. 相同数值异或，结果为 0\n2. 任意数值与 0 进行异或，结果为数值本身\n3. 异或本身满足交换律\n\n**⊕：代表异或**\n\n**本题需要我们求perm（需求一步一步往下看，不然会不懂）**\n\n1. 根据题目意思 ，假设 perm = [a, b, c, d, e]，那么 encoded = [ab, bc, cd, de]\n\n2. 先求出perm[0]  ,    perm[0] =   (perm[0] ⊕ perm[1] ... ⊕ perm[n] )  ⊕    (perm[1] ...⊕ perm[n] )   ,根据相同值异或为0性质，异或结果就是perm[0]，看懂了再往下走\n\n   * 此时我们只需要求出**(perm[0] ⊕ perm[1] ... ⊕ perm[n] )** 和**(perm[1] ...⊕ perm[n] )**的值，他俩异或的结果就可以求出**perm[0]**\n\n3. 求第2步的两个值：\n\n   * **(perm[0] ⊕ perm[1] ... ⊕ perm[n] )**，题目已经告诉我们的，他是前 n 个正整数的排列，假如n=5 ,他结果就是**1⊕ 2⊕ 3⊕ 4⊕ 5**,\n   * **(perm[1] ...⊕ perm[n] )**,这个值看如下举例：\n\n   假设 perm = [a, b, c, d, e]，那么 encoded = [ab, bc, cd, de]\n\n   **perm[1] ⊕ perm[2] ...⊕ perm[n]  =  encoded[1] ⊕ encoded[3]   (步长为2)**\n\n   * encoded都是题目给出来的值 ，是不是很好求\n   * 这样你就可以结合第二步，求出**perm[0]**的值\n\n4. 题目给出**encoded[i] = perm[i] ⊕ perm[i + 1]**    可以理解为：**encoded[i] = perm[i] ⊕ perm[i - 1]**    一样的意思， 只是我把下标 **i**理解为当前这个数和当前数的前一个\n\n\t* ​\tencoded[0] = perm[0] ⊕ perm[1]  两边同时异或 perm[1],  根据相同为0，得出如下\n\t* ​    perm[1] = encoded[0] ⊕ perm[0]\n\t* ​    perm[i] = encoded[i] ⊕ perm[i - 1]\n\n\n\n**最后再去看代码，就很清晰了，总结的不好的，欢迎留言指正；**\n\n```python\nclass Solution:\n    def decode(self, encoded: List[int]) -> List[int]:\n        n = len(encoded) + 1\n        \n        perm_total = reduce(xor, range(1, len(encoded) + 2))\n        \n        child_total = 0\n        for i in range(1, len(encoded), 2):\n            child_total ^= encoded[i]\n           \n        perm = [perm_total ^ child_total]\n        \n        for j in range(1, len(encoded) + 1):\n            perm.append(encoded[j - 1] ^ perm[j - 1])\n        return perm\n```\n\n\n\n\n\n","source":"_posts/1734解码异或的排列.md","raw":"---\ntitle: 1734解码异或的排列\ndate: 2021-05-12 12:29:27\ntags:\n\t- 算法\n\t- Python\n\t- 异或\ncategories: 算法\ncover: /images/banners/VCG41N1126025444.jpg\n---\n\n### 给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 encoded = [2,1] 。给你 encoded 数组，请你返回原始数组 perm 。题目保证答案存在且唯一。\n\n**示例 1：**\n输入：encoded = [3,1]\n输出：[1,2,3]\n解释：如果 perm = [1,2,3] ，那么 encoded = [1 XOR 2,2 XOR 3] = [3,1]\n\n**示例 2：**\n输入：encoded = [6,5,4,6]\n输出：[2,4,1,5,3]\n\n**此题是leetcode 1720的升级版**\n\n## 一、解法一：通过数据解题思路（异或运算）\n\n### 1.1 思路\n\n我在LeetCode上面看题解的时候，看得好吃力，完全没看懂，然后跟着思路用纸写一遍，突然就懂了。话不多说，开始：\n\n**我们知道异或运算有如下性质（不懂的话，可以查一下，不多做解释了）：**\n\n1. 相同数值异或，结果为 0\n2. 任意数值与 0 进行异或，结果为数值本身\n3. 异或本身满足交换律\n\n**⊕：代表异或**\n\n**本题需要我们求perm（需求一步一步往下看，不然会不懂）**\n\n1. 根据题目意思 ，假设 perm = [a, b, c, d, e]，那么 encoded = [ab, bc, cd, de]\n\n2. 先求出perm[0]  ,    perm[0] =   (perm[0] ⊕ perm[1] ... ⊕ perm[n] )  ⊕    (perm[1] ...⊕ perm[n] )   ,根据相同值异或为0性质，异或结果就是perm[0]，看懂了再往下走\n\n   * 此时我们只需要求出**(perm[0] ⊕ perm[1] ... ⊕ perm[n] )** 和**(perm[1] ...⊕ perm[n] )**的值，他俩异或的结果就可以求出**perm[0]**\n\n3. 求第2步的两个值：\n\n   * **(perm[0] ⊕ perm[1] ... ⊕ perm[n] )**，题目已经告诉我们的，他是前 n 个正整数的排列，假如n=5 ,他结果就是**1⊕ 2⊕ 3⊕ 4⊕ 5**,\n   * **(perm[1] ...⊕ perm[n] )**,这个值看如下举例：\n\n   假设 perm = [a, b, c, d, e]，那么 encoded = [ab, bc, cd, de]\n\n   **perm[1] ⊕ perm[2] ...⊕ perm[n]  =  encoded[1] ⊕ encoded[3]   (步长为2)**\n\n   * encoded都是题目给出来的值 ，是不是很好求\n   * 这样你就可以结合第二步，求出**perm[0]**的值\n\n4. 题目给出**encoded[i] = perm[i] ⊕ perm[i + 1]**    可以理解为：**encoded[i] = perm[i] ⊕ perm[i - 1]**    一样的意思， 只是我把下标 **i**理解为当前这个数和当前数的前一个\n\n\t* ​\tencoded[0] = perm[0] ⊕ perm[1]  两边同时异或 perm[1],  根据相同为0，得出如下\n\t* ​    perm[1] = encoded[0] ⊕ perm[0]\n\t* ​    perm[i] = encoded[i] ⊕ perm[i - 1]\n\n\n\n**最后再去看代码，就很清晰了，总结的不好的，欢迎留言指正；**\n\n```python\nclass Solution:\n    def decode(self, encoded: List[int]) -> List[int]:\n        n = len(encoded) + 1\n        \n        perm_total = reduce(xor, range(1, len(encoded) + 2))\n        \n        child_total = 0\n        for i in range(1, len(encoded), 2):\n            child_total ^= encoded[i]\n           \n        perm = [perm_total ^ child_total]\n        \n        for j in range(1, len(encoded) + 1):\n            perm.append(encoded[j - 1] ^ perm[j - 1])\n        return perm\n```\n\n\n\n\n\n","slug":"1734解码异或的排列","published":1,"updated":"2021-05-12T06:49:10.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckol3rcej0000qkuf4zpv0kdx","content":"<h3 id=\"给你一个整数数组-perm-，它是前-n-个正整数的排列，且-n-是个-奇数-。它被加密成另一个长度为-n-1-的整数数组-encoded-，满足-encoded-i-perm-i-XOR-perm-i-1-。比方说，如果-perm-1-3-2-，那么-encoded-2-1-。给你-encoded-数组，请你返回原始数组-perm-。题目保证答案存在且唯一。\"><a href=\"#给你一个整数数组-perm-，它是前-n-个正整数的排列，且-n-是个-奇数-。它被加密成另一个长度为-n-1-的整数数组-encoded-，满足-encoded-i-perm-i-XOR-perm-i-1-。比方说，如果-perm-1-3-2-，那么-encoded-2-1-。给你-encoded-数组，请你返回原始数组-perm-。题目保证答案存在且唯一。\" class=\"headerlink\" title=\"给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 encoded = [2,1] 。给你 encoded 数组，请你返回原始数组 perm 。题目保证答案存在且唯一。\"></a>给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 encoded = [2,1] 。给你 encoded 数组，请你返回原始数组 perm 。题目保证答案存在且唯一。</h3><p><strong>示例 1：</strong><br>输入：encoded = [3,1]<br>输出：[1,2,3]<br>解释：如果 perm = [1,2,3] ，那么 encoded = [1 XOR 2,2 XOR 3] = [3,1]</p>\n<p><strong>示例 2：</strong><br>输入：encoded = [6,5,4,6]<br>输出：[2,4,1,5,3]</p>\n<p><strong>此题是leetcode 1720的升级版</strong></p>\n<h2 id=\"一、解法一：通过数据解题思路（异或运算）\"><a href=\"#一、解法一：通过数据解题思路（异或运算）\" class=\"headerlink\" title=\"一、解法一：通过数据解题思路（异或运算）\"></a>一、解法一：通过数据解题思路（异或运算）</h2><h3 id=\"1-1-思路\"><a href=\"#1-1-思路\" class=\"headerlink\" title=\"1.1 思路\"></a>1.1 思路</h3><p>我在LeetCode上面看题解的时候，看得好吃力，完全没看懂，然后跟着思路用纸写一遍，突然就懂了。话不多说，开始：</p>\n<p><strong>我们知道异或运算有如下性质（不懂的话，可以查一下，不多做解释了）：</strong></p>\n<ol>\n<li>相同数值异或，结果为 0</li>\n<li>任意数值与 0 进行异或，结果为数值本身</li>\n<li>异或本身满足交换律</li>\n</ol>\n<p><strong>⊕：代表异或</strong></p>\n<p><strong>本题需要我们求perm（需求一步一步往下看，不然会不懂）</strong></p>\n<ol>\n<li><p>根据题目意思 ，假设 perm = [a, b, c, d, e]，那么 encoded = [ab, bc, cd, de]</p>\n</li>\n<li><p>先求出perm[0]  ,    perm[0] =   (perm[0] ⊕ perm[1] … ⊕ perm[n] )  ⊕    (perm[1] …⊕ perm[n] )   ,根据相同值异或为0性质，异或结果就是perm[0]，看懂了再往下走</p>\n<ul>\n<li>此时我们只需要求出**(perm[0] ⊕ perm[1] … ⊕ perm[n] )** 和**(perm[1] …⊕ perm[n] )<strong>的值，他俩异或的结果就可以求出</strong>perm[0]**</li>\n</ul>\n</li>\n<li><p>求第2步的两个值：</p>\n<ul>\n<li><strong>(perm[0] ⊕ perm[1] … ⊕ perm[n] )<strong>，题目已经告诉我们的，他是前 n 个正整数的排列，假如n=5 ,他结果就是</strong>1⊕ 2⊕ 3⊕ 4⊕ 5</strong>,</li>\n<li><strong>(perm[1] …⊕ perm[n] )</strong>,这个值看如下举例：</li>\n</ul>\n<p>假设 perm = [a, b, c, d, e]，那么 encoded = [ab, bc, cd, de]</p>\n<p><strong>perm[1] ⊕ perm[2] …⊕ perm[n]  =  encoded[1] ⊕ encoded[3]   (步长为2)</strong></p>\n<ul>\n<li>encoded都是题目给出来的值 ，是不是很好求</li>\n<li>这样你就可以结合第二步，求出**perm[0]**的值</li>\n</ul>\n</li>\n<li><p>题目给出<strong>encoded[i] = perm[i] ⊕ perm[i + 1]</strong>    可以理解为：<strong>encoded[i] = perm[i] ⊕ perm[i - 1]</strong>    一样的意思， 只是我把下标 <strong>i</strong>理解为当前这个数和当前数的前一个</p>\n<ul>\n<li>​    encoded[0] = perm[0] ⊕ perm[1]  两边同时异或 perm[1],  根据相同为0，得出如下</li>\n<li>​    perm[1] = encoded[0] ⊕ perm[0]</li>\n<li>​    perm[i] = encoded[i] ⊕ perm[i - 1]</li>\n</ul>\n</li>\n</ol>\n<p><strong>最后再去看代码，就很清晰了，总结的不好的，欢迎留言指正；</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> encoded<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        \n        perm_total <span class=\"token operator\">=</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>xor<span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        child_total <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            child_total <span class=\"token operator\">^</span><span class=\"token operator\">=</span> encoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n           \n        perm <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>perm_total <span class=\"token operator\">^</span> child_total<span class=\"token punctuation\">]</span>\n        \n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            perm<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> perm<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> perm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"给你一个整数数组-perm-，它是前-n-个正整数的排列，且-n-是个-奇数-。它被加密成另一个长度为-n-1-的整数数组-encoded-，满足-encoded-i-perm-i-XOR-perm-i-1-。比方说，如果-perm-1-3-2-，那么-encoded-2-1-。给你-encoded-数组，请你返回原始数组-perm-。题目保证答案存在且唯一。\"><a href=\"#给你一个整数数组-perm-，它是前-n-个正整数的排列，且-n-是个-奇数-。它被加密成另一个长度为-n-1-的整数数组-encoded-，满足-encoded-i-perm-i-XOR-perm-i-1-。比方说，如果-perm-1-3-2-，那么-encoded-2-1-。给你-encoded-数组，请你返回原始数组-perm-。题目保证答案存在且唯一。\" class=\"headerlink\" title=\"给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 encoded = [2,1] 。给你 encoded 数组，请你返回原始数组 perm 。题目保证答案存在且唯一。\"></a>给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 encoded = [2,1] 。给你 encoded 数组，请你返回原始数组 perm 。题目保证答案存在且唯一。</h3><p><strong>示例 1：</strong><br>输入：encoded = [3,1]<br>输出：[1,2,3]<br>解释：如果 perm = [1,2,3] ，那么 encoded = [1 XOR 2,2 XOR 3] = [3,1]</p>\n<p><strong>示例 2：</strong><br>输入：encoded = [6,5,4,6]<br>输出：[2,4,1,5,3]</p>\n<p><strong>此题是leetcode 1720的升级版</strong></p>\n<h2 id=\"一、解法一：通过数据解题思路（异或运算）\"><a href=\"#一、解法一：通过数据解题思路（异或运算）\" class=\"headerlink\" title=\"一、解法一：通过数据解题思路（异或运算）\"></a>一、解法一：通过数据解题思路（异或运算）</h2><h3 id=\"1-1-思路\"><a href=\"#1-1-思路\" class=\"headerlink\" title=\"1.1 思路\"></a>1.1 思路</h3><p>我在LeetCode上面看题解的时候，看得好吃力，完全没看懂，然后跟着思路用纸写一遍，突然就懂了。话不多说，开始：</p>\n<p><strong>我们知道异或运算有如下性质（不懂的话，可以查一下，不多做解释了）：</strong></p>\n<ol>\n<li>相同数值异或，结果为 0</li>\n<li>任意数值与 0 进行异或，结果为数值本身</li>\n<li>异或本身满足交换律</li>\n</ol>\n<p><strong>⊕：代表异或</strong></p>\n<p><strong>本题需要我们求perm（需求一步一步往下看，不然会不懂）</strong></p>\n<ol>\n<li><p>根据题目意思 ，假设 perm = [a, b, c, d, e]，那么 encoded = [ab, bc, cd, de]</p>\n</li>\n<li><p>先求出perm[0]  ,    perm[0] =   (perm[0] ⊕ perm[1] … ⊕ perm[n] )  ⊕    (perm[1] …⊕ perm[n] )   ,根据相同值异或为0性质，异或结果就是perm[0]，看懂了再往下走</p>\n<ul>\n<li>此时我们只需要求出**(perm[0] ⊕ perm[1] … ⊕ perm[n] )** 和**(perm[1] …⊕ perm[n] )<strong>的值，他俩异或的结果就可以求出</strong>perm[0]**</li>\n</ul>\n</li>\n<li><p>求第2步的两个值：</p>\n<ul>\n<li><strong>(perm[0] ⊕ perm[1] … ⊕ perm[n] )<strong>，题目已经告诉我们的，他是前 n 个正整数的排列，假如n=5 ,他结果就是</strong>1⊕ 2⊕ 3⊕ 4⊕ 5</strong>,</li>\n<li><strong>(perm[1] …⊕ perm[n] )</strong>,这个值看如下举例：</li>\n</ul>\n<p>假设 perm = [a, b, c, d, e]，那么 encoded = [ab, bc, cd, de]</p>\n<p><strong>perm[1] ⊕ perm[2] …⊕ perm[n]  =  encoded[1] ⊕ encoded[3]   (步长为2)</strong></p>\n<ul>\n<li>encoded都是题目给出来的值 ，是不是很好求</li>\n<li>这样你就可以结合第二步，求出**perm[0]**的值</li>\n</ul>\n</li>\n<li><p>题目给出<strong>encoded[i] = perm[i] ⊕ perm[i + 1]</strong>    可以理解为：<strong>encoded[i] = perm[i] ⊕ perm[i - 1]</strong>    一样的意思， 只是我把下标 <strong>i</strong>理解为当前这个数和当前数的前一个</p>\n<ul>\n<li>​    encoded[0] = perm[0] ⊕ perm[1]  两边同时异或 perm[1],  根据相同为0，得出如下</li>\n<li>​    perm[1] = encoded[0] ⊕ perm[0]</li>\n<li>​    perm[i] = encoded[i] ⊕ perm[i - 1]</li>\n</ul>\n</li>\n</ol>\n<p><strong>最后再去看代码，就很清晰了，总结的不好的，欢迎留言指正；</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> encoded<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        \n        perm_total <span class=\"token operator\">=</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>xor<span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        child_total <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            child_total <span class=\"token operator\">^</span><span class=\"token operator\">=</span> encoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n           \n        perm <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>perm_total <span class=\"token operator\">^</span> child_total<span class=\"token punctuation\">]</span>\n        \n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            perm<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> perm<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> perm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n"},{"title":"169多数元素","date":"2021-05-06T13:19:52.000Z","cover":"/images/banners/VCG41186545379.jpg","_content":"\n\n给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n\n## 一、解法一 使用消除法\n\n**此解法扣重点：出现次数会大于【n/2】的元素**\n\n**（1）从第一个数开始count=1，遇到相同的就加1，遇到不同的就减1，减到0就重新换个数开始计数，总能找到最多的那个，以一换一去换，最多的那一队，怎么都会多1个。**\n\n使用举例：\n\n​\t\t现在去打战，假设你方人口超过总人口一半以上，并且能保证每个人口出去干仗都能一对一同归于尽。最后还有人活下来的国家就是胜利，其他国家的人相互攻击，只要不打内战，只有赢家能扛到最后，可以通过这个思路先自己写一遍代码，写不出，可以参考以下，如有不好的地方，可以评论留言。\n\n```python\n    def majorityElement(self, nums: List[int]) -> int:\n        count = 0\n        re_nu = -1\n        for num in nums:\n            if num == re_nu:\n                count += 1\n            else:\n                if count == 0:\n                    re_nu = num\n                    continue\n                count -= 1\n        return re_nu\n```\n\n\n\n\n## 二、解法二 使用Hash\n\n**这就不多做解释了，看代码吧**\n```python\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        hashtable = dict()\n        for num in nums:\n            if num in hashtable:\n                hashtable[num] = hashtable[num] + 1\n            else:\n                hashtable[num] = 1\n        # 获取dict value最大的key值。\n        return max(hashtable, key=hashtable.get)\n```\n\n","source":"_posts/169多数元素.md","raw":"---\ntitle: 169多数元素\ndate: 2021-05-06 21:19:52\ntags:\n\t- 算法\n\t- Python\n\t- Hash\ncategories: 算法\ncover: /images/banners/VCG41186545379.jpg\n---\n\n\n给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n\n## 一、解法一 使用消除法\n\n**此解法扣重点：出现次数会大于【n/2】的元素**\n\n**（1）从第一个数开始count=1，遇到相同的就加1，遇到不同的就减1，减到0就重新换个数开始计数，总能找到最多的那个，以一换一去换，最多的那一队，怎么都会多1个。**\n\n使用举例：\n\n​\t\t现在去打战，假设你方人口超过总人口一半以上，并且能保证每个人口出去干仗都能一对一同归于尽。最后还有人活下来的国家就是胜利，其他国家的人相互攻击，只要不打内战，只有赢家能扛到最后，可以通过这个思路先自己写一遍代码，写不出，可以参考以下，如有不好的地方，可以评论留言。\n\n```python\n    def majorityElement(self, nums: List[int]) -> int:\n        count = 0\n        re_nu = -1\n        for num in nums:\n            if num == re_nu:\n                count += 1\n            else:\n                if count == 0:\n                    re_nu = num\n                    continue\n                count -= 1\n        return re_nu\n```\n\n\n\n\n## 二、解法二 使用Hash\n\n**这就不多做解释了，看代码吧**\n```python\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        hashtable = dict()\n        for num in nums:\n            if num in hashtable:\n                hashtable[num] = hashtable[num] + 1\n            else:\n                hashtable[num] = 1\n        # 获取dict value最大的key值。\n        return max(hashtable, key=hashtable.get)\n```\n\n","slug":"169多数元素","published":1,"updated":"2021-05-06T15:26:09.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckol3rcem0001qkuf016x4hz4","content":"<p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<h2 id=\"一、解法一-使用消除法\"><a href=\"#一、解法一-使用消除法\" class=\"headerlink\" title=\"一、解法一 使用消除法\"></a>一、解法一 使用消除法</h2><p><strong>此解法扣重点：出现次数会大于【n/2】的元素</strong></p>\n<p><strong>（1）从第一个数开始count=1，遇到相同的就加1，遇到不同的就减1，减到0就重新换个数开始计数，总能找到最多的那个，以一换一去换，最多的那一队，怎么都会多1个。</strong></p>\n<p>使用举例：</p>\n<p>​        现在去打战，假设你方人口超过总人口一半以上，并且能保证每个人口出去干仗都能一对一同归于尽。最后还有人活下来的国家就是胜利，其他国家的人相互攻击，只要不打内战，只有赢家能扛到最后，可以通过这个思路先自己写一遍代码，写不出，可以参考以下，如有不好的地方，可以评论留言。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    re_nu <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> re_nu<span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                re_nu <span class=\"token operator\">=</span> num\n                <span class=\"token keyword\">continue</span>\n            count <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> re_nu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"二、解法二-使用Hash\"><a href=\"#二、解法二-使用Hash\" class=\"headerlink\" title=\"二、解法二 使用Hash\"></a>二、解法二 使用Hash</h2><p><strong>这就不多做解释了，看代码吧</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        hashtable <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> num <span class=\"token keyword\">in</span> hashtable<span class=\"token punctuation\">:</span>\n                hashtable<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hashtable<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                hashtable<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># 获取dict value最大的key值。</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>hashtable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<h2 id=\"一、解法一-使用消除法\"><a href=\"#一、解法一-使用消除法\" class=\"headerlink\" title=\"一、解法一 使用消除法\"></a>一、解法一 使用消除法</h2><p><strong>此解法扣重点：出现次数会大于【n/2】的元素</strong></p>\n<p><strong>（1）从第一个数开始count=1，遇到相同的就加1，遇到不同的就减1，减到0就重新换个数开始计数，总能找到最多的那个，以一换一去换，最多的那一队，怎么都会多1个。</strong></p>\n<p>使用举例：</p>\n<p>​        现在去打战，假设你方人口超过总人口一半以上，并且能保证每个人口出去干仗都能一对一同归于尽。最后还有人活下来的国家就是胜利，其他国家的人相互攻击，只要不打内战，只有赢家能扛到最后，可以通过这个思路先自己写一遍代码，写不出，可以参考以下，如有不好的地方，可以评论留言。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    re_nu <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> re_nu<span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                re_nu <span class=\"token operator\">=</span> num\n                <span class=\"token keyword\">continue</span>\n            count <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> re_nu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"二、解法二-使用Hash\"><a href=\"#二、解法二-使用Hash\" class=\"headerlink\" title=\"二、解法二 使用Hash\"></a>二、解法二 使用Hash</h2><p><strong>这就不多做解释了，看代码吧</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        hashtable <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> num <span class=\"token keyword\">in</span> hashtable<span class=\"token punctuation\">:</span>\n                hashtable<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hashtable<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                hashtable<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># 获取dict value最大的key值。</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>hashtable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"TCP和UDP协议","date":"2021-05-10T07:43:32.000Z","cover":"/images/banners/VCG41186545379.jpg","_content":"\n### TCP的三次握手和四次挥手\n\n![](/TCP和UDP协议/VCG41154059609.jpg)","source":"_posts/TCP和UDP协议.md","raw":"---\ntitle: TCP和UDP协议\ndate: 2021-05-10 15:43:32\ntags:\n\t- TCP\n\t- UDP\ncategories: 网络\ncover: /images/banners/VCG41186545379.jpg\n---\n\n### TCP的三次握手和四次挥手\n\n![](/TCP和UDP协议/VCG41154059609.jpg)","slug":"TCP和UDP协议","published":1,"updated":"2021-05-13T06:32:03.211Z","_id":"ckol3rcen0003qkuf0traflth","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"TCP的三次握手和四次挥手\"><a href=\"#TCP的三次握手和四次挥手\" class=\"headerlink\" title=\"TCP的三次握手和四次挥手\"></a>TCP的三次握手和四次挥手</h3><p><img src=\"/TCP%E5%92%8CUDP%E5%8D%8F%E8%AE%AE/VCG41154059609.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"TCP的三次握手和四次挥手\"><a href=\"#TCP的三次握手和四次挥手\" class=\"headerlink\" title=\"TCP的三次握手和四次挥手\"></a>TCP的三次握手和四次挥手</h3><p><img src=\"/TCP%E5%92%8CUDP%E5%8D%8F%E8%AE%AE/VCG41154059609.jpg\"></p>\n"},{"title":"数据结构与算法-1","date":"2021-05-14T11:52:49.000Z","cover":"/images/banners/VCG41154059609.jpg","_content":"\n\n\n\n## 一、数据结构\n\n* 一维：\n\t* 基数：数组array(String) , 链表 linked list\n\t* 高级：栈 stack, 队列 queue , 双端队列 deque, 集合 set , 映射 map(hash or map), etc\n\n* 二维：\n\t*  基础：树 tree, 图 graph\n\t*  高级：二叉搜索树 binary search tree (red-black tree, AVL), 堆 heap, 并查集 disjoint set, 字典树 Trie , etc\n\n* 特殊：\n\t* 位运算 Bitwise, 布隆过滤器 BloomFitter\n\t* LRU Cache\n\n## 二、算法\n\n* if-else, swithch -> branch\n* for, while loop -> lteration\n* 递归 Recursion (Divide & Conquer, Backtrace)\n\n\n* 搜索Search: 尝试优先搜索 Depath first search, 广度优先搜索 Braeadth first search , A* , etc\n* 动态规划 Dynamic Programming\n* 二分查找 Binary Search\n* 贪心 Greedy\n* 数据 Math, 几何 Geometry\n**注意在头脑中回忆上面每种算法的思想和代码模块**\n\n\n\n### 2.1 算法结构脑图\n\n![image-20210514201311899](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210514201311899.png)\n\n### 2.2 数据结构脑图\n\n![image-20210514201558920](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210514201558920.png)\n\n## 三、切题四件套\n* Clarification\n* Possible solutions\n\t* compare(time/space)\n\t* optimal（加强）\n* Coding (多写)\n* Test cases\n\n### 3.1 刷题第一遍\n* 5分钟：读题+思考 \n* 直接看解法：注意！多解法，比较解法优劣\n* 背诵、默写好的解法\n\n### 3.2 刷题第二遍\n* 马上自己写 --》LeetCode提交\n* 多种解法比较、体会 --》优化！\n\n## 四、时间复杂度\n\n* 二叉树遍历- 前序、中序、后序： 时间复杂度是多少？  O(n)\n* 图的遍历 ： 时间复杂度是多少? O(n)\n* 搜索算法： DFS、BFS时间复杂度是多少？ O(n)\n* 二分查找：时间复杂度是多少？ Logn\n\n## 五、数组、链表、跳表\n### 5.1 链表时间复杂度\n* prepend\tO(1)\n* append\tO(1)\n* lookup\tO(n)\n* insert\tO(1)\n* delete\tO(1)\n#### 5.1.1 如何给链表加速\n\n![image-20210515082344998](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515082344998.png)\n\n\n\n\n\n\n### 5.2 跳表\n1. 时间复杂度：O(logn)\n\n1. 空间复杂度：O(n)\n\n1. 索引的高度：logn, 每层索引遍历的结点个数：3\n1. 在跳表中查询任意数据的时间复杂度就是O(logn)\n![image-20210515083752655](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515083752655.png)\n\n\n![image-20210515082847958](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515082847958.png)\n\n![image-20210515083455591](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515083455591.png)\n\n\n### 5.3 List 时间复杂度\n* prepend\tO(1)\n* append\tO(1)\n* lookup\tO(1)\n* insert\tO(n)\n* delete\tO(n)\n\n### 5.4 小结\n\n* 数组、链表、跳表的原理和实现\n* 三者的时间复杂度、空间复杂度\n* 工程运用\n* 跳表：升维思想+空间换时间","source":"_posts/数据结构与算法-1.md","raw":"---\ntitle: 数据结构与算法-1\ndate: 2021-05-14 19:52:49\ntags:\n\t- 算法\n\t- Python\ncategories: 算法\ncover: /images/banners/VCG41154059609.jpg\n---\n\n\n\n\n## 一、数据结构\n\n* 一维：\n\t* 基数：数组array(String) , 链表 linked list\n\t* 高级：栈 stack, 队列 queue , 双端队列 deque, 集合 set , 映射 map(hash or map), etc\n\n* 二维：\n\t*  基础：树 tree, 图 graph\n\t*  高级：二叉搜索树 binary search tree (red-black tree, AVL), 堆 heap, 并查集 disjoint set, 字典树 Trie , etc\n\n* 特殊：\n\t* 位运算 Bitwise, 布隆过滤器 BloomFitter\n\t* LRU Cache\n\n## 二、算法\n\n* if-else, swithch -> branch\n* for, while loop -> lteration\n* 递归 Recursion (Divide & Conquer, Backtrace)\n\n\n* 搜索Search: 尝试优先搜索 Depath first search, 广度优先搜索 Braeadth first search , A* , etc\n* 动态规划 Dynamic Programming\n* 二分查找 Binary Search\n* 贪心 Greedy\n* 数据 Math, 几何 Geometry\n**注意在头脑中回忆上面每种算法的思想和代码模块**\n\n\n\n### 2.1 算法结构脑图\n\n![image-20210514201311899](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210514201311899.png)\n\n### 2.2 数据结构脑图\n\n![image-20210514201558920](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210514201558920.png)\n\n## 三、切题四件套\n* Clarification\n* Possible solutions\n\t* compare(time/space)\n\t* optimal（加强）\n* Coding (多写)\n* Test cases\n\n### 3.1 刷题第一遍\n* 5分钟：读题+思考 \n* 直接看解法：注意！多解法，比较解法优劣\n* 背诵、默写好的解法\n\n### 3.2 刷题第二遍\n* 马上自己写 --》LeetCode提交\n* 多种解法比较、体会 --》优化！\n\n## 四、时间复杂度\n\n* 二叉树遍历- 前序、中序、后序： 时间复杂度是多少？  O(n)\n* 图的遍历 ： 时间复杂度是多少? O(n)\n* 搜索算法： DFS、BFS时间复杂度是多少？ O(n)\n* 二分查找：时间复杂度是多少？ Logn\n\n## 五、数组、链表、跳表\n### 5.1 链表时间复杂度\n* prepend\tO(1)\n* append\tO(1)\n* lookup\tO(n)\n* insert\tO(1)\n* delete\tO(1)\n#### 5.1.1 如何给链表加速\n\n![image-20210515082344998](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515082344998.png)\n\n\n\n\n\n\n### 5.2 跳表\n1. 时间复杂度：O(logn)\n\n1. 空间复杂度：O(n)\n\n1. 索引的高度：logn, 每层索引遍历的结点个数：3\n1. 在跳表中查询任意数据的时间复杂度就是O(logn)\n![image-20210515083752655](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515083752655.png)\n\n\n![image-20210515082847958](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515082847958.png)\n\n![image-20210515083455591](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515083455591.png)\n\n\n### 5.3 List 时间复杂度\n* prepend\tO(1)\n* append\tO(1)\n* lookup\tO(1)\n* insert\tO(n)\n* delete\tO(n)\n\n### 5.4 小结\n\n* 数组、链表、跳表的原理和实现\n* 三者的时间复杂度、空间复杂度\n* 工程运用\n* 跳表：升维思想+空间换时间","slug":"数据结构与算法-1","published":1,"updated":"2021-05-22T14:28:07.840Z","_id":"ckosfpu8z0000qoufdrmg69k5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、数据结构\"><a href=\"#一、数据结构\" class=\"headerlink\" title=\"一、数据结构\"></a>一、数据结构</h2><ul>\n<li><p>一维：</p>\n<ul>\n<li>基数：数组array(String) , 链表 linked list</li>\n<li>高级：栈 stack, 队列 queue , 双端队列 deque, 集合 set , 映射 map(hash or map), etc</li>\n</ul>\n</li>\n<li><p>二维：</p>\n<ul>\n<li> 基础：树 tree, 图 graph</li>\n<li> 高级：二叉搜索树 binary search tree (red-black tree, AVL), 堆 heap, 并查集 disjoint set, 字典树 Trie , etc</li>\n</ul>\n</li>\n<li><p>特殊：</p>\n<ul>\n<li>位运算 Bitwise, 布隆过滤器 BloomFitter</li>\n<li>LRU Cache</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、算法\"><a href=\"#二、算法\" class=\"headerlink\" title=\"二、算法\"></a>二、算法</h2><ul>\n<li>if-else, swithch -&gt; branch</li>\n<li>for, while loop -&gt; lteration</li>\n<li>递归 Recursion (Divide &amp; Conquer, Backtrace)</li>\n</ul>\n<ul>\n<li>搜索Search: 尝试优先搜索 Depath first search, 广度优先搜索 Braeadth first search , A* , etc</li>\n<li>动态规划 Dynamic Programming</li>\n<li>二分查找 Binary Search</li>\n<li>贪心 Greedy</li>\n<li>数据 Math, 几何 Geometry</li>\n<li><em>注意在头脑中回忆上面每种算法的思想和代码模块</em>*</li>\n</ul>\n<h3 id=\"2-1-算法结构脑图\"><a href=\"#2-1-算法结构脑图\" class=\"headerlink\" title=\"2.1 算法结构脑图\"></a>2.1 算法结构脑图</h3><p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210514201311899.png\" alt=\"image-20210514201311899\"></p>\n<h3 id=\"2-2-数据结构脑图\"><a href=\"#2-2-数据结构脑图\" class=\"headerlink\" title=\"2.2 数据结构脑图\"></a>2.2 数据结构脑图</h3><p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210514201558920.png\" alt=\"image-20210514201558920\"></p>\n<h2 id=\"三、切题四件套\"><a href=\"#三、切题四件套\" class=\"headerlink\" title=\"三、切题四件套\"></a>三、切题四件套</h2><ul>\n<li>Clarification</li>\n<li>Possible solutions<ul>\n<li>compare(time/space)</li>\n<li>optimal（加强）</li>\n</ul>\n</li>\n<li>Coding (多写)</li>\n<li>Test cases</li>\n</ul>\n<h3 id=\"3-1-刷题第一遍\"><a href=\"#3-1-刷题第一遍\" class=\"headerlink\" title=\"3.1 刷题第一遍\"></a>3.1 刷题第一遍</h3><ul>\n<li>5分钟：读题+思考 </li>\n<li>直接看解法：注意！多解法，比较解法优劣</li>\n<li>背诵、默写好的解法</li>\n</ul>\n<h3 id=\"3-2-刷题第二遍\"><a href=\"#3-2-刷题第二遍\" class=\"headerlink\" title=\"3.2 刷题第二遍\"></a>3.2 刷题第二遍</h3><ul>\n<li>马上自己写 –》LeetCode提交</li>\n<li>多种解法比较、体会 –》优化！</li>\n</ul>\n<h2 id=\"四、时间复杂度\"><a href=\"#四、时间复杂度\" class=\"headerlink\" title=\"四、时间复杂度\"></a>四、时间复杂度</h2><ul>\n<li>二叉树遍历- 前序、中序、后序： 时间复杂度是多少？  O(n)</li>\n<li>图的遍历 ： 时间复杂度是多少? O(n)</li>\n<li>搜索算法： DFS、BFS时间复杂度是多少？ O(n)</li>\n<li>二分查找：时间复杂度是多少？ Logn</li>\n</ul>\n<h2 id=\"五、数组、链表、跳表\"><a href=\"#五、数组、链表、跳表\" class=\"headerlink\" title=\"五、数组、链表、跳表\"></a>五、数组、链表、跳表</h2><h3 id=\"5-1-链表时间复杂度\"><a href=\"#5-1-链表时间复杂度\" class=\"headerlink\" title=\"5.1 链表时间复杂度\"></a>5.1 链表时间复杂度</h3><ul>\n<li>prepend    O(1)</li>\n<li>append    O(1)</li>\n<li>lookup    O(n)</li>\n<li>insert    O(1)</li>\n<li>delete    O(1)<h4 id=\"5-1-1-如何给链表加速\"><a href=\"#5-1-1-如何给链表加速\" class=\"headerlink\" title=\"5.1.1 如何给链表加速\"></a>5.1.1 如何给链表加速</h4></li>\n</ul>\n<p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515082344998.png\" alt=\"image-20210515082344998\"></p>\n<h3 id=\"5-2-跳表\"><a href=\"#5-2-跳表\" class=\"headerlink\" title=\"5.2 跳表\"></a>5.2 跳表</h3><ol>\n<li><p>时间复杂度：O(logn)</p>\n</li>\n<li><p>空间复杂度：O(n)</p>\n</li>\n<li><p>索引的高度：logn, 每层索引遍历的结点个数：3</p>\n</li>\n<li><p>在跳表中查询任意数据的时间复杂度就是O(logn)<br><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515083752655.png\" alt=\"image-20210515083752655\"></p>\n</li>\n</ol>\n<p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515082847958.png\" alt=\"image-20210515082847958\"></p>\n<p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515083455591.png\" alt=\"image-20210515083455591\"></p>\n<h3 id=\"5-3-List-时间复杂度\"><a href=\"#5-3-List-时间复杂度\" class=\"headerlink\" title=\"5.3 List 时间复杂度\"></a>5.3 List 时间复杂度</h3><ul>\n<li>prepend    O(1)</li>\n<li>append    O(1)</li>\n<li>lookup    O(1)</li>\n<li>insert    O(n)</li>\n<li>delete    O(n)</li>\n</ul>\n<h3 id=\"5-4-小结\"><a href=\"#5-4-小结\" class=\"headerlink\" title=\"5.4 小结\"></a>5.4 小结</h3><ul>\n<li>数组、链表、跳表的原理和实现</li>\n<li>三者的时间复杂度、空间复杂度</li>\n<li>工程运用</li>\n<li>跳表：升维思想+空间换时间</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、数据结构\"><a href=\"#一、数据结构\" class=\"headerlink\" title=\"一、数据结构\"></a>一、数据结构</h2><ul>\n<li><p>一维：</p>\n<ul>\n<li>基数：数组array(String) , 链表 linked list</li>\n<li>高级：栈 stack, 队列 queue , 双端队列 deque, 集合 set , 映射 map(hash or map), etc</li>\n</ul>\n</li>\n<li><p>二维：</p>\n<ul>\n<li> 基础：树 tree, 图 graph</li>\n<li> 高级：二叉搜索树 binary search tree (red-black tree, AVL), 堆 heap, 并查集 disjoint set, 字典树 Trie , etc</li>\n</ul>\n</li>\n<li><p>特殊：</p>\n<ul>\n<li>位运算 Bitwise, 布隆过滤器 BloomFitter</li>\n<li>LRU Cache</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、算法\"><a href=\"#二、算法\" class=\"headerlink\" title=\"二、算法\"></a>二、算法</h2><ul>\n<li>if-else, swithch -&gt; branch</li>\n<li>for, while loop -&gt; lteration</li>\n<li>递归 Recursion (Divide &amp; Conquer, Backtrace)</li>\n</ul>\n<ul>\n<li>搜索Search: 尝试优先搜索 Depath first search, 广度优先搜索 Braeadth first search , A* , etc</li>\n<li>动态规划 Dynamic Programming</li>\n<li>二分查找 Binary Search</li>\n<li>贪心 Greedy</li>\n<li>数据 Math, 几何 Geometry</li>\n<li><em>注意在头脑中回忆上面每种算法的思想和代码模块</em>*</li>\n</ul>\n<h3 id=\"2-1-算法结构脑图\"><a href=\"#2-1-算法结构脑图\" class=\"headerlink\" title=\"2.1 算法结构脑图\"></a>2.1 算法结构脑图</h3><p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210514201311899.png\" alt=\"image-20210514201311899\"></p>\n<h3 id=\"2-2-数据结构脑图\"><a href=\"#2-2-数据结构脑图\" class=\"headerlink\" title=\"2.2 数据结构脑图\"></a>2.2 数据结构脑图</h3><p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210514201558920.png\" alt=\"image-20210514201558920\"></p>\n<h2 id=\"三、切题四件套\"><a href=\"#三、切题四件套\" class=\"headerlink\" title=\"三、切题四件套\"></a>三、切题四件套</h2><ul>\n<li>Clarification</li>\n<li>Possible solutions<ul>\n<li>compare(time/space)</li>\n<li>optimal（加强）</li>\n</ul>\n</li>\n<li>Coding (多写)</li>\n<li>Test cases</li>\n</ul>\n<h3 id=\"3-1-刷题第一遍\"><a href=\"#3-1-刷题第一遍\" class=\"headerlink\" title=\"3.1 刷题第一遍\"></a>3.1 刷题第一遍</h3><ul>\n<li>5分钟：读题+思考 </li>\n<li>直接看解法：注意！多解法，比较解法优劣</li>\n<li>背诵、默写好的解法</li>\n</ul>\n<h3 id=\"3-2-刷题第二遍\"><a href=\"#3-2-刷题第二遍\" class=\"headerlink\" title=\"3.2 刷题第二遍\"></a>3.2 刷题第二遍</h3><ul>\n<li>马上自己写 –》LeetCode提交</li>\n<li>多种解法比较、体会 –》优化！</li>\n</ul>\n<h2 id=\"四、时间复杂度\"><a href=\"#四、时间复杂度\" class=\"headerlink\" title=\"四、时间复杂度\"></a>四、时间复杂度</h2><ul>\n<li>二叉树遍历- 前序、中序、后序： 时间复杂度是多少？  O(n)</li>\n<li>图的遍历 ： 时间复杂度是多少? O(n)</li>\n<li>搜索算法： DFS、BFS时间复杂度是多少？ O(n)</li>\n<li>二分查找：时间复杂度是多少？ Logn</li>\n</ul>\n<h2 id=\"五、数组、链表、跳表\"><a href=\"#五、数组、链表、跳表\" class=\"headerlink\" title=\"五、数组、链表、跳表\"></a>五、数组、链表、跳表</h2><h3 id=\"5-1-链表时间复杂度\"><a href=\"#5-1-链表时间复杂度\" class=\"headerlink\" title=\"5.1 链表时间复杂度\"></a>5.1 链表时间复杂度</h3><ul>\n<li>prepend    O(1)</li>\n<li>append    O(1)</li>\n<li>lookup    O(n)</li>\n<li>insert    O(1)</li>\n<li>delete    O(1)<h4 id=\"5-1-1-如何给链表加速\"><a href=\"#5-1-1-如何给链表加速\" class=\"headerlink\" title=\"5.1.1 如何给链表加速\"></a>5.1.1 如何给链表加速</h4></li>\n</ul>\n<p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515082344998.png\" alt=\"image-20210515082344998\"></p>\n<h3 id=\"5-2-跳表\"><a href=\"#5-2-跳表\" class=\"headerlink\" title=\"5.2 跳表\"></a>5.2 跳表</h3><ol>\n<li><p>时间复杂度：O(logn)</p>\n</li>\n<li><p>空间复杂度：O(n)</p>\n</li>\n<li><p>索引的高度：logn, 每层索引遍历的结点个数：3</p>\n</li>\n<li><p>在跳表中查询任意数据的时间复杂度就是O(logn)<br><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515083752655.png\" alt=\"image-20210515083752655\"></p>\n</li>\n</ol>\n<p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515082847958.png\" alt=\"image-20210515082847958\"></p>\n<p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515083455591.png\" alt=\"image-20210515083455591\"></p>\n<h3 id=\"5-3-List-时间复杂度\"><a href=\"#5-3-List-时间复杂度\" class=\"headerlink\" title=\"5.3 List 时间复杂度\"></a>5.3 List 时间复杂度</h3><ul>\n<li>prepend    O(1)</li>\n<li>append    O(1)</li>\n<li>lookup    O(1)</li>\n<li>insert    O(n)</li>\n<li>delete    O(n)</li>\n</ul>\n<h3 id=\"5-4-小结\"><a href=\"#5-4-小结\" class=\"headerlink\" title=\"5.4 小结\"></a>5.4 小结</h3><ul>\n<li>数组、链表、跳表的原理和实现</li>\n<li>三者的时间复杂度、空间复杂度</li>\n<li>工程运用</li>\n<li>跳表：升维思想+空间换时间</li>\n</ul>\n"},{"title":"70爬楼梯","date":"2021-05-17T11:22:16.000Z","cover":"/images/banners/VCG211263245974.jpg","_content":"\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n注意：给定 n 是一个正整数。\n\n**示例 1：**\n\n输入： 2\n输出： 2\n解释： 有两种方法可以爬到楼顶。\n\n1. 1 阶 + 1 阶\n\n2. 2 阶\n\n**示例 2：**\n\n输入： 3\n输出： 3\n解释： 有三种方法可以爬到楼顶。\n\n1.  1 阶 + 1 阶 + 1 阶\n2.  1 阶 + 2 阶\n3.  2 阶 + 1 阶\n\n### 解法1：动态规划 36ms\n```python\nclass Solution:\n\tdef climbStairs(self, n: int) -> int:    \n\t\tallways = [1] + [0] * n\n\t\tfor i in range(1, n+1):\n\t\t\tallways[i] = allways[i - 1] + allways[i - 2]\n\t\treturn allways[-1]\n```\n\n\n\n### 解法2：循环暴力 44ms\n```python\nclass Solution:\n    def climbStairs(self, n: int) -> int:\n\t\ta = b = 1\n        for _ in range(n):\n            a, b = b, a+b\n        return a\n```\n### 解法3：递归\n```python\nclass Solution:\n\tdef climbStairs(self, n: int) -> int:   \n\t\tmemo = [0 for i in range(n+1)]\n        if memo[n] > 0:\n            return memo[n]\n        if n == 1:\n            memo[n] = 1\n        elif n == 2:\n            memo[n] = 2\n        else:\n            memo[n] = self.climbStairs(n - 1) + self.climbStairs(n - 2)\n        return memo[n]\n```","source":"_posts/70爬楼梯.md","raw":"---\ntitle: 70爬楼梯\ndate: 2021-05-17 19:22:16\ntags:\n\t- 算法\n\t- Python\n\t- 递归\n\t- 动态规划\ncategories: 算法\ncover: /images/banners/VCG211263245974.jpg\n---\n\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n注意：给定 n 是一个正整数。\n\n**示例 1：**\n\n输入： 2\n输出： 2\n解释： 有两种方法可以爬到楼顶。\n\n1. 1 阶 + 1 阶\n\n2. 2 阶\n\n**示例 2：**\n\n输入： 3\n输出： 3\n解释： 有三种方法可以爬到楼顶。\n\n1.  1 阶 + 1 阶 + 1 阶\n2.  1 阶 + 2 阶\n3.  2 阶 + 1 阶\n\n### 解法1：动态规划 36ms\n```python\nclass Solution:\n\tdef climbStairs(self, n: int) -> int:    \n\t\tallways = [1] + [0] * n\n\t\tfor i in range(1, n+1):\n\t\t\tallways[i] = allways[i - 1] + allways[i - 2]\n\t\treturn allways[-1]\n```\n\n\n\n### 解法2：循环暴力 44ms\n```python\nclass Solution:\n    def climbStairs(self, n: int) -> int:\n\t\ta = b = 1\n        for _ in range(n):\n            a, b = b, a+b\n        return a\n```\n### 解法3：递归\n```python\nclass Solution:\n\tdef climbStairs(self, n: int) -> int:   \n\t\tmemo = [0 for i in range(n+1)]\n        if memo[n] > 0:\n            return memo[n]\n        if n == 1:\n            memo[n] = 1\n        elif n == 2:\n            memo[n] = 2\n        else:\n            memo[n] = self.climbStairs(n - 1) + self.climbStairs(n - 2)\n        return memo[n]\n```","slug":"70爬楼梯","published":1,"updated":"2021-05-17T11:29:26.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckosiz5m10000nwufdipn6gj5","content":"<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>\n<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p>注意：给定 n 是一个正整数。</p>\n<p><strong>示例 1：</strong></p>\n<p>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p>\n<ol>\n<li><p>1 阶 + 1 阶</p>\n</li>\n<li><p>2 阶</p>\n</li>\n</ol>\n<p><strong>示例 2：</strong></p>\n<p>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p>\n<ol>\n<li> 1 阶 + 1 阶 + 1 阶</li>\n<li> 1 阶 + 2 阶</li>\n<li> 2 阶 + 1 阶</li>\n</ol>\n<h3 id=\"解法1：动态规划-36ms\"><a href=\"#解法1：动态规划-36ms\" class=\"headerlink\" title=\"解法1：动态规划 36ms\"></a>解法1：动态规划 36ms</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>    \n\t\tallways <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tallways<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> allways<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> allways<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">return</span> allways<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"解法2：循环暴力-44ms\"><a href=\"#解法2：循环暴力-44ms\" class=\"headerlink\" title=\"解法2：循环暴力 44ms\"></a>解法2：循环暴力 44ms</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n\t\ta <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a<span class=\"token operator\">+</span>b\n        <span class=\"token keyword\">return</span> a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"解法3：递归\"><a href=\"#解法3：递归\" class=\"headerlink\" title=\"解法3：递归\"></a>解法3：递归</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>   \n\t\tmemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>climbStairs<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>climbStairs<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>\n<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p>注意：给定 n 是一个正整数。</p>\n<p><strong>示例 1：</strong></p>\n<p>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p>\n<ol>\n<li><p>1 阶 + 1 阶</p>\n</li>\n<li><p>2 阶</p>\n</li>\n</ol>\n<p><strong>示例 2：</strong></p>\n<p>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p>\n<ol>\n<li> 1 阶 + 1 阶 + 1 阶</li>\n<li> 1 阶 + 2 阶</li>\n<li> 2 阶 + 1 阶</li>\n</ol>\n<h3 id=\"解法1：动态规划-36ms\"><a href=\"#解法1：动态规划-36ms\" class=\"headerlink\" title=\"解法1：动态规划 36ms\"></a>解法1：动态规划 36ms</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>    \n\t\tallways <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tallways<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> allways<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> allways<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">return</span> allways<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"解法2：循环暴力-44ms\"><a href=\"#解法2：循环暴力-44ms\" class=\"headerlink\" title=\"解法2：循环暴力 44ms\"></a>解法2：循环暴力 44ms</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n\t\ta <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a<span class=\"token operator\">+</span>b\n        <span class=\"token keyword\">return</span> a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"解法3：递归\"><a href=\"#解法3：递归\" class=\"headerlink\" title=\"解法3：递归\"></a>解法3：递归</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>   \n\t\tmemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>climbStairs<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>climbStairs<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"15三数之和","date":"2021-05-18T01:27:01.000Z","_content":"\n给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。\n\n注意：答案中不可以包含重复的三元组。\n\n \n\n示例 1：\n\n输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n示例 2：\n\n输入：nums = []\n输出：[]\n示例 3：\n\n输入：nums = [0]\n输出：[]\n\n\n\n### 解法1：双指针 528ms   击败：97.74%\n\n```python\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n\t\t# 双指针\n        ans = list()\n        nums_len = len(nums)\n        nums.sort()\n        for first in range(nums_len - 2):\n            # 第一个数大于0，那么3个数相加就不可能等于0了\n            if nums[first] > 0:\n                continue\n            if first >= 1 and nums[first] == nums[first - 1]:\n                continue\n\n            second = first + 1\n            third = nums_len - 1\n            \n            while second < third:\n               \t\n                tar = nums[first] + nums[second] + nums[third]\n                # 大于0\n                if tar > 0:\n                    third -= 1\n                # 小于0\n                elif tar < 0:\n                    second += 1\n                # 等于0\n                else:\n                    ans.append([nums[first], nums[second], nums[third]])\n                    # 中指针，与前一个数相等的直接跳过\n                    while second < third and nums[second + 1] == nums[second]:\n                        second += 1\n                    # 右·指针，与前一个数相等的直接跳过\n                    while second < third and nums[third - 1] == nums[third]:\n                        third -= 1\n                    third -= 1; second += 1\n        return ans\n```","source":"_posts/15三数之和.md","raw":"---\ntitle: 15三数之和\ndate: 2021-05-18 09:27:01\ntags:\n---\n\n给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。\n\n注意：答案中不可以包含重复的三元组。\n\n \n\n示例 1：\n\n输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n示例 2：\n\n输入：nums = []\n输出：[]\n示例 3：\n\n输入：nums = [0]\n输出：[]\n\n\n\n### 解法1：双指针 528ms   击败：97.74%\n\n```python\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n\t\t# 双指针\n        ans = list()\n        nums_len = len(nums)\n        nums.sort()\n        for first in range(nums_len - 2):\n            # 第一个数大于0，那么3个数相加就不可能等于0了\n            if nums[first] > 0:\n                continue\n            if first >= 1 and nums[first] == nums[first - 1]:\n                continue\n\n            second = first + 1\n            third = nums_len - 1\n            \n            while second < third:\n               \t\n                tar = nums[first] + nums[second] + nums[third]\n                # 大于0\n                if tar > 0:\n                    third -= 1\n                # 小于0\n                elif tar < 0:\n                    second += 1\n                # 等于0\n                else:\n                    ans.append([nums[first], nums[second], nums[third]])\n                    # 中指针，与前一个数相等的直接跳过\n                    while second < third and nums[second + 1] == nums[second]:\n                        second += 1\n                    # 右·指针，与前一个数相等的直接跳过\n                    while second < third and nums[third - 1] == nums[third]:\n                        third -= 1\n                    third -= 1; second += 1\n        return ans\n```","slug":"15三数之和","published":1,"updated":"2021-05-18T01:33:01.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckote38dz0000cguf9yc110by","content":"<p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p>\n<p>注意：答案中不可以包含重复的三元组。</p>\n<p> </p>\n<p>示例 1：</p>\n<p>输入：nums = [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]<br>示例 2：</p>\n<p>输入：nums = []<br>输出：[]<br>示例 3：</p>\n<p>输入：nums = [0]<br>输出：[]</p>\n<h3 id=\"解法1：双指针-528ms-击败：97-74\"><a href=\"#解法1：双指针-528ms-击败：97-74\" class=\"headerlink\" title=\"解法1：双指针 528ms   击败：97.74%\"></a>解法1：双指针 528ms   击败：97.74%</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">threeSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># 双指针</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        nums_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        nums<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> first <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>nums_len <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 第一个数大于0，那么3个数相加就不可能等于0了</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">if</span> first <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>first <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            second <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            third <span class=\"token operator\">=</span> nums_len <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n            \n            <span class=\"token keyword\">while</span> second <span class=\"token operator\">&lt;</span> third<span class=\"token punctuation\">:</span>\n               \t\n                tar <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>third<span class=\"token punctuation\">]</span>\n                <span class=\"token comment\"># 大于0</span>\n                <span class=\"token keyword\">if</span> tar <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    third <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                <span class=\"token comment\"># 小于0</span>\n                <span class=\"token keyword\">elif</span> tar <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    second <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                <span class=\"token comment\"># 等于0</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    ans<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>third<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token comment\"># 中指针，与前一个数相等的直接跳过</span>\n                    <span class=\"token keyword\">while</span> second <span class=\"token operator\">&lt;</span> third <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>second <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        second <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                    <span class=\"token comment\"># 右·指针，与前一个数相等的直接跳过</span>\n                    <span class=\"token keyword\">while</span> second <span class=\"token operator\">&lt;</span> third <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>third <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>third<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        third <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                    third <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> second <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> ans<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p>\n<p>注意：答案中不可以包含重复的三元组。</p>\n<p> </p>\n<p>示例 1：</p>\n<p>输入：nums = [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]<br>示例 2：</p>\n<p>输入：nums = []<br>输出：[]<br>示例 3：</p>\n<p>输入：nums = [0]<br>输出：[]</p>\n<h3 id=\"解法1：双指针-528ms-击败：97-74\"><a href=\"#解法1：双指针-528ms-击败：97-74\" class=\"headerlink\" title=\"解法1：双指针 528ms   击败：97.74%\"></a>解法1：双指针 528ms   击败：97.74%</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">threeSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># 双指针</span>\n        ans <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        nums_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        nums<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> first <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>nums_len <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 第一个数大于0，那么3个数相加就不可能等于0了</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">if</span> first <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>first <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            second <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            third <span class=\"token operator\">=</span> nums_len <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n            \n            <span class=\"token keyword\">while</span> second <span class=\"token operator\">&lt;</span> third<span class=\"token punctuation\">:</span>\n               \t\n                tar <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>third<span class=\"token punctuation\">]</span>\n                <span class=\"token comment\"># 大于0</span>\n                <span class=\"token keyword\">if</span> tar <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    third <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                <span class=\"token comment\"># 小于0</span>\n                <span class=\"token keyword\">elif</span> tar <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    second <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                <span class=\"token comment\"># 等于0</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    ans<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>third<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token comment\"># 中指针，与前一个数相等的直接跳过</span>\n                    <span class=\"token keyword\">while</span> second <span class=\"token operator\">&lt;</span> third <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>second <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        second <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                    <span class=\"token comment\"># 右·指针，与前一个数相等的直接跳过</span>\n                    <span class=\"token keyword\">while</span> second <span class=\"token operator\">&lt;</span> third <span class=\"token keyword\">and</span> nums<span class=\"token punctuation\">[</span>third <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>third<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        third <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                    third <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> second <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> ans<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Python合并文件夹下的PDF","date":"2021-05-22T14:22:12.000Z","cover":"/images/banners/VCG41154059609.jpg","_content":"## Python合并文件夹下的PDF\n今天本来想用WPS来合并PDF，发现他要钱；接着找了几个软件，都要收费，我一下火就上来了；充钱是不可能充钱的，我试了下用Python写一个，发现成了，也没有乱码现象，直接上代码，copy就能用；\n### 版本\nPyPDF2==1.26.0\nPython39\n\n```python\nfrom PyPDF2 import PdfFileMerger\nimport os\n\n\ndef merger_dir_pdf():\n    \"\"\"\n    合并文件夹下的所有pdf文件\n    :return: 无  在对应文件夹下会输出文件\n    \"\"\"\n    # 修改此路径（全路径）即可，后面记得加 / 斜杠\n    DIR = \"D:/放pdf的文件夹/\"\n\n    files = os.listdir(DIR)  # 列出目录中的所有文件\n    merger = PdfFileMerger()\n    \n    for file in files:\n        if file[-4:] == \".pdf\":\n            merger.append(open(DIR + file, 'rb'))\n    \n    with open(DIR + '合并后.pdf', 'wb') as file_out:\n        merger.write(file_out)\n\n\ndef main():\n    merger_dir_pdf()\n\nif __name__ == \"__main__\":\n    main()\n```","source":"_posts/Python合并文件夹下的PDF.md","raw":"---\ntitle: Python合并文件夹下的PDF\ndate: 2021-05-22 22:22:12\ntags:\n\t- 小工具\n\t- Python\ncategories: 算法\ncover: /images/banners/VCG41154059609.jpg\n---\n## Python合并文件夹下的PDF\n今天本来想用WPS来合并PDF，发现他要钱；接着找了几个软件，都要收费，我一下火就上来了；充钱是不可能充钱的，我试了下用Python写一个，发现成了，也没有乱码现象，直接上代码，copy就能用；\n### 版本\nPyPDF2==1.26.0\nPython39\n\n```python\nfrom PyPDF2 import PdfFileMerger\nimport os\n\n\ndef merger_dir_pdf():\n    \"\"\"\n    合并文件夹下的所有pdf文件\n    :return: 无  在对应文件夹下会输出文件\n    \"\"\"\n    # 修改此路径（全路径）即可，后面记得加 / 斜杠\n    DIR = \"D:/放pdf的文件夹/\"\n\n    files = os.listdir(DIR)  # 列出目录中的所有文件\n    merger = PdfFileMerger()\n    \n    for file in files:\n        if file[-4:] == \".pdf\":\n            merger.append(open(DIR + file, 'rb'))\n    \n    with open(DIR + '合并后.pdf', 'wb') as file_out:\n        merger.write(file_out)\n\n\ndef main():\n    merger_dir_pdf()\n\nif __name__ == \"__main__\":\n    main()\n```","slug":"Python合并文件夹下的PDF","published":1,"updated":"2021-05-22T14:28:36.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckozuknh000004gufbl5sbeey","content":"<h2 id=\"Python合并文件夹下的PDF\"><a href=\"#Python合并文件夹下的PDF\" class=\"headerlink\" title=\"Python合并文件夹下的PDF\"></a>Python合并文件夹下的PDF</h2><p>今天本来想用WPS来合并PDF，发现他要钱；接着找了几个软件，都要收费，我一下火就上来了；充钱是不可能充钱的，我试了下用Python写一个，发现成了，也没有乱码现象，直接上代码，copy就能用；</p>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p>PyPDF2==1.26.0<br>Python39</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> PyPDF2 <span class=\"token keyword\">import</span> PdfFileMerger\n<span class=\"token keyword\">import</span> os\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">merger_dir_pdf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    合并文件夹下的所有pdf文件\n    :return: 无  在对应文件夹下会输出文件\n    \"\"\"</span>\n    <span class=\"token comment\"># 修改此路径（全路径）即可，后面记得加 / 斜杠</span>\n    DIR <span class=\"token operator\">=</span> <span class=\"token string\">\"D:/放pdf的文件夹/\"</span>\n\n    files <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>DIR<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 列出目录中的所有文件</span>\n    merger <span class=\"token operator\">=</span> PdfFileMerger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\".pdf\"</span><span class=\"token punctuation\">:</span>\n            merger<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>DIR <span class=\"token operator\">+</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>DIR <span class=\"token operator\">+</span> <span class=\"token string\">'合并后.pdf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> file_out<span class=\"token punctuation\">:</span>\n        merger<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>file_out<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    merger_dir_pdf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python合并文件夹下的PDF\"><a href=\"#Python合并文件夹下的PDF\" class=\"headerlink\" title=\"Python合并文件夹下的PDF\"></a>Python合并文件夹下的PDF</h2><p>今天本来想用WPS来合并PDF，发现他要钱；接着找了几个软件，都要收费，我一下火就上来了；充钱是不可能充钱的，我试了下用Python写一个，发现成了，也没有乱码现象，直接上代码，copy就能用；</p>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p>PyPDF2==1.26.0<br>Python39</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> PyPDF2 <span class=\"token keyword\">import</span> PdfFileMerger\n<span class=\"token keyword\">import</span> os\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">merger_dir_pdf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    合并文件夹下的所有pdf文件\n    :return: 无  在对应文件夹下会输出文件\n    \"\"\"</span>\n    <span class=\"token comment\"># 修改此路径（全路径）即可，后面记得加 / 斜杠</span>\n    DIR <span class=\"token operator\">=</span> <span class=\"token string\">\"D:/放pdf的文件夹/\"</span>\n\n    files <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>DIR<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 列出目录中的所有文件</span>\n    merger <span class=\"token operator\">=</span> PdfFileMerger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\".pdf\"</span><span class=\"token punctuation\">:</span>\n            merger<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>DIR <span class=\"token operator\">+</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>DIR <span class=\"token operator\">+</span> <span class=\"token string\">'合并后.pdf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> file_out<span class=\"token punctuation\">:</span>\n        merger<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>file_out<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    merger_dir_pdf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"92反转链表","date":"2021-05-28T13:33:34.000Z","_content":"\n## 给你单链表的头指针 head 和两个整数 left 和 right ，其中 left <= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 \n\n![image-20210528213456016](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210528213456019.png)\n\n输入：head = [1,2,3,4,5], left = 2, right = 4\n输出：[1,4,3,2,5]\n示例 2：\n\n输入：head = [5], left = 1, right = 1\n输出：[5]\n\n\n\n## 解法1 穿针引线法\n\n\n\n![image-20210528213624999](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210528213624999.png)\n\n\n```python\nclass Solution:\n    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:\n        def reverse_list_node(head: ListNode):\n            cur = None\n            pre = head\n            while pre:\n                tmp_pre = pre.next\n                pre.next = cur\n                cur = pre\n                pre = tmp_pre\n\n        # pre  lft  rgt  succ\n        vitural_node = ListNode(0, head)\n        pre = vitural_node\n        # 1、pre走到left - 1 的前一个节点\n        for _ in range(left - 1):\n            pre = pre.next\n        \n        rgt = pre \n        # 2、 从pre走到right 节点\n        for _ in range(right - left + 1):\n            rgt = rgt.next\n\n        lft = pre.next\n        succ = rgt.next\n        # 3、截断lft 和rgt\n        pre.next = None\n        rgt.next = None\n\n        # 4、反转\n        reverse_list_node(lft)\n        # 5、拼接\n        pre.next = rgt\n        lft.next = succ\n        return vitural_node.next\n```","source":"_posts/92反转链表.md","raw":"---\ntitle: 92反转链表\ndate: 2021-05-28 21:33:34\ntags:\n---\n\n## 给你单链表的头指针 head 和两个整数 left 和 right ，其中 left <= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 \n\n![image-20210528213456016](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210528213456019.png)\n\n输入：head = [1,2,3,4,5], left = 2, right = 4\n输出：[1,4,3,2,5]\n示例 2：\n\n输入：head = [5], left = 1, right = 1\n输出：[5]\n\n\n\n## 解法1 穿针引线法\n\n\n\n![image-20210528213624999](D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210528213624999.png)\n\n\n```python\nclass Solution:\n    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:\n        def reverse_list_node(head: ListNode):\n            cur = None\n            pre = head\n            while pre:\n                tmp_pre = pre.next\n                pre.next = cur\n                cur = pre\n                pre = tmp_pre\n\n        # pre  lft  rgt  succ\n        vitural_node = ListNode(0, head)\n        pre = vitural_node\n        # 1、pre走到left - 1 的前一个节点\n        for _ in range(left - 1):\n            pre = pre.next\n        \n        rgt = pre \n        # 2、 从pre走到right 节点\n        for _ in range(right - left + 1):\n            rgt = rgt.next\n\n        lft = pre.next\n        succ = rgt.next\n        # 3、截断lft 和rgt\n        pre.next = None\n        rgt.next = None\n\n        # 4、反转\n        reverse_list_node(lft)\n        # 5、拼接\n        pre.next = rgt\n        lft.next = succ\n        return vitural_node.next\n```","slug":"92反转链表","published":1,"updated":"2021-05-28T13:36:43.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckp8dmx5c00008gufehl33jo1","content":"<h2 id=\"给你单链表的头指针-head-和两个整数-left-和-right-，其中-left-lt-right-。请你反转从位置-left-到位置-right-的链表节点，返回-反转后的链表\"><a href=\"#给你单链表的头指针-head-和两个整数-left-和-right-，其中-left-lt-right-。请你反转从位置-left-到位置-right-的链表节点，返回-反转后的链表\" class=\"headerlink\" title=\"给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表\"></a>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表</h2><p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210528213456019.png\" alt=\"image-20210528213456016\"></p>\n<p>输入：head = [1,2,3,4,5], left = 2, right = 4<br>输出：[1,4,3,2,5]<br>示例 2：</p>\n<p>输入：head = [5], left = 1, right = 1<br>输出：[5]</p>\n<h2 id=\"解法1-穿针引线法\"><a href=\"#解法1-穿针引线法\" class=\"headerlink\" title=\"解法1 穿针引线法\"></a>解法1 穿针引线法</h2><p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210528213624999.png\" alt=\"image-20210528213624999\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverseBetween</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">reverse_list_node</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cur <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            pre <span class=\"token operator\">=</span> head\n            <span class=\"token keyword\">while</span> pre<span class=\"token punctuation\">:</span>\n                tmp_pre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n                pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> cur\n                cur <span class=\"token operator\">=</span> pre\n                pre <span class=\"token operator\">=</span> tmp_pre\n\n        <span class=\"token comment\"># pre  lft  rgt  succ</span>\n        vitural_node <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span>\n        pre <span class=\"token operator\">=</span> vitural_node\n        <span class=\"token comment\"># 1、pre走到left - 1 的前一个节点</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            pre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        \n        rgt <span class=\"token operator\">=</span> pre \n        <span class=\"token comment\"># 2、 从pre走到right 节点</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            rgt <span class=\"token operator\">=</span> rgt<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n        lft <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        succ <span class=\"token operator\">=</span> rgt<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token comment\"># 3、截断lft 和rgt</span>\n        pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        rgt<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># 4、反转</span>\n        reverse_list_node<span class=\"token punctuation\">(</span>lft<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 5、拼接</span>\n        pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> rgt\n        lft<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> succ\n        <span class=\"token keyword\">return</span> vitural_node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"给你单链表的头指针-head-和两个整数-left-和-right-，其中-left-lt-right-。请你反转从位置-left-到位置-right-的链表节点，返回-反转后的链表\"><a href=\"#给你单链表的头指针-head-和两个整数-left-和-right-，其中-left-lt-right-。请你反转从位置-left-到位置-right-的链表节点，返回-反转后的链表\" class=\"headerlink\" title=\"给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表\"></a>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表</h2><p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210528213456019.png\" alt=\"image-20210528213456016\"></p>\n<p>输入：head = [1,2,3,4,5], left = 2, right = 4<br>输出：[1,4,3,2,5]<br>示例 2：</p>\n<p>输入：head = [5], left = 1, right = 1<br>输出：[5]</p>\n<h2 id=\"解法1-穿针引线法\"><a href=\"#解法1-穿针引线法\" class=\"headerlink\" title=\"解法1 穿针引线法\"></a>解法1 穿针引线法</h2><p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210528213624999.png\" alt=\"image-20210528213624999\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverseBetween</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">reverse_list_node</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cur <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            pre <span class=\"token operator\">=</span> head\n            <span class=\"token keyword\">while</span> pre<span class=\"token punctuation\">:</span>\n                tmp_pre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n                pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> cur\n                cur <span class=\"token operator\">=</span> pre\n                pre <span class=\"token operator\">=</span> tmp_pre\n\n        <span class=\"token comment\"># pre  lft  rgt  succ</span>\n        vitural_node <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span>\n        pre <span class=\"token operator\">=</span> vitural_node\n        <span class=\"token comment\"># 1、pre走到left - 1 的前一个节点</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            pre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        \n        rgt <span class=\"token operator\">=</span> pre \n        <span class=\"token comment\"># 2、 从pre走到right 节点</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            rgt <span class=\"token operator\">=</span> rgt<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n        lft <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        succ <span class=\"token operator\">=</span> rgt<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token comment\"># 3、截断lft 和rgt</span>\n        pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        rgt<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># 4、反转</span>\n        reverse_list_node<span class=\"token punctuation\">(</span>lft<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 5、拼接</span>\n        pre<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> rgt\n        lft<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> succ\n        <span class=\"token keyword\">return</span> vitural_node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"SpringBoot","date":"2021-05-31T03:42:36.000Z","cover":"/images/banners/VCG41N1169192820.jpg","_content":"[toc]\n\n\n\n# Spring boot 2\n\n### 一、Boot入门\n\n**SpringBoot2核心技术与响应式编程: https://www.yuque.com/atguigu/springboot**\n\n#### 1、简介\n- 简化Spring应用开发的一个框架；\n- 整个Spring技术栈的一大整合；\n- J2EE开发的一站式解决方案；\n\n\nSpring Boot来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用\n\n**背景:**\n\nJ2EE笨重的开发、繁多的配置、低下的开发效率、复杂的部署流程、第三方技术集成难度大。\n\n**解决∶**\n\n\"Spring全家桶”时代。\nSpring Boot >J2EE一站式解决方案Spring Cloud→分布式整体解决方案\n\nUser -> Spring Boot -> Spring\n\n**优点**\n+ 快速创建独立运行的Spring项目以及主流框架集成\n+ 使用嵌入式的Servlet容器，应用无需打成WAR包\n+ starters自动依赖与版本控制\n+ 大量的自动配置，简化开发，也可修改默认值\n+ 无需配置XML，无代码生成，开箱即用\n+ 准生产环境的运行时应用监控\n+ 与云计算的天然集成\n\n#### 2、微服务\n2014， martin fowler\n\n微服务：架构风格（服务微化）\n\n一个应用应该是一组小型服务；可以通过\nHTTP的方式进行互通；\n\n单体应用：ALL IN ONE\n微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；\n\n#### 3、环境配置\n- jdk 1.8.0_40 \n- Spring boot 2.4.3\n- IDEA 2020.3\n- Maven 3.6.3\n- 给Maven的settigs.xml文件中的 </profiles>里加上如下配置\n\n```xml\n<profile>\n  <id>jdk-1.8</id>\n  <activation>\n    <activeByDefault>true</activeByDefault>\n    <jdk>1.8</jdk>\n  </activation>\n  <properties>\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n    <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\n  </properties>\n</profile>\n```\n#### 4、Spring Boot HelloWorld\n功能：\n浏览器发送hello请求，服务器请求并处理，响应HelloWorld字符串\n\n##### 4.1 初始化项目\n根据该网址创建项目：https://blog.51cto.com/yaowusheng/2565318\n\n不能使用RequestMapping等，在pom文件中添加如下 \n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n```\n\n##### 4.2 编写相关的Controller、Service \n\n(注意，contrller类所在包的级别，要在主程序类下。否则找不到)\n\n```java\npackage com.example.springbootdemo.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class HelloWorldController {\n    @ResponseBody\n    @RequestMapping(\"/hello\")\n    public String helloWorld() {\n        return \"hello\";\n    }\n}\n\n```\n##### 4.3 打包成可执行的jar包\n IDEA操作步骤\n\n在IDEA右侧，选择Maven-->展开自己的项目--》选择Lifecycle--》双击package\n-->运行完成之后，在左边项目目录中展开target-->里面有个jar包，可以使用java -jar运行该jar包。\n```xml\n<!--    这个插件，可以应用打包成一个可执行的jar包-->\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n#### 5、探究Hello World\n##### 5.1 POM文件\n###### 5.1.1 父项目\n```xml\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.4.3</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    \n    他的父项目是\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-dependencies</artifactId>\n        <version>2.4.3</version>\n    </parent>\n他来真正管理Spring Boot应用里面的所有依赖版本；\n```\n\nSpring Boot的版本仲裁中心；\n\n以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）\n\n###### 5.1.2 启动器\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n**Spring-boot-starter-web**:\n\n​\tSpring-boot-starter:spring-boot 场景控制器：帮我们导入了web模块正常运行所依赖的组件 ；\n\nSpring Boot将所有的功能场景都抽取出来 ，做成一个个的starters（启动器），只需要在项目里面引入 这些starter相关场景的所有依赖都会导入进行。要用什么功能就导入什么场景的启动器\n\n##### 5.2 主程序类，主入口类\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n/**\n@SpringBootApplication来标注一个主程序类，说明这是一个Spring Boot应用\n*/\n@SpringBootApplication\npublic class SpringbootdemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootdemoApplication.class, args);\n    }\n\n}\n  \n```\n\n**@SpringBootApplication** : Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\n```\n\n**@SpringBootConfiguration** : Spring Boot的配置类\n\t标注在某个类上，表示是一个Spring Boot的配置类；\n\n​\t**@Configuration**:配置类上来标注这个注解；\n\n​\t\t配置类------配置文件；配置类也是容器中的一个组件；@Component\n\n**@EnableAutoConfiguration**:开启自动配置功能；\n\n​\t以前我们需要配置的东西，Spring Boot帮我们自动配置；**@EnableAutoConfiguration**告诉Spring Boot开启自动配置功能；这样自动配置才能生效；\n\n```java\n@AutoConfigurationPackage\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration {\n```\n\n**@AutoConfigurationPackage**: 自动配置包\n\n​\t@**Import**({AutoConfigurationImportSelector.class})；\n\n​\tSpring的底层注解@import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；\n\n**将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；**\n\n​\t@Import(AutoConfigurationImportSelector.class) ;\n\n​\t\t给容器中导入组件？\n\n​\t\t**EnableAutoConfiguratioImportSelector**： 导入哪些组件的选择器；\n\n​\t\t将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；\n\n​\t\t会给容器中导入非常多的自动配置类（xxxAutoConfiguration）;就是给容器中导入这个场景所需要的所有组件，并配置好这些组件；\n\n\n\n有了自动配置类，免去了我们手动编写配置注入功能组件等工作；\n\n​\t\tSpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, classLoader);\n\nSpring Boot启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值 ,将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；\n\n\n\nJ2EE的整体整合解决方案和自动配置都在**spring-boot-autoconfigure-2.4.3.jar**;\n\n#### 6、使用Spring Initializer快速创建Spring Boot项目\n\n根据该网址创建项目：https://blog.51cto.com/yaowusheng/2565318\n\nIDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；\n\n选择我们需要的模块；向导会联网创建Spring Boot项目；\n\n默认生成的Spring Boot项目；\n\n- 主程序 已经写好，只需要写我们的逻辑\n- resources文件夹中目录结构\n  - static :保存所有的静态资源：js css images；\n  - templates:保存所有的模板页面：（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP页面）‘可以使用模板引擎（freemarker、thymeleaf）；\n  - application.properties: Spring Boot应用的配置文件；可以修改一些默认设置；\n\n\n\n### 二、Spring Boot配置\n\n#### 2.1 配置文件\n\nSpringBoot使用一个全局的配置文件，配置文件名是固定的;\n\n**如果同时配置，properties优先yml**\n\n- application.properties\n\n- application.yml\n\n  \n\n  配置文件的作用: 修改SpringBoot自动配置的默认值;\n\n  SpringBoot在底层都给我们自动配置好;\n\nYAML（YAML Ain`t Markup Language）\n\n\t+ YAML A Markup Language：是一个标记语言\n\t+ YAML isn`t Markup Language：不是一个标记语言\n\n标记语言：\n\n\t+ 以前的配置文件：大多都使用的是xxx.xml文件；\n\t+ YAML:以数据为中心，比json、xml更适合做配置文件；\n\t+ YAML:配置例子\n\n```yaml\nserver:\n\tport: 8080\n```\n\n\t+ XML:\n\n```xml\n<server>\n\t<port>8080</port>\n</server>\n```\n\n#### 2.2、YAML语法\n\n##### 2.2.1 基本语法\n\nk:(空格)v:表示一对键值对（空格必须有);\n以**空格**的缩进来控制层级关系;只要是左对齐的一列数据，都是同一个层级的\n\n```yml\nserver:\n\tport: 8081\n\tpath: /hello\n```\n\n属性和值也是大小写敏感;\n\n##### 2.2.2 值的写法\n\n###### 字面量︰普通的值（数字，字符串，布尔)\n​\tk: v: 字面直接来写;\n​\t\t字符串默认不用加上单引号或者双引号;\n\n​\t\t\t“” 双引号：不会转义字符串里面的特殊字符;特殊字符会作为本身想表示的意思\n\n​\t\t\t\tname: \"zhangsan \\n lisi\t输出: zhangsan 换行 lisi\n\n​\t\t\t’:单引号:会转义特殊字符，特殊字符最终只是一个普通的字符串数据\n​\t\t\t\tname: \"zhangsan \\n lisi\t输出: zhangsan in lisi\n\n###### 2.2.3 对象、Map（属性和值）（键值对）：\n\n​\tk: v :在下一行来写对象的属性和值的关系； 注意缩进\n\n​\t\t对象还是k: v的方式\n\n```yaml\nserver:\n\tport: 8081\n```\n\n行内写法：\n\n```\nserver: (port: 8081, path: /test)\n```\n\n###### 数组（List、Set）:\n\n用 - 值表示数组中的一个元素\n\n```yaml\npets:\n- cat\n- dog\n- pig\n```\n\n行内写法\n\n```yaml\npets: [cat, dog, pig]\n```\n\n#### 2.3 配置文件值注入\n\n##### 2.3.1 配置文件 xx.yaml\n\n```yaml\nperson:\n  name: xiaozhu\n  isDog: true\n  age: 18\n  data: 2020/12/1\n  map: {k1: yihao, k2: erhao}\n  list:\n    - qqq\n    - aaa\n    - ccc\n  dog:\n    name: jingmao\n    remarks: ni shi jing mao \n```\n\njavaBean:\n\n```java\n/*\n* 将配置文件中配置的每一个属性值，映射到这个组件中\n* @ConfigurationProperties : 告诉Spring Boot将本类中的所有属性和配置文件中相关的配置进行绑定；\n* prefix = \"person\" ，配置文件中哪个下面的所有属性一一映射*/\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    String name;\n    boolean isDog;\n    Integer age;\n    Date data;\n    Map<String, Object> map;\n    List<Object> list;\n    Dog dog;\n```\n\n导入配置文件处理器，编写配置就会有提示\n\n```xml\n<!--   导入配置文件处理器，配置文件进行绑定就会有提示     -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-configuration-processor</artifactId>\n    <optional>true</optional>\n</dependency>\n```\n\n##### 2.3.2使用properties，其他配置相同，properties文件如下\n\n```properties\nperson.name=张三\nperson.age=19\nperson.list=a,b,c\nperson.map.k1=aaa\nperson.map.k2=bbb\nperson.dog.name=xiaoha\nperson.dog.remarks=nihao\n# 如果遇到中文编码问题，在settings-->file Encodings--> Properties Files --> 选择UTF-8加上勾选Transparent native-to-ascii conversion\n```\n\n![1614492402407](D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\1614492402407.png)\n\n##### 2.3.3 @Value获取值和@ConfigurationProperties获取值比较\n\n|                      | @ConfiggurationProperties |   @Value   |\n| :------------------: | :-----------------------: | :--------: |\n|         功能         | 批量注入配置文件中的属性  | 一个个指定 |\n| 松散绑定（松散语法） |           支持            |   不支持   |\n|         SpEL         |          不支持           |    支持    |\n|    JSR303数据校验    |           支持            |   不支持   |\n|     复杂类型封装     |           支持            |   不支持   |\n\n配置文件yml还是properties他们都能获取到值；\n\n如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value\n\n如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties;\n\n##### 2.3.4 @PropertySource& @ImportResource\n\n@**PropertySOurce**加载指定的配置文件；\n\n```java\n/*\n* 将配置文件中配置的每一个属性值，映射到这个组件中\n* @ConfigurationProperties : 告诉Spring Boot将本类中的所有属性和配置文件中相关的配置进行绑定；默认全局文件获取值\n* prefix = \"person\" ，配置文件中哪个下面的所有属性一一映射*/\n@PropertySource(value = {\"classpath:person.properties\"})\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    String name;\n    boolean isDog;\n    Integer age;\n    Date data;\n    Map<String, Object> map;\n    List<Object> list;\n    Dog dog;\n```\n\n**@ImportResource**:导入Spring的配置文件，让配置文件里面的内容生效；\n\nSpring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；\n\n想让Spring的配置文件生效；**@ImportResource**标注在一个配置类上\n\n```java\n@ImportResource(locations = {\"classpath:beans.xml\"})\n导入spring的配置文件\n```\n\nSpringBoot推荐给容器中添加组件的方式：推荐使用全注解方式\n\n1、配置类====Spring配置文件\n\n2、使用@Bean给容器中添加组件\n\n```java\n/*\n    @Configuration:指明当前类是一个配置类；就是来替代之前的Spring配置文件\n    在配置文件中用<bean><bean/>标签添加组件\n */\n@Configuration\npublic class MyAppConfig {\n    // 将方法的返回值添加到容器中，容器中的这个组件默认的id就是方法名\n    @Bean\n    public HelloService helloService() {\n        System.out.println(\"helloService已添加\");\n        return new HelloService();\n    }\n}\n```\n\n#### 2.4、配置文件占位符\n\n##### 2.4.1、随机数\n\n```properties\nrandom.value\nrandom.int\n${random.long}\nrandom.int(10)\n{random.int[1024, 65536]}\n```\n\n##### 2.4.2、点位符获取之前配置的值，如果没有可以用：号来指定默认值\n\n```properties\nperson.name=张三${random.uuid}\nperson.age=${random.int}\nperson.list=a,b,c\nperson.map.k1=aaa\nperson.map.k2=bbb\nperson.dog.name=${person.wq: zhu}dog\n```\n\n#### 2.5、Profile,测试环境，正式环境配置\n\n##### 2.5.1、多Profile文件\n\n我们在主配置文件编写的时候，文件名可以是： application-{profile}.properties/yml\n\n![image-20210228152740784](D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228152740784.png)\n\n##### 2.5.2、yml支持多文档块方式\n\n```yaml\nspring:\n  profiles:\n    active: dev\n    \n---\nserver:\n  port: 8020\nspring:\n  profiles: dev\n  \n---\nserver:\n  port: 8030\nspring:\n  profiles: prod\n\n```\n\n\n\n##### 2.5.3、激活指定profile\n\n1、\n\n```properties\nspring.profiles.active=dev\n```\n\n2、命令行：\n\n```properties\njava -jar ***.jav --spring.profiles.active=dev\n可以直接在测试的时候，配置传入命令行参数\n```\n\n\n\n![image-20210228154415200](D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228154415200.png)\n\n3、虚拟机参数\n\n```properties\n-Dspring.profiles.active=dev\n```\n\n![image-20210228154312645](D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228154312645.png)\n\n#### 2.6、配置文件加载位置\n\n. spring boot启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件\n\n```properties\n# 配置项目的访问路径\nserver.context-path=/boot02\n```\n\n- file:./config/\n- file:./\n- classpath:/config/\n- classpath:/\n- 一以上是按照**优先级**从**高到低**的顺序，所有位置的文件都会被加载，**高优先级配置内容会覆盖低优先级配置内容**。\n- SpringBoot会从四个位置全部加载主配置文件；互补配置；\n- **我们也可以通过配置spring.config.location来改变默认配置；**\n\n项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指配置文件和默认加载的这些配置文件共同起作用形成互补配置；\n\n#### 2.7、外部配置加载顺序\n\nSpringBoot民可以从以下位置加载配置；优先级从高到低；高优先级的配置覆盖低优先级的配置\n\n1. 命令行参数\n\n```java\njava -jar *.jar --server.port=8087 --server.context-path=/abc\n// 多个配置用空格分开；--配置项=值\n```\n\n 2. 来自java:comp/env的JNDI属性\n\n 3. java系统属性（System.getProperties()）\n\n 4. 操作系统环境变量\n\n 5. RandomValuePropertySource配置的random.*属性值\n\n    **由jar包外向jar包内进行寻找；**\n\n    **优先加载带profile**\n\n 6. jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件\n\n 7. jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件\n\n    **再来加载不带profile**\n\n 8. jar包外部的application.properties或application.yml(不带spring.profile)配置文件\n\n 9. jar包内部的application.properties或application.yml(不带spring.profile)配置文件\n\n 10. @Configuration注解类上的@PropertySource\n\n 11. 通过SpringApplication.setDefaultProperties指定的默认属性\n\n#### 2.8、自动配置原理\n\n配置文件到底能写什么？怎么写？自动配置原理；\n\n配置文件能配置的属性参照 \n\n自动配置原理：\n\n1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能@EnableAutoCOnfiguration\n\n2）、@EnableAutoConfiguration作用；\n\n​\t利用EnableAutoConfigurationImportSelector给窗口中导入一些组件？\n\n​\t可以插件selectImports()方法的内容；\n\n​\tList<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);\n\n### 三、Spring Boot与日志\n\n### 四、Spring Boot与Web开发\n\n### 五、Spring Boot与Docker\n\n### 六、Spring Boot与数据访问\n\n### 七、Spring Boot启动配置原理\n\n### 八、Spring Boot自定义starters\n\n### 九、Spring Boot与缓存\n\n### 十、Spring Boot与消息\n\n### 十一、Spring Boot与检索\n\n### 十二、Spring Boot与任务\n\n### 十三、Spring Boot与安全\n\n### 十四、Spring Boot与分布式\n\n### 十五、Spring Boot与开发热部署\n\n### 十六、Spring Boot与监控管理","source":"_posts/SpringBoot.md","raw":"---\ntitle: SpringBoot \ndate: 2021-05-31 11:42:36\ntags: \n\t- Java\n\t- SpringBoot\ncategories: \n\t- SpringBoot\n\t\ncover: /images/banners/VCG41N1169192820.jpg\n---\n[toc]\n\n\n\n# Spring boot 2\n\n### 一、Boot入门\n\n**SpringBoot2核心技术与响应式编程: https://www.yuque.com/atguigu/springboot**\n\n#### 1、简介\n- 简化Spring应用开发的一个框架；\n- 整个Spring技术栈的一大整合；\n- J2EE开发的一站式解决方案；\n\n\nSpring Boot来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用\n\n**背景:**\n\nJ2EE笨重的开发、繁多的配置、低下的开发效率、复杂的部署流程、第三方技术集成难度大。\n\n**解决∶**\n\n\"Spring全家桶”时代。\nSpring Boot >J2EE一站式解决方案Spring Cloud→分布式整体解决方案\n\nUser -> Spring Boot -> Spring\n\n**优点**\n+ 快速创建独立运行的Spring项目以及主流框架集成\n+ 使用嵌入式的Servlet容器，应用无需打成WAR包\n+ starters自动依赖与版本控制\n+ 大量的自动配置，简化开发，也可修改默认值\n+ 无需配置XML，无代码生成，开箱即用\n+ 准生产环境的运行时应用监控\n+ 与云计算的天然集成\n\n#### 2、微服务\n2014， martin fowler\n\n微服务：架构风格（服务微化）\n\n一个应用应该是一组小型服务；可以通过\nHTTP的方式进行互通；\n\n单体应用：ALL IN ONE\n微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；\n\n#### 3、环境配置\n- jdk 1.8.0_40 \n- Spring boot 2.4.3\n- IDEA 2020.3\n- Maven 3.6.3\n- 给Maven的settigs.xml文件中的 </profiles>里加上如下配置\n\n```xml\n<profile>\n  <id>jdk-1.8</id>\n  <activation>\n    <activeByDefault>true</activeByDefault>\n    <jdk>1.8</jdk>\n  </activation>\n  <properties>\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n    <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\n  </properties>\n</profile>\n```\n#### 4、Spring Boot HelloWorld\n功能：\n浏览器发送hello请求，服务器请求并处理，响应HelloWorld字符串\n\n##### 4.1 初始化项目\n根据该网址创建项目：https://blog.51cto.com/yaowusheng/2565318\n\n不能使用RequestMapping等，在pom文件中添加如下 \n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n```\n\n##### 4.2 编写相关的Controller、Service \n\n(注意，contrller类所在包的级别，要在主程序类下。否则找不到)\n\n```java\npackage com.example.springbootdemo.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class HelloWorldController {\n    @ResponseBody\n    @RequestMapping(\"/hello\")\n    public String helloWorld() {\n        return \"hello\";\n    }\n}\n\n```\n##### 4.3 打包成可执行的jar包\n IDEA操作步骤\n\n在IDEA右侧，选择Maven-->展开自己的项目--》选择Lifecycle--》双击package\n-->运行完成之后，在左边项目目录中展开target-->里面有个jar包，可以使用java -jar运行该jar包。\n```xml\n<!--    这个插件，可以应用打包成一个可执行的jar包-->\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n#### 5、探究Hello World\n##### 5.1 POM文件\n###### 5.1.1 父项目\n```xml\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.4.3</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    \n    他的父项目是\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-dependencies</artifactId>\n        <version>2.4.3</version>\n    </parent>\n他来真正管理Spring Boot应用里面的所有依赖版本；\n```\n\nSpring Boot的版本仲裁中心；\n\n以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）\n\n###### 5.1.2 启动器\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n**Spring-boot-starter-web**:\n\n​\tSpring-boot-starter:spring-boot 场景控制器：帮我们导入了web模块正常运行所依赖的组件 ；\n\nSpring Boot将所有的功能场景都抽取出来 ，做成一个个的starters（启动器），只需要在项目里面引入 这些starter相关场景的所有依赖都会导入进行。要用什么功能就导入什么场景的启动器\n\n##### 5.2 主程序类，主入口类\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n/**\n@SpringBootApplication来标注一个主程序类，说明这是一个Spring Boot应用\n*/\n@SpringBootApplication\npublic class SpringbootdemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootdemoApplication.class, args);\n    }\n\n}\n  \n```\n\n**@SpringBootApplication** : Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\n```\n\n**@SpringBootConfiguration** : Spring Boot的配置类\n\t标注在某个类上，表示是一个Spring Boot的配置类；\n\n​\t**@Configuration**:配置类上来标注这个注解；\n\n​\t\t配置类------配置文件；配置类也是容器中的一个组件；@Component\n\n**@EnableAutoConfiguration**:开启自动配置功能；\n\n​\t以前我们需要配置的东西，Spring Boot帮我们自动配置；**@EnableAutoConfiguration**告诉Spring Boot开启自动配置功能；这样自动配置才能生效；\n\n```java\n@AutoConfigurationPackage\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration {\n```\n\n**@AutoConfigurationPackage**: 自动配置包\n\n​\t@**Import**({AutoConfigurationImportSelector.class})；\n\n​\tSpring的底层注解@import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；\n\n**将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；**\n\n​\t@Import(AutoConfigurationImportSelector.class) ;\n\n​\t\t给容器中导入组件？\n\n​\t\t**EnableAutoConfiguratioImportSelector**： 导入哪些组件的选择器；\n\n​\t\t将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；\n\n​\t\t会给容器中导入非常多的自动配置类（xxxAutoConfiguration）;就是给容器中导入这个场景所需要的所有组件，并配置好这些组件；\n\n\n\n有了自动配置类，免去了我们手动编写配置注入功能组件等工作；\n\n​\t\tSpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, classLoader);\n\nSpring Boot启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值 ,将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；\n\n\n\nJ2EE的整体整合解决方案和自动配置都在**spring-boot-autoconfigure-2.4.3.jar**;\n\n#### 6、使用Spring Initializer快速创建Spring Boot项目\n\n根据该网址创建项目：https://blog.51cto.com/yaowusheng/2565318\n\nIDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；\n\n选择我们需要的模块；向导会联网创建Spring Boot项目；\n\n默认生成的Spring Boot项目；\n\n- 主程序 已经写好，只需要写我们的逻辑\n- resources文件夹中目录结构\n  - static :保存所有的静态资源：js css images；\n  - templates:保存所有的模板页面：（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP页面）‘可以使用模板引擎（freemarker、thymeleaf）；\n  - application.properties: Spring Boot应用的配置文件；可以修改一些默认设置；\n\n\n\n### 二、Spring Boot配置\n\n#### 2.1 配置文件\n\nSpringBoot使用一个全局的配置文件，配置文件名是固定的;\n\n**如果同时配置，properties优先yml**\n\n- application.properties\n\n- application.yml\n\n  \n\n  配置文件的作用: 修改SpringBoot自动配置的默认值;\n\n  SpringBoot在底层都给我们自动配置好;\n\nYAML（YAML Ain`t Markup Language）\n\n\t+ YAML A Markup Language：是一个标记语言\n\t+ YAML isn`t Markup Language：不是一个标记语言\n\n标记语言：\n\n\t+ 以前的配置文件：大多都使用的是xxx.xml文件；\n\t+ YAML:以数据为中心，比json、xml更适合做配置文件；\n\t+ YAML:配置例子\n\n```yaml\nserver:\n\tport: 8080\n```\n\n\t+ XML:\n\n```xml\n<server>\n\t<port>8080</port>\n</server>\n```\n\n#### 2.2、YAML语法\n\n##### 2.2.1 基本语法\n\nk:(空格)v:表示一对键值对（空格必须有);\n以**空格**的缩进来控制层级关系;只要是左对齐的一列数据，都是同一个层级的\n\n```yml\nserver:\n\tport: 8081\n\tpath: /hello\n```\n\n属性和值也是大小写敏感;\n\n##### 2.2.2 值的写法\n\n###### 字面量︰普通的值（数字，字符串，布尔)\n​\tk: v: 字面直接来写;\n​\t\t字符串默认不用加上单引号或者双引号;\n\n​\t\t\t“” 双引号：不会转义字符串里面的特殊字符;特殊字符会作为本身想表示的意思\n\n​\t\t\t\tname: \"zhangsan \\n lisi\t输出: zhangsan 换行 lisi\n\n​\t\t\t’:单引号:会转义特殊字符，特殊字符最终只是一个普通的字符串数据\n​\t\t\t\tname: \"zhangsan \\n lisi\t输出: zhangsan in lisi\n\n###### 2.2.3 对象、Map（属性和值）（键值对）：\n\n​\tk: v :在下一行来写对象的属性和值的关系； 注意缩进\n\n​\t\t对象还是k: v的方式\n\n```yaml\nserver:\n\tport: 8081\n```\n\n行内写法：\n\n```\nserver: (port: 8081, path: /test)\n```\n\n###### 数组（List、Set）:\n\n用 - 值表示数组中的一个元素\n\n```yaml\npets:\n- cat\n- dog\n- pig\n```\n\n行内写法\n\n```yaml\npets: [cat, dog, pig]\n```\n\n#### 2.3 配置文件值注入\n\n##### 2.3.1 配置文件 xx.yaml\n\n```yaml\nperson:\n  name: xiaozhu\n  isDog: true\n  age: 18\n  data: 2020/12/1\n  map: {k1: yihao, k2: erhao}\n  list:\n    - qqq\n    - aaa\n    - ccc\n  dog:\n    name: jingmao\n    remarks: ni shi jing mao \n```\n\njavaBean:\n\n```java\n/*\n* 将配置文件中配置的每一个属性值，映射到这个组件中\n* @ConfigurationProperties : 告诉Spring Boot将本类中的所有属性和配置文件中相关的配置进行绑定；\n* prefix = \"person\" ，配置文件中哪个下面的所有属性一一映射*/\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    String name;\n    boolean isDog;\n    Integer age;\n    Date data;\n    Map<String, Object> map;\n    List<Object> list;\n    Dog dog;\n```\n\n导入配置文件处理器，编写配置就会有提示\n\n```xml\n<!--   导入配置文件处理器，配置文件进行绑定就会有提示     -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-configuration-processor</artifactId>\n    <optional>true</optional>\n</dependency>\n```\n\n##### 2.3.2使用properties，其他配置相同，properties文件如下\n\n```properties\nperson.name=张三\nperson.age=19\nperson.list=a,b,c\nperson.map.k1=aaa\nperson.map.k2=bbb\nperson.dog.name=xiaoha\nperson.dog.remarks=nihao\n# 如果遇到中文编码问题，在settings-->file Encodings--> Properties Files --> 选择UTF-8加上勾选Transparent native-to-ascii conversion\n```\n\n![1614492402407](D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\1614492402407.png)\n\n##### 2.3.3 @Value获取值和@ConfigurationProperties获取值比较\n\n|                      | @ConfiggurationProperties |   @Value   |\n| :------------------: | :-----------------------: | :--------: |\n|         功能         | 批量注入配置文件中的属性  | 一个个指定 |\n| 松散绑定（松散语法） |           支持            |   不支持   |\n|         SpEL         |          不支持           |    支持    |\n|    JSR303数据校验    |           支持            |   不支持   |\n|     复杂类型封装     |           支持            |   不支持   |\n\n配置文件yml还是properties他们都能获取到值；\n\n如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value\n\n如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties;\n\n##### 2.3.4 @PropertySource& @ImportResource\n\n@**PropertySOurce**加载指定的配置文件；\n\n```java\n/*\n* 将配置文件中配置的每一个属性值，映射到这个组件中\n* @ConfigurationProperties : 告诉Spring Boot将本类中的所有属性和配置文件中相关的配置进行绑定；默认全局文件获取值\n* prefix = \"person\" ，配置文件中哪个下面的所有属性一一映射*/\n@PropertySource(value = {\"classpath:person.properties\"})\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    String name;\n    boolean isDog;\n    Integer age;\n    Date data;\n    Map<String, Object> map;\n    List<Object> list;\n    Dog dog;\n```\n\n**@ImportResource**:导入Spring的配置文件，让配置文件里面的内容生效；\n\nSpring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；\n\n想让Spring的配置文件生效；**@ImportResource**标注在一个配置类上\n\n```java\n@ImportResource(locations = {\"classpath:beans.xml\"})\n导入spring的配置文件\n```\n\nSpringBoot推荐给容器中添加组件的方式：推荐使用全注解方式\n\n1、配置类====Spring配置文件\n\n2、使用@Bean给容器中添加组件\n\n```java\n/*\n    @Configuration:指明当前类是一个配置类；就是来替代之前的Spring配置文件\n    在配置文件中用<bean><bean/>标签添加组件\n */\n@Configuration\npublic class MyAppConfig {\n    // 将方法的返回值添加到容器中，容器中的这个组件默认的id就是方法名\n    @Bean\n    public HelloService helloService() {\n        System.out.println(\"helloService已添加\");\n        return new HelloService();\n    }\n}\n```\n\n#### 2.4、配置文件占位符\n\n##### 2.4.1、随机数\n\n```properties\nrandom.value\nrandom.int\n${random.long}\nrandom.int(10)\n{random.int[1024, 65536]}\n```\n\n##### 2.4.2、点位符获取之前配置的值，如果没有可以用：号来指定默认值\n\n```properties\nperson.name=张三${random.uuid}\nperson.age=${random.int}\nperson.list=a,b,c\nperson.map.k1=aaa\nperson.map.k2=bbb\nperson.dog.name=${person.wq: zhu}dog\n```\n\n#### 2.5、Profile,测试环境，正式环境配置\n\n##### 2.5.1、多Profile文件\n\n我们在主配置文件编写的时候，文件名可以是： application-{profile}.properties/yml\n\n![image-20210228152740784](D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228152740784.png)\n\n##### 2.5.2、yml支持多文档块方式\n\n```yaml\nspring:\n  profiles:\n    active: dev\n    \n---\nserver:\n  port: 8020\nspring:\n  profiles: dev\n  \n---\nserver:\n  port: 8030\nspring:\n  profiles: prod\n\n```\n\n\n\n##### 2.5.3、激活指定profile\n\n1、\n\n```properties\nspring.profiles.active=dev\n```\n\n2、命令行：\n\n```properties\njava -jar ***.jav --spring.profiles.active=dev\n可以直接在测试的时候，配置传入命令行参数\n```\n\n\n\n![image-20210228154415200](D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228154415200.png)\n\n3、虚拟机参数\n\n```properties\n-Dspring.profiles.active=dev\n```\n\n![image-20210228154312645](D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228154312645.png)\n\n#### 2.6、配置文件加载位置\n\n. spring boot启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件\n\n```properties\n# 配置项目的访问路径\nserver.context-path=/boot02\n```\n\n- file:./config/\n- file:./\n- classpath:/config/\n- classpath:/\n- 一以上是按照**优先级**从**高到低**的顺序，所有位置的文件都会被加载，**高优先级配置内容会覆盖低优先级配置内容**。\n- SpringBoot会从四个位置全部加载主配置文件；互补配置；\n- **我们也可以通过配置spring.config.location来改变默认配置；**\n\n项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指配置文件和默认加载的这些配置文件共同起作用形成互补配置；\n\n#### 2.7、外部配置加载顺序\n\nSpringBoot民可以从以下位置加载配置；优先级从高到低；高优先级的配置覆盖低优先级的配置\n\n1. 命令行参数\n\n```java\njava -jar *.jar --server.port=8087 --server.context-path=/abc\n// 多个配置用空格分开；--配置项=值\n```\n\n 2. 来自java:comp/env的JNDI属性\n\n 3. java系统属性（System.getProperties()）\n\n 4. 操作系统环境变量\n\n 5. RandomValuePropertySource配置的random.*属性值\n\n    **由jar包外向jar包内进行寻找；**\n\n    **优先加载带profile**\n\n 6. jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件\n\n 7. jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件\n\n    **再来加载不带profile**\n\n 8. jar包外部的application.properties或application.yml(不带spring.profile)配置文件\n\n 9. jar包内部的application.properties或application.yml(不带spring.profile)配置文件\n\n 10. @Configuration注解类上的@PropertySource\n\n 11. 通过SpringApplication.setDefaultProperties指定的默认属性\n\n#### 2.8、自动配置原理\n\n配置文件到底能写什么？怎么写？自动配置原理；\n\n配置文件能配置的属性参照 \n\n自动配置原理：\n\n1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能@EnableAutoCOnfiguration\n\n2）、@EnableAutoConfiguration作用；\n\n​\t利用EnableAutoConfigurationImportSelector给窗口中导入一些组件？\n\n​\t可以插件selectImports()方法的内容；\n\n​\tList<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);\n\n### 三、Spring Boot与日志\n\n### 四、Spring Boot与Web开发\n\n### 五、Spring Boot与Docker\n\n### 六、Spring Boot与数据访问\n\n### 七、Spring Boot启动配置原理\n\n### 八、Spring Boot自定义starters\n\n### 九、Spring Boot与缓存\n\n### 十、Spring Boot与消息\n\n### 十一、Spring Boot与检索\n\n### 十二、Spring Boot与任务\n\n### 十三、Spring Boot与安全\n\n### 十四、Spring Boot与分布式\n\n### 十五、Spring Boot与开发热部署\n\n### 十六、Spring Boot与监控管理","slug":"SpringBoot","published":1,"updated":"2021-05-31T05:59:41.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpc7de2u0000g4ufeaqadyjx","content":"<p>[toc]</p>\n<h1 id=\"Spring-boot-2\"><a href=\"#Spring-boot-2\" class=\"headerlink\" title=\"Spring boot 2\"></a>Spring boot 2</h1><h3 id=\"一、Boot入门\"><a href=\"#一、Boot入门\" class=\"headerlink\" title=\"一、Boot入门\"></a>一、Boot入门</h3><p><strong>SpringBoot2核心技术与响应式编程: <a href=\"https://www.yuque.com/atguigu/springboot\">https://www.yuque.com/atguigu/springboot</a></strong></p>\n<h4 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h4><ul>\n<li>简化Spring应用开发的一个框架；</li>\n<li>整个Spring技术栈的一大整合；</li>\n<li>J2EE开发的一站式解决方案；</li>\n</ul>\n<p>Spring Boot来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用</p>\n<p><strong>背景:</strong></p>\n<p>J2EE笨重的开发、繁多的配置、低下的开发效率、复杂的部署流程、第三方技术集成难度大。</p>\n<p><strong>解决∶</strong></p>\n<p>“Spring全家桶”时代。<br>Spring Boot &gt;J2EE一站式解决方案Spring Cloud→分布式整体解决方案</p>\n<p>User -&gt; Spring Boot -&gt; Spring</p>\n<p><strong>优点</strong></p>\n<ul>\n<li>快速创建独立运行的Spring项目以及主流框架集成</li>\n<li>使用嵌入式的Servlet容器，应用无需打成WAR包</li>\n<li>starters自动依赖与版本控制</li>\n<li>大量的自动配置，简化开发，也可修改默认值</li>\n<li>无需配置XML，无代码生成，开箱即用</li>\n<li>准生产环境的运行时应用监控</li>\n<li>与云计算的天然集成</li>\n</ul>\n<h4 id=\"2、微服务\"><a href=\"#2、微服务\" class=\"headerlink\" title=\"2、微服务\"></a>2、微服务</h4><p>2014， martin fowler</p>\n<p>微服务：架构风格（服务微化）</p>\n<p>一个应用应该是一组小型服务；可以通过<br>HTTP的方式进行互通；</p>\n<p>单体应用：ALL IN ONE<br>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>\n<h4 id=\"3、环境配置\"><a href=\"#3、环境配置\" class=\"headerlink\" title=\"3、环境配置\"></a>3、环境配置</h4><ul>\n<li>jdk 1.8.0_40 </li>\n<li>Spring boot 2.4.3</li>\n<li>IDEA 2020.3</li>\n<li>Maven 3.6.3</li>\n<li>给Maven的settigs.xml文件中的 </profiles>里加上如下配置</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>jdk-1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activation</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeByDefault</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeByDefault</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jdk</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jdk</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activation</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.compilerVersion</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.compilerVersion</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4、Spring-Boot-HelloWorld\"><a href=\"#4、Spring-Boot-HelloWorld\" class=\"headerlink\" title=\"4、Spring Boot HelloWorld\"></a>4、Spring Boot HelloWorld</h4><p>功能：<br>浏览器发送hello请求，服务器请求并处理，响应HelloWorld字符串</p>\n<h5 id=\"4-1-初始化项目\"><a href=\"#4-1-初始化项目\" class=\"headerlink\" title=\"4.1 初始化项目\"></a>4.1 初始化项目</h5><p>根据该网址创建项目：<a href=\"https://blog.51cto.com/yaowusheng/2565318\">https://blog.51cto.com/yaowusheng/2565318</a></p>\n<p>不能使用RequestMapping等，在pom文件中添加如下 </p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"4-2-编写相关的Controller、Service\"><a href=\"#4-2-编写相关的Controller、Service\" class=\"headerlink\" title=\"4.2 编写相关的Controller、Service\"></a>4.2 编写相关的Controller、Service</h5><p>(注意，contrller类所在包的级别，要在主程序类下。否则找不到)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springbootdemo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBody</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@ResponseBody</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">helloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"4-3-打包成可执行的jar包\"><a href=\"#4-3-打包成可执行的jar包\" class=\"headerlink\" title=\"4.3 打包成可执行的jar包\"></a>4.3 打包成可执行的jar包</h5><p> IDEA操作步骤</p>\n<p>在IDEA右侧，选择Maven–&gt;展开自己的项目–》选择Lifecycle–》双击package<br>–&gt;运行完成之后，在左边项目目录中展开target–&gt;里面有个jar包，可以使用java -jar运行该jar包。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--    这个插件，可以应用打包成一个可执行的jar包--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"5、探究Hello-World\"><a href=\"#5、探究Hello-World\" class=\"headerlink\" title=\"5、探究Hello World\"></a>5、探究Hello World</h4><h5 id=\"5-1-POM文件\"><a href=\"#5-1-POM文件\" class=\"headerlink\" title=\"5.1 POM文件\"></a>5.1 POM文件</h5><h6 id=\"5-1-1-父项目\"><a href=\"#5-1-1-父项目\" class=\"headerlink\" title=\"5.1.1 父项目\"></a>5.1.1 父项目</h6><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span>\n    \n    他的父项目是\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span>\n他来真正管理Spring Boot应用里面的所有依赖版本；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Spring Boot的版本仲裁中心；</p>\n<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>\n<h6 id=\"5-1-2-启动器\"><a href=\"#5-1-2-启动器\" class=\"headerlink\" title=\"5.1.2 启动器\"></a>5.1.2 启动器</h6><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Spring-boot-starter-web</strong>:</p>\n<p>​    Spring-boot-starter:spring-boot 场景控制器：帮我们导入了web模块正常运行所依赖的组件 ；</p>\n<p>Spring Boot将所有的功能场景都抽取出来 ，做成一个个的starters（启动器），只需要在项目里面引入 这些starter相关场景的所有依赖都会导入进行。要用什么功能就导入什么场景的启动器</p>\n<h5 id=\"5-2-主程序类，主入口类\"><a href=\"#5-2-主程序类，主入口类\" class=\"headerlink\" title=\"5.2 主程序类，主入口类\"></a>5.2 主程序类，主入口类</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n@SpringBootApplication来标注一个主程序类，说明这是一个Spring Boot应用\n*/</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringbootdemoApplication</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringbootdemoApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>@SpringBootApplication</strong> : Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@SpringBootConfiguration</span>\n<span class=\"token annotation punctuation\">@EnableAutoConfiguration</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>\n    excludeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>\n    type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span>\n    classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">TypeExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>\n    type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span>\n    classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AutoConfigurationExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>@SpringBootConfiguration</strong> : Spring Boot的配置类<br>    标注在某个类上，表示是一个Spring Boot的配置类；</p>\n<p>​    <strong>@Configuration</strong>:配置类上来标注这个注解；</p>\n<p>​        配置类——配置文件；配置类也是容器中的一个组件；@Component</p>\n<p><strong>@EnableAutoConfiguration</strong>:开启自动配置功能；</p>\n<p>​    以前我们需要配置的东西，Spring Boot帮我们自动配置；**@EnableAutoConfiguration**告诉Spring Boot开启自动配置功能；这样自动配置才能生效；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AutoConfigurationPackage</span>\n<span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AutoConfigurationImportSelector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">EnableAutoConfiguration</span> <span class=\"token punctuation\">&#123;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>@AutoConfigurationPackage</strong>: 自动配置包</p>\n<p>​    @<strong>Import</strong>({AutoConfigurationImportSelector.class})；</p>\n<p>​    Spring的底层注解@import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p>\n<p><strong>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；</strong></p>\n<p>​    @Import(AutoConfigurationImportSelector.class) ;</p>\n<p>​        给容器中导入组件？</p>\n<p>​        <strong>EnableAutoConfiguratioImportSelector</strong>： 导入哪些组件的选择器；</p>\n<p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>\n<p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）;就是给容器中导入这个场景所需要的所有组件，并配置好这些组件；</p>\n<p>有了自动配置类，免去了我们手动编写配置注入功能组件等工作；</p>\n<p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, classLoader);</p>\n<p>Spring Boot启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值 ,将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；</p>\n<p>J2EE的整体整合解决方案和自动配置都在<strong>spring-boot-autoconfigure-2.4.3.jar</strong>;</p>\n<h4 id=\"6、使用Spring-Initializer快速创建Spring-Boot项目\"><a href=\"#6、使用Spring-Initializer快速创建Spring-Boot项目\" class=\"headerlink\" title=\"6、使用Spring Initializer快速创建Spring Boot项目\"></a>6、使用Spring Initializer快速创建Spring Boot项目</h4><p>根据该网址创建项目：<a href=\"https://blog.51cto.com/yaowusheng/2565318\">https://blog.51cto.com/yaowusheng/2565318</a></p>\n<p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p>\n<p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p>\n<p>默认生成的Spring Boot项目；</p>\n<ul>\n<li>主程序 已经写好，只需要写我们的逻辑</li>\n<li>resources文件夹中目录结构<ul>\n<li>static :保存所有的静态资源：js css images；</li>\n<li>templates:保存所有的模板页面：（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP页面）‘可以使用模板引擎（freemarker、thymeleaf）；</li>\n<li>application.properties: Spring Boot应用的配置文件；可以修改一些默认设置；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、Spring-Boot配置\"><a href=\"#二、Spring-Boot配置\" class=\"headerlink\" title=\"二、Spring Boot配置\"></a>二、Spring Boot配置</h3><h4 id=\"2-1-配置文件\"><a href=\"#2-1-配置文件\" class=\"headerlink\" title=\"2.1 配置文件\"></a>2.1 配置文件</h4><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的;</p>\n<p><strong>如果同时配置，properties优先yml</strong></p>\n<ul>\n<li><p>application.properties</p>\n</li>\n<li><p>application.yml</p>\n<p>配置文件的作用: 修改SpringBoot自动配置的默认值;</p>\n<p>SpringBoot在底层都给我们自动配置好;</p>\n</li>\n</ul>\n<p>YAML（YAML Ain`t Markup Language）</p>\n<pre><code>+ YAML A Markup Language：是一个标记语言\n+ YAML isn`t Markup Language：不是一个标记语言\n</code></pre>\n<p>标记语言：</p>\n<pre><code>+ 以前的配置文件：大多都使用的是xxx.xml文件；\n+ YAML:以数据为中心，比json、xml更适合做配置文件；\n+ YAML:配置例子\n</code></pre>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre><code>+ XML:\n</code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>server</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>8080<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>server</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2、YAML语法\"><a href=\"#2-2、YAML语法\" class=\"headerlink\" title=\"2.2、YAML语法\"></a>2.2、YAML语法</h4><h5 id=\"2-2-1-基本语法\"><a href=\"#2-2-1-基本语法\" class=\"headerlink\" title=\"2.2.1 基本语法\"></a>2.2.1 基本语法</h5><p>k:(空格)v:表示一对键值对（空格必须有);<br>以<strong>空格</strong>的缩进来控制层级关系;只要是左对齐的一列数据，都是同一个层级的</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8081</span>\n\t<span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /hello<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>属性和值也是大小写敏感;</p>\n<h5 id=\"2-2-2-值的写法\"><a href=\"#2-2-2-值的写法\" class=\"headerlink\" title=\"2.2.2 值的写法\"></a>2.2.2 值的写法</h5><h6 id=\"字面量︰普通的值（数字，字符串，布尔\"><a href=\"#字面量︰普通的值（数字，字符串，布尔\" class=\"headerlink\" title=\"字面量︰普通的值（数字，字符串，布尔)\"></a>字面量︰普通的值（数字，字符串，布尔)</h6><p>​    k: v: 字面直接来写;<br>​        字符串默认不用加上单引号或者双引号;</p>\n<p>​            “” 双引号：不会转义字符串里面的特殊字符;特殊字符会作为本身想表示的意思</p>\n<p>​                name: “zhangsan \\n lisi    输出: zhangsan 换行 lisi</p>\n<p>​            ’:单引号:会转义特殊字符，特殊字符最终只是一个普通的字符串数据<br>​                name: “zhangsan \\n lisi    输出: zhangsan in lisi</p>\n<h6 id=\"2-2-3-对象、Map（属性和值）（键值对）：\"><a href=\"#2-2-3-对象、Map（属性和值）（键值对）：\" class=\"headerlink\" title=\"2.2.3 对象、Map（属性和值）（键值对）：\"></a>2.2.3 对象、Map（属性和值）（键值对）：</h6><p>​    k: v :在下一行来写对象的属性和值的关系； 注意缩进</p>\n<p>​        对象还是k: v的方式</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8081</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>行内写法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server: (port: 8081, path: &#x2F;test)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h6 id=\"数组（List、Set）\"><a href=\"#数组（List、Set）\" class=\"headerlink\" title=\"数组（List、Set）:\"></a>数组（List、Set）:</h6><p>用 - 值表示数组中的一个元素</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">pets</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> cat\n<span class=\"token punctuation\">-</span> dog\n<span class=\"token punctuation\">-</span> pig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>行内写法</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">pets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>cat<span class=\"token punctuation\">,</span> dog<span class=\"token punctuation\">,</span> pig<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-3-配置文件值注入\"><a href=\"#2-3-配置文件值注入\" class=\"headerlink\" title=\"2.3 配置文件值注入\"></a>2.3 配置文件值注入</h4><h5 id=\"2-3-1-配置文件-xx-yaml\"><a href=\"#2-3-1-配置文件-xx-yaml\" class=\"headerlink\" title=\"2.3.1 配置文件 xx.yaml\"></a>2.3.1 配置文件 xx.yaml</h5><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">person</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> xiaozhu\n  <span class=\"token key atrule\">isDog</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18</span>\n  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span> 2020/12/1\n  <span class=\"token key atrule\">map</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">k1</span><span class=\"token punctuation\">:</span> yihao<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">k2</span><span class=\"token punctuation\">:</span> erhao<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> qqq\n    <span class=\"token punctuation\">-</span> aaa\n    <span class=\"token punctuation\">-</span> ccc\n  <span class=\"token key atrule\">dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jingmao\n    <span class=\"token key atrule\">remarks</span><span class=\"token punctuation\">:</span> ni shi jing mao <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>javaBean:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n* 将配置文件中配置的每一个属性值，映射到这个组件中\n* @ConfigurationProperties : 告诉Spring Boot将本类中的所有属性和配置文件中相关的配置进行绑定；\n* prefix = \"person\" ，配置文件中哪个下面的所有属性一一映射*/</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"person\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> isDog<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>导入配置文件处理器，编写配置就会有提示</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--   导入配置文件处理器，配置文件进行绑定就会有提示     --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-configuration-processor<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2-3-2使用properties，其他配置相同，properties文件如下\"><a href=\"#2-3-2使用properties，其他配置相同，properties文件如下\" class=\"headerlink\" title=\"2.3.2使用properties，其他配置相同，properties文件如下\"></a>2.3.2使用properties，其他配置相同，properties文件如下</h5><pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">person.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">张三</span>\n<span class=\"token attr-name\">person.age</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">19</span>\n<span class=\"token attr-name\">person.list</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">a,b,c</span>\n<span class=\"token attr-name\">person.map.k1</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">aaa</span>\n<span class=\"token attr-name\">person.map.k2</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">bbb</span>\n<span class=\"token attr-name\">person.dog.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xiaoha</span>\n<span class=\"token attr-name\">person.dog.remarks</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">nihao</span>\n<span class=\"token comment\"># 如果遇到中文编码问题，在settings-->file Encodings--> Properties Files --> 选择UTF-8加上勾选Transparent native-to-ascii conversion</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\1614492402407.png\" alt=\"1614492402407\"></p>\n<h5 id=\"2-3-3-Value获取值和-ConfigurationProperties获取值比较\"><a href=\"#2-3-3-Value获取值和-ConfigurationProperties获取值比较\" class=\"headerlink\" title=\"2.3.3 @Value获取值和@ConfigurationProperties获取值比较\"></a>2.3.3 @Value获取值和@ConfigurationProperties获取值比较</h5><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">@ConfiggurationProperties</th>\n<th align=\"center\">@Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">功能</td>\n<td align=\"center\">批量注入配置文件中的属性</td>\n<td align=\"center\">一个个指定</td>\n</tr>\n<tr>\n<td align=\"center\">松散绑定（松散语法）</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">SpEL</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">JSR303数据校验</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">复杂类型封装</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n</tbody></table>\n<p>配置文件yml还是properties他们都能获取到值；</p>\n<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value</p>\n<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties;</p>\n<h5 id=\"2-3-4-PropertySource-amp-ImportResource\"><a href=\"#2-3-4-PropertySource-amp-ImportResource\" class=\"headerlink\" title=\"2.3.4 @PropertySource&amp; @ImportResource\"></a>2.3.4 @PropertySource&amp; @ImportResource</h5><p>@<strong>PropertySOurce</strong>加载指定的配置文件；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n* 将配置文件中配置的每一个属性值，映射到这个组件中\n* @ConfigurationProperties : 告诉Spring Boot将本类中的所有属性和配置文件中相关的配置进行绑定；默认全局文件获取值\n* prefix = \"person\" ，配置文件中哪个下面的所有属性一一映射*/</span>\n<span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"classpath:person.properties\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"person\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> isDog<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>@ImportResource</strong>:导入Spring的配置文件，让配置文件里面的内容生效；</p>\n<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>\n<p>想让Spring的配置文件生效；**@ImportResource**标注在一个配置类上</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ImportResource</span><span class=\"token punctuation\">(</span>locations <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"classpath:beans.xml\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n导入spring的配置文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>SpringBoot推荐给容器中添加组件的方式：推荐使用全注解方式</p>\n<p>1、配置类====Spring配置文件</p>\n<p>2、使用@Bean给容器中添加组件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n    @Configuration:指明当前类是一个配置类；就是来替代之前的Spring配置文件\n    在配置文件中用&lt;bean>&lt;bean/>标签添加组件\n */</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAppConfig</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 将方法的返回值添加到容器中，容器中的这个组件默认的id就是方法名</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HelloService</span> <span class=\"token function\">helloService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloService已添加\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-4、配置文件占位符\"><a href=\"#2-4、配置文件占位符\" class=\"headerlink\" title=\"2.4、配置文件占位符\"></a>2.4、配置文件占位符</h4><h5 id=\"2-4-1、随机数\"><a href=\"#2-4-1、随机数\" class=\"headerlink\" title=\"2.4.1、随机数\"></a>2.4.1、随机数</h5><pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">random.value\nrandom.int\n$&#123;random.long&#125;\nrandom.int(10)\n<span class=\"token attr-name\">&#123;random.int[1024,</span> <span class=\"token attr-value\">65536]&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2-4-2、点位符获取之前配置的值，如果没有可以用：号来指定默认值\"><a href=\"#2-4-2、点位符获取之前配置的值，如果没有可以用：号来指定默认值\" class=\"headerlink\" title=\"2.4.2、点位符获取之前配置的值，如果没有可以用：号来指定默认值\"></a>2.4.2、点位符获取之前配置的值，如果没有可以用：号来指定默认值</h5><pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">person.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">张三$&#123;random.uuid&#125;</span>\n<span class=\"token attr-name\">person.age</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">$&#123;random.int&#125;</span>\n<span class=\"token attr-name\">person.list</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">a,b,c</span>\n<span class=\"token attr-name\">person.map.k1</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">aaa</span>\n<span class=\"token attr-name\">person.map.k2</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">bbb</span>\n<span class=\"token attr-name\">person.dog.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">$&#123;person.wq: zhu&#125;dog</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-5、Profile-测试环境，正式环境配置\"><a href=\"#2-5、Profile-测试环境，正式环境配置\" class=\"headerlink\" title=\"2.5、Profile,测试环境，正式环境配置\"></a>2.5、Profile,测试环境，正式环境配置</h4><h5 id=\"2-5-1、多Profile文件\"><a href=\"#2-5-1、多Profile文件\" class=\"headerlink\" title=\"2.5.1、多Profile文件\"></a>2.5.1、多Profile文件</h5><p>我们在主配置文件编写的时候，文件名可以是： application-{profile}.properties/yml</p>\n<p><img src=\"D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228152740784.png\" alt=\"image-20210228152740784\"></p>\n<h5 id=\"2-5-2、yml支持多文档块方式\"><a href=\"#2-5-2、yml支持多文档块方式\" class=\"headerlink\" title=\"2.5.2、yml支持多文档块方式\"></a>2.5.2、yml支持多文档块方式</h5><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> dev\n    \n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8020</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> dev\n  \n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8030</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> prod\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h5 id=\"2-5-3、激活指定profile\"><a href=\"#2-5-3、激活指定profile\" class=\"headerlink\" title=\"2.5.3、激活指定profile\"></a>2.5.3、激活指定profile</h5><p>1、</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.profiles.active</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">dev</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2、命令行：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">java</span> <span class=\"token attr-value\">-jar ***.jav --spring.profiles.active=dev</span>\n可以直接在测试的时候，配置传入命令行参数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228154415200.png\" alt=\"image-20210228154415200\"></p>\n<p>3、虚拟机参数</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">-Dspring.profiles.active</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">dev</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228154312645.png\" alt=\"image-20210228154312645\"></p>\n<h4 id=\"2-6、配置文件加载位置\"><a href=\"#2-6、配置文件加载位置\" class=\"headerlink\" title=\"2.6、配置文件加载位置\"></a>2.6、配置文件加载位置</h4><p>. spring boot启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token comment\"># 配置项目的访问路径</span>\n<span class=\"token attr-name\">server.context-path</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">/boot02</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>file:./config/</li>\n<li>file:./</li>\n<li>classpath:/config/</li>\n<li>classpath:/</li>\n<li>一以上是按照<strong>优先级</strong>从<strong>高到低</strong>的顺序，所有位置的文件都会被加载，<strong>高优先级配置内容会覆盖低优先级配置内容</strong>。</li>\n<li>SpringBoot会从四个位置全部加载主配置文件；互补配置；</li>\n<li><strong>我们也可以通过配置spring.config.location来改变默认配置；</strong></li>\n</ul>\n<p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指配置文件和默认加载的这些配置文件共同起作用形成互补配置；</p>\n<h4 id=\"2-7、外部配置加载顺序\"><a href=\"#2-7、外部配置加载顺序\" class=\"headerlink\" title=\"2.7、外部配置加载顺序\"></a>2.7、外部配置加载顺序</h4><p>SpringBoot民可以从以下位置加载配置；优先级从高到低；高优先级的配置覆盖低优先级的配置</p>\n<ol>\n<li>命令行参数</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">java <span class=\"token operator\">-</span>jar <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>jar <span class=\"token operator\">--</span>server<span class=\"token punctuation\">.</span>port<span class=\"token operator\">=</span><span class=\"token number\">8087</span> <span class=\"token operator\">--</span>server<span class=\"token punctuation\">.</span>context<span class=\"token operator\">-</span>path<span class=\"token operator\">=</span><span class=\"token operator\">/</span>abc\n<span class=\"token comment\">// 多个配置用空格分开；--配置项=值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li><p>来自java:comp/env的JNDI属性</p>\n</li>\n<li><p>java系统属性（System.getProperties()）</p>\n</li>\n<li><p>操作系统环境变量</p>\n</li>\n<li><p>RandomValuePropertySource配置的random.*属性值</p>\n<p><strong>由jar包外向jar包内进行寻找；</strong></p>\n<p><strong>优先加载带profile</strong></p>\n</li>\n<li><p>jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p>\n</li>\n<li><p>jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p>\n<p><strong>再来加载不带profile</strong></p>\n</li>\n<li><p>jar包外部的application.properties或application.yml(不带spring.profile)配置文件</p>\n</li>\n<li><p>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</p>\n</li>\n<li><p>@Configuration注解类上的@PropertySource</p>\n</li>\n<li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p>\n</li>\n</ol>\n<h4 id=\"2-8、自动配置原理\"><a href=\"#2-8、自动配置原理\" class=\"headerlink\" title=\"2.8、自动配置原理\"></a>2.8、自动配置原理</h4><p>配置文件到底能写什么？怎么写？自动配置原理；</p>\n<p>配置文件能配置的属性参照 </p>\n<p>自动配置原理：</p>\n<p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能@EnableAutoCOnfiguration</p>\n<p>2）、@EnableAutoConfiguration作用；</p>\n<p>​    利用EnableAutoConfigurationImportSelector给窗口中导入一些组件？</p>\n<p>​    可以插件selectImports()方法的内容；</p>\n<p>​    List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);</p>\n<h3 id=\"三、Spring-Boot与日志\"><a href=\"#三、Spring-Boot与日志\" class=\"headerlink\" title=\"三、Spring Boot与日志\"></a>三、Spring Boot与日志</h3><h3 id=\"四、Spring-Boot与Web开发\"><a href=\"#四、Spring-Boot与Web开发\" class=\"headerlink\" title=\"四、Spring Boot与Web开发\"></a>四、Spring Boot与Web开发</h3><h3 id=\"五、Spring-Boot与Docker\"><a href=\"#五、Spring-Boot与Docker\" class=\"headerlink\" title=\"五、Spring Boot与Docker\"></a>五、Spring Boot与Docker</h3><h3 id=\"六、Spring-Boot与数据访问\"><a href=\"#六、Spring-Boot与数据访问\" class=\"headerlink\" title=\"六、Spring Boot与数据访问\"></a>六、Spring Boot与数据访问</h3><h3 id=\"七、Spring-Boot启动配置原理\"><a href=\"#七、Spring-Boot启动配置原理\" class=\"headerlink\" title=\"七、Spring Boot启动配置原理\"></a>七、Spring Boot启动配置原理</h3><h3 id=\"八、Spring-Boot自定义starters\"><a href=\"#八、Spring-Boot自定义starters\" class=\"headerlink\" title=\"八、Spring Boot自定义starters\"></a>八、Spring Boot自定义starters</h3><h3 id=\"九、Spring-Boot与缓存\"><a href=\"#九、Spring-Boot与缓存\" class=\"headerlink\" title=\"九、Spring Boot与缓存\"></a>九、Spring Boot与缓存</h3><h3 id=\"十、Spring-Boot与消息\"><a href=\"#十、Spring-Boot与消息\" class=\"headerlink\" title=\"十、Spring Boot与消息\"></a>十、Spring Boot与消息</h3><h3 id=\"十一、Spring-Boot与检索\"><a href=\"#十一、Spring-Boot与检索\" class=\"headerlink\" title=\"十一、Spring Boot与检索\"></a>十一、Spring Boot与检索</h3><h3 id=\"十二、Spring-Boot与任务\"><a href=\"#十二、Spring-Boot与任务\" class=\"headerlink\" title=\"十二、Spring Boot与任务\"></a>十二、Spring Boot与任务</h3><h3 id=\"十三、Spring-Boot与安全\"><a href=\"#十三、Spring-Boot与安全\" class=\"headerlink\" title=\"十三、Spring Boot与安全\"></a>十三、Spring Boot与安全</h3><h3 id=\"十四、Spring-Boot与分布式\"><a href=\"#十四、Spring-Boot与分布式\" class=\"headerlink\" title=\"十四、Spring Boot与分布式\"></a>十四、Spring Boot与分布式</h3><h3 id=\"十五、Spring-Boot与开发热部署\"><a href=\"#十五、Spring-Boot与开发热部署\" class=\"headerlink\" title=\"十五、Spring Boot与开发热部署\"></a>十五、Spring Boot与开发热部署</h3><h3 id=\"十六、Spring-Boot与监控管理\"><a href=\"#十六、Spring-Boot与监控管理\" class=\"headerlink\" title=\"十六、Spring Boot与监控管理\"></a>十六、Spring Boot与监控管理</h3>","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"Spring-boot-2\"><a href=\"#Spring-boot-2\" class=\"headerlink\" title=\"Spring boot 2\"></a>Spring boot 2</h1><h3 id=\"一、Boot入门\"><a href=\"#一、Boot入门\" class=\"headerlink\" title=\"一、Boot入门\"></a>一、Boot入门</h3><p><strong>SpringBoot2核心技术与响应式编程: <a href=\"https://www.yuque.com/atguigu/springboot\">https://www.yuque.com/atguigu/springboot</a></strong></p>\n<h4 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h4><ul>\n<li>简化Spring应用开发的一个框架；</li>\n<li>整个Spring技术栈的一大整合；</li>\n<li>J2EE开发的一站式解决方案；</li>\n</ul>\n<p>Spring Boot来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用</p>\n<p><strong>背景:</strong></p>\n<p>J2EE笨重的开发、繁多的配置、低下的开发效率、复杂的部署流程、第三方技术集成难度大。</p>\n<p><strong>解决∶</strong></p>\n<p>“Spring全家桶”时代。<br>Spring Boot &gt;J2EE一站式解决方案Spring Cloud→分布式整体解决方案</p>\n<p>User -&gt; Spring Boot -&gt; Spring</p>\n<p><strong>优点</strong></p>\n<ul>\n<li>快速创建独立运行的Spring项目以及主流框架集成</li>\n<li>使用嵌入式的Servlet容器，应用无需打成WAR包</li>\n<li>starters自动依赖与版本控制</li>\n<li>大量的自动配置，简化开发，也可修改默认值</li>\n<li>无需配置XML，无代码生成，开箱即用</li>\n<li>准生产环境的运行时应用监控</li>\n<li>与云计算的天然集成</li>\n</ul>\n<h4 id=\"2、微服务\"><a href=\"#2、微服务\" class=\"headerlink\" title=\"2、微服务\"></a>2、微服务</h4><p>2014， martin fowler</p>\n<p>微服务：架构风格（服务微化）</p>\n<p>一个应用应该是一组小型服务；可以通过<br>HTTP的方式进行互通；</p>\n<p>单体应用：ALL IN ONE<br>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>\n<h4 id=\"3、环境配置\"><a href=\"#3、环境配置\" class=\"headerlink\" title=\"3、环境配置\"></a>3、环境配置</h4><ul>\n<li>jdk 1.8.0_40 </li>\n<li>Spring boot 2.4.3</li>\n<li>IDEA 2020.3</li>\n<li>Maven 3.6.3</li>\n<li>给Maven的settigs.xml文件中的 </profiles>里加上如下配置</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>jdk-1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activation</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeByDefault</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeByDefault</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jdk</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jdk</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activation</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.compilerVersion</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.compilerVersion</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4、Spring-Boot-HelloWorld\"><a href=\"#4、Spring-Boot-HelloWorld\" class=\"headerlink\" title=\"4、Spring Boot HelloWorld\"></a>4、Spring Boot HelloWorld</h4><p>功能：<br>浏览器发送hello请求，服务器请求并处理，响应HelloWorld字符串</p>\n<h5 id=\"4-1-初始化项目\"><a href=\"#4-1-初始化项目\" class=\"headerlink\" title=\"4.1 初始化项目\"></a>4.1 初始化项目</h5><p>根据该网址创建项目：<a href=\"https://blog.51cto.com/yaowusheng/2565318\">https://blog.51cto.com/yaowusheng/2565318</a></p>\n<p>不能使用RequestMapping等，在pom文件中添加如下 </p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"4-2-编写相关的Controller、Service\"><a href=\"#4-2-编写相关的Controller、Service\" class=\"headerlink\" title=\"4.2 编写相关的Controller、Service\"></a>4.2 编写相关的Controller、Service</h5><p>(注意，contrller类所在包的级别，要在主程序类下。否则找不到)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>springbootdemo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBody</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@ResponseBody</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">helloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"4-3-打包成可执行的jar包\"><a href=\"#4-3-打包成可执行的jar包\" class=\"headerlink\" title=\"4.3 打包成可执行的jar包\"></a>4.3 打包成可执行的jar包</h5><p> IDEA操作步骤</p>\n<p>在IDEA右侧，选择Maven–&gt;展开自己的项目–》选择Lifecycle–》双击package<br>–&gt;运行完成之后，在左边项目目录中展开target–&gt;里面有个jar包，可以使用java -jar运行该jar包。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--    这个插件，可以应用打包成一个可执行的jar包--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"5、探究Hello-World\"><a href=\"#5、探究Hello-World\" class=\"headerlink\" title=\"5、探究Hello World\"></a>5、探究Hello World</h4><h5 id=\"5-1-POM文件\"><a href=\"#5-1-POM文件\" class=\"headerlink\" title=\"5.1 POM文件\"></a>5.1 POM文件</h5><h6 id=\"5-1-1-父项目\"><a href=\"#5-1-1-父项目\" class=\"headerlink\" title=\"5.1.1 父项目\"></a>5.1.1 父项目</h6><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span>\n    \n    他的父项目是\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span>\n他来真正管理Spring Boot应用里面的所有依赖版本；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Spring Boot的版本仲裁中心；</p>\n<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>\n<h6 id=\"5-1-2-启动器\"><a href=\"#5-1-2-启动器\" class=\"headerlink\" title=\"5.1.2 启动器\"></a>5.1.2 启动器</h6><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Spring-boot-starter-web</strong>:</p>\n<p>​    Spring-boot-starter:spring-boot 场景控制器：帮我们导入了web模块正常运行所依赖的组件 ；</p>\n<p>Spring Boot将所有的功能场景都抽取出来 ，做成一个个的starters（启动器），只需要在项目里面引入 这些starter相关场景的所有依赖都会导入进行。要用什么功能就导入什么场景的启动器</p>\n<h5 id=\"5-2-主程序类，主入口类\"><a href=\"#5-2-主程序类，主入口类\" class=\"headerlink\" title=\"5.2 主程序类，主入口类\"></a>5.2 主程序类，主入口类</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n@SpringBootApplication来标注一个主程序类，说明这是一个Spring Boot应用\n*/</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringbootdemoApplication</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringbootdemoApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>@SpringBootApplication</strong> : Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@SpringBootConfiguration</span>\n<span class=\"token annotation punctuation\">@EnableAutoConfiguration</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>\n    excludeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>\n    type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span>\n    classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">TypeExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>\n    type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span>\n    classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AutoConfigurationExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>@SpringBootConfiguration</strong> : Spring Boot的配置类<br>    标注在某个类上，表示是一个Spring Boot的配置类；</p>\n<p>​    <strong>@Configuration</strong>:配置类上来标注这个注解；</p>\n<p>​        配置类——配置文件；配置类也是容器中的一个组件；@Component</p>\n<p><strong>@EnableAutoConfiguration</strong>:开启自动配置功能；</p>\n<p>​    以前我们需要配置的东西，Spring Boot帮我们自动配置；**@EnableAutoConfiguration**告诉Spring Boot开启自动配置功能；这样自动配置才能生效；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AutoConfigurationPackage</span>\n<span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AutoConfigurationImportSelector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">EnableAutoConfiguration</span> <span class=\"token punctuation\">&#123;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>@AutoConfigurationPackage</strong>: 自动配置包</p>\n<p>​    @<strong>Import</strong>({AutoConfigurationImportSelector.class})；</p>\n<p>​    Spring的底层注解@import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p>\n<p><strong>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；</strong></p>\n<p>​    @Import(AutoConfigurationImportSelector.class) ;</p>\n<p>​        给容器中导入组件？</p>\n<p>​        <strong>EnableAutoConfiguratioImportSelector</strong>： 导入哪些组件的选择器；</p>\n<p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>\n<p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）;就是给容器中导入这个场景所需要的所有组件，并配置好这些组件；</p>\n<p>有了自动配置类，免去了我们手动编写配置注入功能组件等工作；</p>\n<p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, classLoader);</p>\n<p>Spring Boot启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值 ,将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；</p>\n<p>J2EE的整体整合解决方案和自动配置都在<strong>spring-boot-autoconfigure-2.4.3.jar</strong>;</p>\n<h4 id=\"6、使用Spring-Initializer快速创建Spring-Boot项目\"><a href=\"#6、使用Spring-Initializer快速创建Spring-Boot项目\" class=\"headerlink\" title=\"6、使用Spring Initializer快速创建Spring Boot项目\"></a>6、使用Spring Initializer快速创建Spring Boot项目</h4><p>根据该网址创建项目：<a href=\"https://blog.51cto.com/yaowusheng/2565318\">https://blog.51cto.com/yaowusheng/2565318</a></p>\n<p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p>\n<p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p>\n<p>默认生成的Spring Boot项目；</p>\n<ul>\n<li>主程序 已经写好，只需要写我们的逻辑</li>\n<li>resources文件夹中目录结构<ul>\n<li>static :保存所有的静态资源：js css images；</li>\n<li>templates:保存所有的模板页面：（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP页面）‘可以使用模板引擎（freemarker、thymeleaf）；</li>\n<li>application.properties: Spring Boot应用的配置文件；可以修改一些默认设置；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、Spring-Boot配置\"><a href=\"#二、Spring-Boot配置\" class=\"headerlink\" title=\"二、Spring Boot配置\"></a>二、Spring Boot配置</h3><h4 id=\"2-1-配置文件\"><a href=\"#2-1-配置文件\" class=\"headerlink\" title=\"2.1 配置文件\"></a>2.1 配置文件</h4><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的;</p>\n<p><strong>如果同时配置，properties优先yml</strong></p>\n<ul>\n<li><p>application.properties</p>\n</li>\n<li><p>application.yml</p>\n<p>配置文件的作用: 修改SpringBoot自动配置的默认值;</p>\n<p>SpringBoot在底层都给我们自动配置好;</p>\n</li>\n</ul>\n<p>YAML（YAML Ain`t Markup Language）</p>\n<pre><code>+ YAML A Markup Language：是一个标记语言\n+ YAML isn`t Markup Language：不是一个标记语言\n</code></pre>\n<p>标记语言：</p>\n<pre><code>+ 以前的配置文件：大多都使用的是xxx.xml文件；\n+ YAML:以数据为中心，比json、xml更适合做配置文件；\n+ YAML:配置例子\n</code></pre>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre><code>+ XML:\n</code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>server</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>8080<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>server</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2、YAML语法\"><a href=\"#2-2、YAML语法\" class=\"headerlink\" title=\"2.2、YAML语法\"></a>2.2、YAML语法</h4><h5 id=\"2-2-1-基本语法\"><a href=\"#2-2-1-基本语法\" class=\"headerlink\" title=\"2.2.1 基本语法\"></a>2.2.1 基本语法</h5><p>k:(空格)v:表示一对键值对（空格必须有);<br>以<strong>空格</strong>的缩进来控制层级关系;只要是左对齐的一列数据，都是同一个层级的</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8081</span>\n\t<span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /hello<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>属性和值也是大小写敏感;</p>\n<h5 id=\"2-2-2-值的写法\"><a href=\"#2-2-2-值的写法\" class=\"headerlink\" title=\"2.2.2 值的写法\"></a>2.2.2 值的写法</h5><h6 id=\"字面量︰普通的值（数字，字符串，布尔\"><a href=\"#字面量︰普通的值（数字，字符串，布尔\" class=\"headerlink\" title=\"字面量︰普通的值（数字，字符串，布尔)\"></a>字面量︰普通的值（数字，字符串，布尔)</h6><p>​    k: v: 字面直接来写;<br>​        字符串默认不用加上单引号或者双引号;</p>\n<p>​            “” 双引号：不会转义字符串里面的特殊字符;特殊字符会作为本身想表示的意思</p>\n<p>​                name: “zhangsan \\n lisi    输出: zhangsan 换行 lisi</p>\n<p>​            ’:单引号:会转义特殊字符，特殊字符最终只是一个普通的字符串数据<br>​                name: “zhangsan \\n lisi    输出: zhangsan in lisi</p>\n<h6 id=\"2-2-3-对象、Map（属性和值）（键值对）：\"><a href=\"#2-2-3-对象、Map（属性和值）（键值对）：\" class=\"headerlink\" title=\"2.2.3 对象、Map（属性和值）（键值对）：\"></a>2.2.3 对象、Map（属性和值）（键值对）：</h6><p>​    k: v :在下一行来写对象的属性和值的关系； 注意缩进</p>\n<p>​        对象还是k: v的方式</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8081</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>行内写法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server: (port: 8081, path: &#x2F;test)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h6 id=\"数组（List、Set）\"><a href=\"#数组（List、Set）\" class=\"headerlink\" title=\"数组（List、Set）:\"></a>数组（List、Set）:</h6><p>用 - 值表示数组中的一个元素</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">pets</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> cat\n<span class=\"token punctuation\">-</span> dog\n<span class=\"token punctuation\">-</span> pig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>行内写法</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">pets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>cat<span class=\"token punctuation\">,</span> dog<span class=\"token punctuation\">,</span> pig<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-3-配置文件值注入\"><a href=\"#2-3-配置文件值注入\" class=\"headerlink\" title=\"2.3 配置文件值注入\"></a>2.3 配置文件值注入</h4><h5 id=\"2-3-1-配置文件-xx-yaml\"><a href=\"#2-3-1-配置文件-xx-yaml\" class=\"headerlink\" title=\"2.3.1 配置文件 xx.yaml\"></a>2.3.1 配置文件 xx.yaml</h5><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">person</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> xiaozhu\n  <span class=\"token key atrule\">isDog</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18</span>\n  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span> 2020/12/1\n  <span class=\"token key atrule\">map</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token key atrule\">k1</span><span class=\"token punctuation\">:</span> yihao<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">k2</span><span class=\"token punctuation\">:</span> erhao<span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> qqq\n    <span class=\"token punctuation\">-</span> aaa\n    <span class=\"token punctuation\">-</span> ccc\n  <span class=\"token key atrule\">dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jingmao\n    <span class=\"token key atrule\">remarks</span><span class=\"token punctuation\">:</span> ni shi jing mao <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>javaBean:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n* 将配置文件中配置的每一个属性值，映射到这个组件中\n* @ConfigurationProperties : 告诉Spring Boot将本类中的所有属性和配置文件中相关的配置进行绑定；\n* prefix = \"person\" ，配置文件中哪个下面的所有属性一一映射*/</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"person\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> isDog<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>导入配置文件处理器，编写配置就会有提示</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--   导入配置文件处理器，配置文件进行绑定就会有提示     --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-configuration-processor<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2-3-2使用properties，其他配置相同，properties文件如下\"><a href=\"#2-3-2使用properties，其他配置相同，properties文件如下\" class=\"headerlink\" title=\"2.3.2使用properties，其他配置相同，properties文件如下\"></a>2.3.2使用properties，其他配置相同，properties文件如下</h5><pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">person.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">张三</span>\n<span class=\"token attr-name\">person.age</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">19</span>\n<span class=\"token attr-name\">person.list</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">a,b,c</span>\n<span class=\"token attr-name\">person.map.k1</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">aaa</span>\n<span class=\"token attr-name\">person.map.k2</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">bbb</span>\n<span class=\"token attr-name\">person.dog.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">xiaoha</span>\n<span class=\"token attr-name\">person.dog.remarks</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">nihao</span>\n<span class=\"token comment\"># 如果遇到中文编码问题，在settings-->file Encodings--> Properties Files --> 选择UTF-8加上勾选Transparent native-to-ascii conversion</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\1614492402407.png\" alt=\"1614492402407\"></p>\n<h5 id=\"2-3-3-Value获取值和-ConfigurationProperties获取值比较\"><a href=\"#2-3-3-Value获取值和-ConfigurationProperties获取值比较\" class=\"headerlink\" title=\"2.3.3 @Value获取值和@ConfigurationProperties获取值比较\"></a>2.3.3 @Value获取值和@ConfigurationProperties获取值比较</h5><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">@ConfiggurationProperties</th>\n<th align=\"center\">@Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">功能</td>\n<td align=\"center\">批量注入配置文件中的属性</td>\n<td align=\"center\">一个个指定</td>\n</tr>\n<tr>\n<td align=\"center\">松散绑定（松散语法）</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">SpEL</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">JSR303数据校验</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">复杂类型封装</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n</tbody></table>\n<p>配置文件yml还是properties他们都能获取到值；</p>\n<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value</p>\n<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties;</p>\n<h5 id=\"2-3-4-PropertySource-amp-ImportResource\"><a href=\"#2-3-4-PropertySource-amp-ImportResource\" class=\"headerlink\" title=\"2.3.4 @PropertySource&amp; @ImportResource\"></a>2.3.4 @PropertySource&amp; @ImportResource</h5><p>@<strong>PropertySOurce</strong>加载指定的配置文件；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n* 将配置文件中配置的每一个属性值，映射到这个组件中\n* @ConfigurationProperties : 告诉Spring Boot将本类中的所有属性和配置文件中相关的配置进行绑定；默认全局文件获取值\n* prefix = \"person\" ，配置文件中哪个下面的所有属性一一映射*/</span>\n<span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"classpath:person.properties\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"person\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> isDog<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>@ImportResource</strong>:导入Spring的配置文件，让配置文件里面的内容生效；</p>\n<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>\n<p>想让Spring的配置文件生效；**@ImportResource**标注在一个配置类上</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ImportResource</span><span class=\"token punctuation\">(</span>locations <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"classpath:beans.xml\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n导入spring的配置文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>SpringBoot推荐给容器中添加组件的方式：推荐使用全注解方式</p>\n<p>1、配置类====Spring配置文件</p>\n<p>2、使用@Bean给容器中添加组件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n    @Configuration:指明当前类是一个配置类；就是来替代之前的Spring配置文件\n    在配置文件中用&lt;bean>&lt;bean/>标签添加组件\n */</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAppConfig</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 将方法的返回值添加到容器中，容器中的这个组件默认的id就是方法名</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HelloService</span> <span class=\"token function\">helloService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloService已添加\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-4、配置文件占位符\"><a href=\"#2-4、配置文件占位符\" class=\"headerlink\" title=\"2.4、配置文件占位符\"></a>2.4、配置文件占位符</h4><h5 id=\"2-4-1、随机数\"><a href=\"#2-4-1、随机数\" class=\"headerlink\" title=\"2.4.1、随机数\"></a>2.4.1、随机数</h5><pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">random.value\nrandom.int\n$&#123;random.long&#125;\nrandom.int(10)\n<span class=\"token attr-name\">&#123;random.int[1024,</span> <span class=\"token attr-value\">65536]&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2-4-2、点位符获取之前配置的值，如果没有可以用：号来指定默认值\"><a href=\"#2-4-2、点位符获取之前配置的值，如果没有可以用：号来指定默认值\" class=\"headerlink\" title=\"2.4.2、点位符获取之前配置的值，如果没有可以用：号来指定默认值\"></a>2.4.2、点位符获取之前配置的值，如果没有可以用：号来指定默认值</h5><pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">person.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">张三$&#123;random.uuid&#125;</span>\n<span class=\"token attr-name\">person.age</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">$&#123;random.int&#125;</span>\n<span class=\"token attr-name\">person.list</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">a,b,c</span>\n<span class=\"token attr-name\">person.map.k1</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">aaa</span>\n<span class=\"token attr-name\">person.map.k2</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">bbb</span>\n<span class=\"token attr-name\">person.dog.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">$&#123;person.wq: zhu&#125;dog</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-5、Profile-测试环境，正式环境配置\"><a href=\"#2-5、Profile-测试环境，正式环境配置\" class=\"headerlink\" title=\"2.5、Profile,测试环境，正式环境配置\"></a>2.5、Profile,测试环境，正式环境配置</h4><h5 id=\"2-5-1、多Profile文件\"><a href=\"#2-5-1、多Profile文件\" class=\"headerlink\" title=\"2.5.1、多Profile文件\"></a>2.5.1、多Profile文件</h5><p>我们在主配置文件编写的时候，文件名可以是： application-{profile}.properties/yml</p>\n<p><img src=\"D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228152740784.png\" alt=\"image-20210228152740784\"></p>\n<h5 id=\"2-5-2、yml支持多文档块方式\"><a href=\"#2-5-2、yml支持多文档块方式\" class=\"headerlink\" title=\"2.5.2、yml支持多文档块方式\"></a>2.5.2、yml支持多文档块方式</h5><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> dev\n    \n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8020</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> dev\n  \n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8030</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> prod\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h5 id=\"2-5-3、激活指定profile\"><a href=\"#2-5-3、激活指定profile\" class=\"headerlink\" title=\"2.5.3、激活指定profile\"></a>2.5.3、激活指定profile</h5><p>1、</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.profiles.active</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">dev</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2、命令行：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">java</span> <span class=\"token attr-value\">-jar ***.jav --spring.profiles.active=dev</span>\n可以直接在测试的时候，配置传入命令行参数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228154415200.png\" alt=\"image-20210228154415200\"></p>\n<p>3、虚拟机参数</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">-Dspring.profiles.active</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">dev</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"D:\\data\\projects\\gitPro\\study-notes\\SpringBoot\\images\\image-20210228154312645.png\" alt=\"image-20210228154312645\"></p>\n<h4 id=\"2-6、配置文件加载位置\"><a href=\"#2-6、配置文件加载位置\" class=\"headerlink\" title=\"2.6、配置文件加载位置\"></a>2.6、配置文件加载位置</h4><p>. spring boot启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token comment\"># 配置项目的访问路径</span>\n<span class=\"token attr-name\">server.context-path</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">/boot02</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>file:./config/</li>\n<li>file:./</li>\n<li>classpath:/config/</li>\n<li>classpath:/</li>\n<li>一以上是按照<strong>优先级</strong>从<strong>高到低</strong>的顺序，所有位置的文件都会被加载，<strong>高优先级配置内容会覆盖低优先级配置内容</strong>。</li>\n<li>SpringBoot会从四个位置全部加载主配置文件；互补配置；</li>\n<li><strong>我们也可以通过配置spring.config.location来改变默认配置；</strong></li>\n</ul>\n<p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指配置文件和默认加载的这些配置文件共同起作用形成互补配置；</p>\n<h4 id=\"2-7、外部配置加载顺序\"><a href=\"#2-7、外部配置加载顺序\" class=\"headerlink\" title=\"2.7、外部配置加载顺序\"></a>2.7、外部配置加载顺序</h4><p>SpringBoot民可以从以下位置加载配置；优先级从高到低；高优先级的配置覆盖低优先级的配置</p>\n<ol>\n<li>命令行参数</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">java <span class=\"token operator\">-</span>jar <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>jar <span class=\"token operator\">--</span>server<span class=\"token punctuation\">.</span>port<span class=\"token operator\">=</span><span class=\"token number\">8087</span> <span class=\"token operator\">--</span>server<span class=\"token punctuation\">.</span>context<span class=\"token operator\">-</span>path<span class=\"token operator\">=</span><span class=\"token operator\">/</span>abc\n<span class=\"token comment\">// 多个配置用空格分开；--配置项=值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li><p>来自java:comp/env的JNDI属性</p>\n</li>\n<li><p>java系统属性（System.getProperties()）</p>\n</li>\n<li><p>操作系统环境变量</p>\n</li>\n<li><p>RandomValuePropertySource配置的random.*属性值</p>\n<p><strong>由jar包外向jar包内进行寻找；</strong></p>\n<p><strong>优先加载带profile</strong></p>\n</li>\n<li><p>jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p>\n</li>\n<li><p>jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p>\n<p><strong>再来加载不带profile</strong></p>\n</li>\n<li><p>jar包外部的application.properties或application.yml(不带spring.profile)配置文件</p>\n</li>\n<li><p>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</p>\n</li>\n<li><p>@Configuration注解类上的@PropertySource</p>\n</li>\n<li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p>\n</li>\n</ol>\n<h4 id=\"2-8、自动配置原理\"><a href=\"#2-8、自动配置原理\" class=\"headerlink\" title=\"2.8、自动配置原理\"></a>2.8、自动配置原理</h4><p>配置文件到底能写什么？怎么写？自动配置原理；</p>\n<p>配置文件能配置的属性参照 </p>\n<p>自动配置原理：</p>\n<p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能@EnableAutoCOnfiguration</p>\n<p>2）、@EnableAutoConfiguration作用；</p>\n<p>​    利用EnableAutoConfigurationImportSelector给窗口中导入一些组件？</p>\n<p>​    可以插件selectImports()方法的内容；</p>\n<p>​    List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);</p>\n<h3 id=\"三、Spring-Boot与日志\"><a href=\"#三、Spring-Boot与日志\" class=\"headerlink\" title=\"三、Spring Boot与日志\"></a>三、Spring Boot与日志</h3><h3 id=\"四、Spring-Boot与Web开发\"><a href=\"#四、Spring-Boot与Web开发\" class=\"headerlink\" title=\"四、Spring Boot与Web开发\"></a>四、Spring Boot与Web开发</h3><h3 id=\"五、Spring-Boot与Docker\"><a href=\"#五、Spring-Boot与Docker\" class=\"headerlink\" title=\"五、Spring Boot与Docker\"></a>五、Spring Boot与Docker</h3><h3 id=\"六、Spring-Boot与数据访问\"><a href=\"#六、Spring-Boot与数据访问\" class=\"headerlink\" title=\"六、Spring Boot与数据访问\"></a>六、Spring Boot与数据访问</h3><h3 id=\"七、Spring-Boot启动配置原理\"><a href=\"#七、Spring-Boot启动配置原理\" class=\"headerlink\" title=\"七、Spring Boot启动配置原理\"></a>七、Spring Boot启动配置原理</h3><h3 id=\"八、Spring-Boot自定义starters\"><a href=\"#八、Spring-Boot自定义starters\" class=\"headerlink\" title=\"八、Spring Boot自定义starters\"></a>八、Spring Boot自定义starters</h3><h3 id=\"九、Spring-Boot与缓存\"><a href=\"#九、Spring-Boot与缓存\" class=\"headerlink\" title=\"九、Spring Boot与缓存\"></a>九、Spring Boot与缓存</h3><h3 id=\"十、Spring-Boot与消息\"><a href=\"#十、Spring-Boot与消息\" class=\"headerlink\" title=\"十、Spring Boot与消息\"></a>十、Spring Boot与消息</h3><h3 id=\"十一、Spring-Boot与检索\"><a href=\"#十一、Spring-Boot与检索\" class=\"headerlink\" title=\"十一、Spring Boot与检索\"></a>十一、Spring Boot与检索</h3><h3 id=\"十二、Spring-Boot与任务\"><a href=\"#十二、Spring-Boot与任务\" class=\"headerlink\" title=\"十二、Spring Boot与任务\"></a>十二、Spring Boot与任务</h3><h3 id=\"十三、Spring-Boot与安全\"><a href=\"#十三、Spring-Boot与安全\" class=\"headerlink\" title=\"十三、Spring Boot与安全\"></a>十三、Spring Boot与安全</h3><h3 id=\"十四、Spring-Boot与分布式\"><a href=\"#十四、Spring-Boot与分布式\" class=\"headerlink\" title=\"十四、Spring Boot与分布式\"></a>十四、Spring Boot与分布式</h3><h3 id=\"十五、Spring-Boot与开发热部署\"><a href=\"#十五、Spring-Boot与开发热部署\" class=\"headerlink\" title=\"十五、Spring Boot与开发热部署\"></a>十五、Spring Boot与开发热部署</h3><h3 id=\"十六、Spring-Boot与监控管理\"><a href=\"#十六、Spring-Boot与监控管理\" class=\"headerlink\" title=\"十六、Spring Boot与监控管理\"></a>十六、Spring Boot与监控管理</h3>"}],"PostAsset":[{"_id":"source/_posts/7整数反转/image-20210504005805249.png","slug":"image-20210504005805249.png","post":"ckob5i8zu0001k0ufdduwhr5c","modified":0,"renderable":0},{"_id":"source/_posts/7整数反转/image-20210504010425266.png","slug":"image-20210504010425266.png","post":"ckob5i8zu0001k0ufdduwhr5c","modified":0,"renderable":0},{"_id":"source/_posts/砖墙问题/querstion.png","slug":"querstion.png","post":"ckob5i90b000sk0ufeah598x1","modified":0,"renderable":0},{"_id":"source/_posts/砖墙问题/wall.png","slug":"wall.png","post":"ckob5i90b000sk0ufeah598x1","modified":0,"renderable":0},{"_id":"source/_posts/TCP和UDP协议/tcp三次握手四次挥手.png","slug":"tcp三次握手四次挥手.png","post":"ckol3rcen0003qkuf0traflth","modified":0,"renderable":0},{"_id":"source/_posts/数据结构与算法-1/image-20210514201311899.png","slug":"image-20210514201311899.png","post":"ckosfpu8z0000qoufdrmg69k5","modified":0,"renderable":0},{"_id":"source/_posts/SpringBoot/1614492402407.png","slug":"1614492402407.png","post":"ckpc7de2u0000g4ufeaqadyjx","modified":0,"renderable":0},{"_id":"source/_posts/SpringBoot/image-20210228152740784.png","slug":"image-20210228152740784.png","post":"ckpc7de2u0000g4ufeaqadyjx","modified":0,"renderable":0},{"_id":"source/_posts/SpringBoot/image-20210228154312645.png","slug":"image-20210228154312645.png","post":"ckpc7de2u0000g4ufeaqadyjx","modified":0,"renderable":0},{"_id":"source/_posts/SpringBoot/image-20210228154415200.png","slug":"image-20210228154415200.png","post":"ckpc7de2u0000g4ufeaqadyjx","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckob5i8zu0001k0ufdduwhr5c","category_id":"ckob5i8zy0003k0ufeala33mm","_id":"ckob5i9030009k0uf7xdz3au6"},{"post_id":"ckob5i9000005k0ufdzs10v6y","category_id":"ckob5i903000ak0uf98jmddne","_id":"ckob5i905000ik0uf3rg3eblw"},{"post_id":"ckob5i9010006k0ufgkll3pq3","category_id":"ckob5i903000fk0ufa81c61ft","_id":"ckob5i906000lk0ufd5350mpv"},{"post_id":"ckob5i90a000rk0uf0zv2c8ns","category_id":"ckob5i8zy0003k0ufeala33mm","_id":"ckob5i90e000wk0ufd9ut6l73"},{"post_id":"ckob5i90b000sk0ufeah598x1","category_id":"ckob5i8zy0003k0ufeala33mm","_id":"ckob5i90e000yk0ufdvbshggg"},{"post_id":"ckob5i908000nk0ufdh1y16ar","category_id":"ckob5i90a000pk0ufdh0i6o6e","_id":"ckob5i90e0010k0ufaocqgp2y"},{"post_id":"ckob5i909000ok0uf2z0d9ec8","category_id":"ckob5i90d000tk0uf4nvzdwg4","_id":"ckob5i90f0013k0uf449k6d9s"},{"post_id":"ckob5i8zx0002k0uf4z6daxer","category_id":"ckob5i9020007k0ufcl7j7ma1","_id":"ckob5pc7h0004y4ufei029ftz"},{"post_id":"ckobhx9qs000028ufbpu9cs2v","category_id":"ckob5i8zy0003k0ufeala33mm","_id":"ckobhx9qz000228uf5nu301cc"},{"post_id":"ckobhx9r0000628uf2n8g5hmq","category_id":"ckob5i8zy0003k0ufeala33mm","_id":"ckobhx9r1000828ufc9ti3dfy"},{"post_id":"ckol3rcej0000qkuf4zpv0kdx","category_id":"ckob5i8zy0003k0ufeala33mm","_id":"ckol3rceo0005qkuf4dzhbpll"},{"post_id":"ckol3rcem0001qkuf016x4hz4","category_id":"ckob5i8zy0003k0ufeala33mm","_id":"ckol3rceo0007qkuf9xtyd1vn"},{"post_id":"ckol3rcen0003qkuf0traflth","category_id":"ckol3yg3d0000iwuf1e7j30sn","_id":"ckol3yg3i0003iwuf82gr1dkn"},{"post_id":"ckosiz5m10000nwufdipn6gj5","category_id":"ckob5i8zy0003k0ufeala33mm","_id":"ckosiz5m90002nwuff6ss2g5b"},{"post_id":"ckozuknh000004gufbl5sbeey","category_id":"ckob5i8zy0003k0ufeala33mm","_id":"ckozuknh900034guf8m6x4hm3"},{"post_id":"ckosfpu8z0000qoufdrmg69k5","category_id":"ckob5i8zy0003k0ufeala33mm","_id":"ckozuknh900054guf7xtl0lgx"},{"post_id":"ckpc7de2u0000g4ufeaqadyjx","category_id":"ckpc7de2x0001g4uf5uoscgi2","_id":"ckpc7de330004g4ufddoecw3j"}],"PostTag":[{"post_id":"ckob5i8zu0001k0ufdduwhr5c","tag_id":"ckob5i8zz0004k0ufb33k5lj0","_id":"ckob5i903000ck0uf3zuc2ggi"},{"post_id":"ckob5i8zu0001k0ufdduwhr5c","tag_id":"ckob5i9020008k0ufb5pc80pw","_id":"ckob5i903000dk0ufcb0j6awk"},{"post_id":"ckob5i9000005k0ufdzs10v6y","tag_id":"ckob5i904000gk0uf3k4zh0ji","_id":"ckob5i905000kk0uf5x1vazm3"},{"post_id":"ckob5i9010006k0ufgkll3pq3","tag_id":"ckob5i905000jk0ufecul8j0r","_id":"ckob5i906000mk0uf9pfmdoyo"},{"post_id":"ckob5i908000nk0ufdh1y16ar","tag_id":"ckob5i90a000qk0ufft730hnc","_id":"ckob5i90e000vk0ufg9ntfbjy"},{"post_id":"ckob5i908000nk0ufdh1y16ar","tag_id":"ckob5i905000jk0ufecul8j0r","_id":"ckob5i90e000xk0uf4mzq8wuj"},{"post_id":"ckob5i909000ok0uf2z0d9ec8","tag_id":"ckob5i90d000uk0ufe2o69no3","_id":"ckob5i90e0011k0ufbdsfc1mi"},{"post_id":"ckob5i909000ok0uf2z0d9ec8","tag_id":"ckob5i905000jk0ufecul8j0r","_id":"ckob5i90f0012k0uffiqz08ij"},{"post_id":"ckob5i90a000rk0uf0zv2c8ns","tag_id":"ckob5i8zz0004k0ufb33k5lj0","_id":"ckob5i90g0015k0ufdr4ddygh"},{"post_id":"ckob5i90a000rk0uf0zv2c8ns","tag_id":"ckob5i9020008k0ufb5pc80pw","_id":"ckob5i90g0016k0uf2z0a1fu8"},{"post_id":"ckob5i90a000rk0uf0zv2c8ns","tag_id":"ckob5i90e000zk0uf9tcrdau2","_id":"ckob5i90g0017k0uf26rkdbsx"},{"post_id":"ckob5i90b000sk0ufeah598x1","tag_id":"ckob5i8zz0004k0ufb33k5lj0","_id":"ckob5i90g0018k0uf0g6jcou6"},{"post_id":"ckob5i90b000sk0ufeah598x1","tag_id":"ckob5i9020008k0ufb5pc80pw","_id":"ckob5i90g0019k0uf6sf66u8g"},{"post_id":"ckob5i90b000sk0ufeah598x1","tag_id":"ckob5i90e000zk0uf9tcrdau2","_id":"ckob5i90g001ak0ufhu903y1r"},{"post_id":"ckob5i9000005k0ufdzs10v6y","tag_id":"ckob5i9020008k0ufb5pc80pw","_id":"ckob5jj1n0002y4ufg96e4nso"},{"post_id":"ckob5i8zx0002k0uf4z6daxer","tag_id":"ckob5i903000bk0uf23ond2gm","_id":"ckob5pc7g0003y4uf1p5a49p0"},{"post_id":"ckobhx9qs000028ufbpu9cs2v","tag_id":"ckob5i8zz0004k0ufb33k5lj0","_id":"ckobhx9qz000328ufa0u3b4mn"},{"post_id":"ckobhx9qs000028ufbpu9cs2v","tag_id":"ckob5i9020008k0ufb5pc80pw","_id":"ckobhx9qz000428uf7gbu060z"},{"post_id":"ckobhx9qs000028ufbpu9cs2v","tag_id":"ckobhx9qw000128uf31rje7d1","_id":"ckobhx9qz000528ufg0amenns"},{"post_id":"ckobhx9r0000628uf2n8g5hmq","tag_id":"ckob5i8zz0004k0ufb33k5lj0","_id":"ckobhx9r2000928ufghpe2trp"},{"post_id":"ckobhx9r0000628uf2n8g5hmq","tag_id":"ckob5i9020008k0ufb5pc80pw","_id":"ckobhx9r2000a28uf4xss1k2d"},{"post_id":"ckobhx9r0000628uf2n8g5hmq","tag_id":"ckobhx9r1000728uf9wx6c81l","_id":"ckobhx9r2000b28uf9qs4fmkp"},{"post_id":"ckol3rcej0000qkuf4zpv0kdx","tag_id":"ckob5i8zz0004k0ufb33k5lj0","_id":"ckol3rcen0002qkufd2wjdg5a"},{"post_id":"ckol3rcej0000qkuf4zpv0kdx","tag_id":"ckob5i9020008k0ufb5pc80pw","_id":"ckol3rcen0004qkuf022meuf1"},{"post_id":"ckol3rcej0000qkuf4zpv0kdx","tag_id":"ckobhx9qw000128uf31rje7d1","_id":"ckol3rceo0006qkufg9nu7hrm"},{"post_id":"ckol3rcem0001qkuf016x4hz4","tag_id":"ckob5i8zz0004k0ufb33k5lj0","_id":"ckol3rceo0008qkuf5lkjb17d"},{"post_id":"ckol3rcem0001qkuf016x4hz4","tag_id":"ckob5i9020008k0ufb5pc80pw","_id":"ckol3rceo0009qkuf3eoi0d4n"},{"post_id":"ckol3rcem0001qkuf016x4hz4","tag_id":"ckob5i90e000zk0uf9tcrdau2","_id":"ckol3rceo000aqkuf2l8y5xk5"},{"post_id":"ckol3rcen0003qkuf0traflth","tag_id":"ckol3yg3h0001iwufbqfefy2j","_id":"ckol3yg3i0004iwuf0thf1nol"},{"post_id":"ckol3rcen0003qkuf0traflth","tag_id":"ckol3yg3i0002iwufbb8rc6j0","_id":"ckol3yg3i0005iwufhlm7dvfg"},{"post_id":"ckosiz5m10000nwufdipn6gj5","tag_id":"ckob5i8zz0004k0ufb33k5lj0","_id":"ckosiz5m90004nwuf1f383clv"},{"post_id":"ckosiz5m10000nwufdipn6gj5","tag_id":"ckob5i9020008k0ufb5pc80pw","_id":"ckosiz5ma0005nwufeh5weeik"},{"post_id":"ckosiz5m10000nwufdipn6gj5","tag_id":"ckosiz5m50001nwuf2zru6r6e","_id":"ckosiz5ma0006nwuff9t0bejm"},{"post_id":"ckosiz5m10000nwufdipn6gj5","tag_id":"ckosiz5m90003nwuf8z196xxs","_id":"ckosiz5ma0007nwufgxzsajvw"},{"post_id":"ckosfpu8z0000qoufdrmg69k5","tag_id":"ckob5i8zz0004k0ufb33k5lj0","_id":"ckozuknh900024gufaxkf38sk"},{"post_id":"ckosfpu8z0000qoufdrmg69k5","tag_id":"ckob5i9020008k0ufb5pc80pw","_id":"ckozuknh900044gufbdikh19z"},{"post_id":"ckozuknh000004gufbl5sbeey","tag_id":"ckozuknh400014guf3t1b76fd","_id":"ckozuknha00064gufc5zhd6gx"},{"post_id":"ckozuknh000004gufbl5sbeey","tag_id":"ckob5i9020008k0ufb5pc80pw","_id":"ckozuknha00074guf7uu170eg"},{"post_id":"ckpc7de2u0000g4ufeaqadyjx","tag_id":"ckpc7de320002g4ufg867cha8","_id":"ckpc7de330005g4ufhj6p4j14"},{"post_id":"ckpc7de2u0000g4ufeaqadyjx","tag_id":"ckpc7de320003g4uf4vmi6l8u","_id":"ckpc7de330006g4uf44f79t6f"}],"Tag":[{"name":"算法","_id":"ckob5i8zz0004k0ufb33k5lj0"},{"name":"Python","_id":"ckob5i9020008k0ufb5pc80pw"},{"name":"Nginx","_id":"ckob5i903000bk0uf23ond2gm"},{"name":"Django","_id":"ckob5i904000gk0uf3k4zh0ji"},{"name":"Linux","_id":"ckob5i905000jk0ufecul8j0r"},{"name":"Shell","_id":"ckob5i90a000qk0ufft730hnc"},{"name":"Vim","_id":"ckob5i90d000uk0ufe2o69no3"},{"name":"Hash","_id":"ckob5i90e000zk0uf9tcrdau2"},{"name":"P","_id":"ckob5jibq0000y4uf9vkrfpx2"},{"name":"异或","_id":"ckobhx9qw000128uf31rje7d1"},{"name":"链表","_id":"ckobhx9r1000728uf9wx6c81l"},{"name":"TCP","_id":"ckol3yg3h0001iwufbqfefy2j"},{"name":"UDP","_id":"ckol3yg3i0002iwufbb8rc6j0"},{"name":"递归","_id":"ckosiz5m50001nwuf2zru6r6e"},{"name":"动态规划","_id":"ckosiz5m90003nwuf8z196xxs"},{"name":"小工具","_id":"ckozuknh400014guf3t1b76fd"},{"name":"Java","_id":"ckpc7de320002g4ufg867cha8"},{"name":"SpringBoot","_id":"ckpc7de320003g4uf4vmi6l8u"}]}}