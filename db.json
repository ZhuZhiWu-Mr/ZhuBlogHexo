{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/head.jpg","path":"images/head.jpg","modified":0,"renderable":0},{"_id":"source/svg/bilibili-fill.svg","path":"svg/bilibili-fill.svg","modified":0,"renderable":0},{"_id":"source/svg/github.svg","path":"svg/github.svg","modified":0,"renderable":0},{"_id":"source/svg/qq.svg","path":"svg/qq.svg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG211284641681.jpg","path":"images/banners/VCG211284641681.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41533095859.jpg","path":"images/banners/VCG41533095859.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41N1169192820.jpg","path":"images/banners/VCG41N1169192820.jpg","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/js/live2d.min.js","path":"js/live2d.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.c06cd5c9.css","path":"static/css/about.c06cd5c9.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.ef05802f.css","path":"static/css/app.ef05802f.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.b41c8192.css","path":"static/css/archives.b41c8192.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.7b21beee.css","path":"static/css/page.7b21beee.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.7d1e319c.js","path":"static/js/404.7d1e319c.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.f8376ea5.js","path":"static/js/archives.f8376ea5.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.05f5177a.js","path":"static/js/about.05f5177a.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.17c5223b.js","path":"static/js/app.17c5223b.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.cd195d1b.js","path":"static/js/categories.cd195d1b.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.9b3ced64.js","path":"static/js/chunk-libs.9b3ced64.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.58f43599.js","path":"static/js/page.58f43599.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.10796a8c.js","path":"static/js/post.10796a8c.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.83a84bff.js","path":"static/js/result.83a84bff.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.393261f6.js","path":"static/js/tags.393261f6.js","modified":0,"renderable":1},{"_id":"source/images/banners/VCG211263245974.jpg","path":"images/banners/VCG211263245974.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41154059609.jpg","path":"images/banners/VCG41154059609.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG41N1070447322.jpg","path":"images/banners/VCG41N1070447322.jpg","modified":0,"renderable":0},{"_id":"source/images/banners/VCG21gic18180994.jpg","path":"images/banners/VCG21gic18180994.jpg","modified":1,"renderable":0},{"_id":"source/images/banners/VCG21gic13799691.jpg","path":"images/banners/VCG21gic13799691.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/linux.md","hash":"3c9c4472929cecfe49ed95f5267584a38815fff9","modified":1620134609296},{"_id":"source/_posts/两数之和.md","hash":"d4a59ccbc0323d123c7e6611d60dfea487b19107","modified":1620134665806},{"_id":"source/_posts/砖墙问题.md","hash":"f36d2bcf4726c0d1f8afd1e826d5d043c071e7c7","modified":1620134597706},{"_id":"source/about/index.md","hash":"3c719782591e5e465d2b342e74116d75c14b8914","modified":1620039862231},{"_id":"source/images/head.jpg","hash":"108c18bb80f7fd2d3c594a6c3204e464b8be4487","modified":1620027936063},{"_id":"source/svg/bilibili-fill.svg","hash":"b0f6428f535e292fec0a9a7d7160097c33b8c250","modified":1620033226498},{"_id":"source/svg/github.svg","hash":"95e356da588979e3b3051aa301a5d75c3ccf7fcf","modified":1620033042685},{"_id":"source/svg/qq.svg","hash":"b2ed79161356aaeef1e08dd7f55aff71d5070716","modified":1620032994690},{"_id":"source/images/banners/VCG41N1169192820.jpg","hash":"b334f26acd6b881efe9df8de6f41dcc0368bdb2e","modified":1620044673348},{"_id":"source/images/banners/VCG211284641681.jpg","hash":"37228eecaa21e5099a43a4e6578ad3e82118af9a","modified":1620044290233},{"_id":"source/images/banners/VCG41533095859.jpg","hash":"e6b3783830bde51f1318711841c6f28829659743","modified":1620044825889},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"590835d92f0b858d438294b4156c5c60a0e97a6c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"08175da821cb78685563442e57ad0e6bce06b0cb","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"8f7d08e45b17e8eddc80b4f40498d4a69aaa99f9","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"40ceff8941f42127c075b28e0c7c7e0662216228","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"2e8613832b25c357f4fdb3727008b6072f7c5cd3","modified":1620024636078},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"1aef8583d3fd1612c5c8925da4c27734212cdc7a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"39420c959078a7ce707fd840bd69a029b2c327c1","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.c06cd5c9.css","hash":"aa469c2008b51cde99d746a625926cac4ca4139c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.ef05802f.css","hash":"01aabc1cbf47a540cd13fffbf5904fdcec3c031a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.b41c8192.css","hash":"a9e18bba511907f5d78743c3de2a3945daf4c384","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"14a747487806e69f16ef7ad96580af0e9770167e","modified":1620034244672},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.7b21beee.css","hash":"6d411e50b41a96fefc2eac34a29da16f64af9eaa","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.f8376ea5.js","hash":"176f886666363eede1fc8f83bca537a33afefbac","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.7d1e319c.js","hash":"9bb840aca0bd21f8cf4dec9c45ee70b4f251d06f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.05f5177a.js","hash":"0514eff831651b716445553d2cc122f08c44dcb6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.cd195d1b.js","hash":"4f6bc0869d65833cb814a3f027d33aa738762045","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.58f43599.js","hash":"e80f709a5d7f32c0599fa166f7ce13a3d54018d6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.10796a8c.js","hash":"504ca763ed40fcdc5d4f0efe9b89d93703929cf8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.83a84bff.js","hash":"4ef46ad988dc93570d3c653630534fdff0ae5dd1","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.393261f6.js","hash":"6cd37b69992ec1bfe571b0ec72b4675c6a5c2ae8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"05cec8114c4c74fb9f61bb3a947530eb282f68f2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"a23122340b39b1611157c908228aed89329be2a9","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"4d0ad6c6e54846ade3303307f0bf49463c14422b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7091ec7e4f8b86ba867767e6819cc25fa1e93130","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"f0e164805ab754d9638e1b8c443ed140935fe561","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"b0fc392bc9a4f9b995156a06183da891d2829e4d","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/js/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.9b3ced64.js","hash":"a95c9484a610100008db504a6a58e7811392e1a7","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.17c5223b.js","hash":"2281f853db54d3082ffe272a28c792764d0cfa26","modified":1620042974749},{"_id":"public/api/site.json","hash":"12d19a71964a0d082fca856c145f45c5ecade2e4","modified":1620134819560},{"_id":"public/api/posts/1.json","hash":"d0a513db3478b38dc5527bdfda8fa902ce6bcffe","modified":1620134819560},{"_id":"public/api/articles/两数之和.json","hash":"5cde0ebf252cbae4309b5d87cd27badb328fd580","modified":1620134819560},{"_id":"public/api/articles/砖墙问题.json","hash":"031adc5c5a01e927365be4e494a20341e1762493","modified":1620134819560},{"_id":"public/api/articles/linux.json","hash":"5efff05c1d3f8154546441fe3f3db2ff8b4b7651","modified":1620134819560},{"_id":"public/api/features.json","hash":"28950814d1ab1804771908ca155669c134908b9b","modified":1620134819560},{"_id":"public/api/authors/blog-author.json","hash":"e281b7e14a6dc86d07f73d28baeb33a77277c876","modified":1620134819560},{"_id":"public/api/categories.json","hash":"e8e275bc5ca8aa6a2e386206ae40ecd48ba6b18d","modified":1620134532039},{"_id":"public/api/categories/linux.json","hash":"c36c605a87fd156ffa99d865999fe9c722b037d7","modified":1620134819560},{"_id":"public/api/categories/算法.json","hash":"42a98735807c84868bd1c13e339397fa8dafd10c","modified":1620134819560},{"_id":"public/api/tags.json","hash":"238b045596fa5c421f7c6dba763c2802c0ba02f2","modified":1620134532039},{"_id":"public/api/tags/linux.json","hash":"7277ba8c186c324b39b739a263f82f564c843f2b","modified":1620134819560},{"_id":"public/api/tags/Shell.json","hash":"68ca1a19fc25341e45a2d25ad5c49de1882080a5","modified":1620047132017},{"_id":"public/api/tags/算法.json","hash":"42a98735807c84868bd1c13e339397fa8dafd10c","modified":1620134819560},{"_id":"public/api/pages/about/index.json","hash":"29700e0e31e9af0c0d2416244872941e7fa7b356","modified":1620047132017},{"_id":"public/api/statistic.json","hash":"30122316992b54640dc083dd79e8a2228c92bdb1","modified":1620134532039},{"_id":"public/api/search.json","hash":"d71acf379400f148c96b15927ac05e6fc5096063","modified":1620134819560},{"_id":"public/post/两数之和.html","hash":"e7f826e1f88eb2bf8fcb30103314aa33a0efdade","modified":1620047132017},{"_id":"public/post/砖墙问题.html","hash":"e7f826e1f88eb2bf8fcb30103314aa33a0efdade","modified":1620047132017},{"_id":"public/post/linux.html","hash":"e7f826e1f88eb2bf8fcb30103314aa33a0efdade","modified":1620047132017},{"_id":"public/index.html","hash":"e7f826e1f88eb2bf8fcb30103314aa33a0efdade","modified":1620047132017},{"_id":"public/tags/index.html","hash":"e7f826e1f88eb2bf8fcb30103314aa33a0efdade","modified":1620047132017},{"_id":"public/archives/index.html","hash":"e7f826e1f88eb2bf8fcb30103314aa33a0efdade","modified":1620047132017},{"_id":"public/page/about/index.html","hash":"e7f826e1f88eb2bf8fcb30103314aa33a0efdade","modified":1620047132017},{"_id":"public/tags/search/index.html","hash":"e7f826e1f88eb2bf8fcb30103314aa33a0efdade","modified":1620047132017},{"_id":"public/svg/bilibili-fill.svg","hash":"b0f6428f535e292fec0a9a7d7160097c33b8c250","modified":1620047132017},{"_id":"public/svg/qq.svg","hash":"b2ed79161356aaeef1e08dd7f55aff71d5070716","modified":1620047132017},{"_id":"public/svg/github.svg","hash":"95e356da588979e3b3051aa301a5d75c3ccf7fcf","modified":1620047132017},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1620047132017},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1620047132017},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1620047132017},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1620047132017},{"_id":"public/images/head.jpg","hash":"108c18bb80f7fd2d3c594a6c3204e464b8be4487","modified":1620047132017},{"_id":"public/images/banners/VCG41N1169192820.jpg","hash":"b334f26acd6b881efe9df8de6f41dcc0368bdb2e","modified":1620047132017},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1620047132017},{"_id":"public/static/css/about.c06cd5c9.css","hash":"aa469c2008b51cde99d746a625926cac4ca4139c","modified":1620047132017},{"_id":"public/static/css/archives.b41c8192.css","hash":"a9e18bba511907f5d78743c3de2a3945daf4c384","modified":1620047132017},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1620047132017},{"_id":"public/static/css/page.7b21beee.css","hash":"6d411e50b41a96fefc2eac34a29da16f64af9eaa","modified":1620047132017},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"ef11bfe4ba4208c9498b81577db66a7b77b796d1","modified":1620047132017},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1620047132017},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1620047132017},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1620047132017},{"_id":"public/static/js/404.7d1e319c.js","hash":"9bb840aca0bd21f8cf4dec9c45ee70b4f251d06f","modified":1620047132017},{"_id":"public/static/js/archives.f8376ea5.js","hash":"176f886666363eede1fc8f83bca537a33afefbac","modified":1620047132017},{"_id":"public/static/js/about.05f5177a.js","hash":"0514eff831651b716445553d2cc122f08c44dcb6","modified":1620047132017},{"_id":"public/static/js/categories.cd195d1b.js","hash":"4f6bc0869d65833cb814a3f027d33aa738762045","modified":1620047132017},{"_id":"public/static/js/page.58f43599.js","hash":"e80f709a5d7f32c0599fa166f7ce13a3d54018d6","modified":1620047132017},{"_id":"public/static/js/post.10796a8c.js","hash":"504ca763ed40fcdc5d4f0efe9b89d93703929cf8","modified":1620047132017},{"_id":"public/static/js/result.83a84bff.js","hash":"4ef46ad988dc93570d3c653630534fdff0ae5dd1","modified":1620047132017},{"_id":"public/static/js/tags.393261f6.js","hash":"6cd37b69992ec1bfe571b0ec72b4675c6a5c2ae8","modified":1620047132017},{"_id":"public/images/banners/VCG211284641681.jpg","hash":"37228eecaa21e5099a43a4e6578ad3e82118af9a","modified":1620047132017},{"_id":"public/static/css/app.ef05802f.css","hash":"01aabc1cbf47a540cd13fffbf5904fdcec3c031a","modified":1620047132017},{"_id":"public/images/banners/VCG41533095859.jpg","hash":"e6b3783830bde51f1318711841c6f28829659743","modified":1620047132017},{"_id":"public/js/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1620047132017},{"_id":"public/static/js/chunk-libs.9b3ced64.js","hash":"a95c9484a610100008db504a6a58e7811392e1a7","modified":1620047132017},{"_id":"public/static/js/app.17c5223b.js","hash":"90314d38b7e02fd1cebf17fdce378643851b5ebe","modified":1620047132017},{"_id":"source/_posts/砖墙问题/]4J1%DD4FP`W`FJJI2%B}09.png","hash":"7a306f76cedd6bf239c3995e3c48a4e67ccb2544","modified":1620047408516},{"_id":"source/_posts/砖墙问题/querstion.png","hash":"caeb154d0d17aba3669164ce0f6c6d7de0b9be59","modified":1620047662582},{"_id":"public/post/砖墙问题/]4J1%DD4FP`W`FJJI2%B}09.png","hash":"7a306f76cedd6bf239c3995e3c48a4e67ccb2544","modified":1620047711163},{"_id":"public/post/砖墙问题/querstion.png","hash":"caeb154d0d17aba3669164ce0f6c6d7de0b9be59","modified":1620047711163},{"_id":"source/_posts/砖墙问题/wall.png","hash":"7a306f76cedd6bf239c3995e3c48a4e67ccb2544","modified":1620047408516},{"_id":"public/post/砖墙问题/wall.png","hash":"7a306f76cedd6bf239c3995e3c48a4e67ccb2544","modified":1620049221766},{"_id":"public/api/categories/算法/Python.json","hash":"5bd70ad3d4cc4f7926e725ccae88f398b55986d8","modified":1620049969626},{"_id":"public/api/tags/Python.json","hash":"87eb9f1d14d04a12b453cdf27c1f1c72f75cc159","modified":1620134819560},{"_id":"public/api/tags/Hash.json","hash":"20deae976d8f27faa4bcab2db4af50217ecd79b8","modified":1620134819560},{"_id":"source/_posts/7整数反转/image-20210504005805249.png","hash":"124978b6dfd06337516dbaedbe6bb34235bfe861","modified":1620061095828},{"_id":"source/_posts/7整数反转.md","hash":"c468486627e6a45529664cc924f712d9946beb6d","modified":1620111544951},{"_id":"source/images/banners/VCG211263245974.jpg","hash":"311ef2b828275e73991ccd000037693d5128264d","modified":1620060773284},{"_id":"public/api/articles/7整数反转.json","hash":"45cea9050087c9cd846069889a2cae1d27f84826","modified":1620134819560},{"_id":"public/post/7整数反转.html","hash":"e7f826e1f88eb2bf8fcb30103314aa33a0efdade","modified":1620061238091},{"_id":"public/post/7整数反转/image-20210504005805249.png","hash":"124978b6dfd06337516dbaedbe6bb34235bfe861","modified":1620061238091},{"_id":"public/images/banners/VCG211263245974.jpg","hash":"311ef2b828275e73991ccd000037693d5128264d","modified":1620061238091},{"_id":"source/_posts/7整数反转/image-20210504010425266.png","hash":"2edb6abdd9666f50102a9e9513831a256f931e3f","modified":1620061469966},{"_id":"public/post/7整数反转/image-20210504010425266.png","hash":"2edb6abdd9666f50102a9e9513831a256f931e3f","modified":1620064897567},{"_id":"source/_posts/shell脚本.md","hash":"ab4dacf3b6501724509b986225c48d380ac6e2d0","modified":1620134769662},{"_id":"source/_posts/vim操作宝典.md","hash":"b7c6060ae18355b0a1caafb659edd82c87a986a7","modified":1620134772471},{"_id":"source/images/banners/VCG41154059609.jpg","hash":"4302f6a1f4a22a91dba5983e3309c33216daa9b6","modified":1620134505088},{"_id":"source/images/banners/VCG41N1070447322.jpg","hash":"b41565abf2c017870ad553a8951ed0e53ba3a420","modified":1620134473337},{"_id":"public/api/articles/vim操作宝典.json","hash":"898dc28a799b334159ef07bb68a26427e34375d2","modified":1620134819560},{"_id":"public/api/articles/shell脚本.json","hash":"0f850db24efc61bdd777f29bacc8ca119f0c6aa7","modified":1620134819560},{"_id":"public/api/categories/Linux.json","hash":"7f3fcf924697b73a501d26626a9502189eccf7df","modified":1620134819560},{"_id":"public/api/categories/Linux/Sehll.json","hash":"bdb551bc112209d714cd3485614ae9fe6b562c3a","modified":1620134819560},{"_id":"public/api/categories/Linux/Vim.json","hash":"8732c4698b97439ce004f168ca5ae87f17bd3ecd","modified":1620134819560},{"_id":"public/api/tags/Vim.json","hash":"99ed1958cbe83f8327f95ba5b6d982448bf3db3a","modified":1620134819560},{"_id":"public/api/tags/Linux.json","hash":"b33c7c87fc19853aecd01936534e0a0d98c04f6c","modified":1620134819560},{"_id":"public/post/vim操作宝典.html","hash":"e7f826e1f88eb2bf8fcb30103314aa33a0efdade","modified":1620134532039},{"_id":"public/post/shell脚本.html","hash":"e7f826e1f88eb2bf8fcb30103314aa33a0efdade","modified":1620134532039},{"_id":"public/images/banners/VCG41N1070447322.jpg","hash":"b41565abf2c017870ad553a8951ed0e53ba3a420","modified":1620134532039},{"_id":"public/images/banners/VCG41154059609.jpg","hash":"4302f6a1f4a22a91dba5983e3309c33216daa9b6","modified":1620134532039},{"_id":"source/images/banners/VCG21gic18180994.jpg","hash":"dd8850f8a351b2e74afe5d4545ee6c9e26bc556b","modified":1620134747441},{"_id":"source/images/banners/VCG21gic13799691.jpg","hash":"d5dbbaeaa30db2ff2f9991906689cc00ebae29e2","modified":1620134715332},{"_id":"public/images/banners/VCG21gic18180994.jpg","hash":"dd8850f8a351b2e74afe5d4545ee6c9e26bc556b","modified":1620134819560},{"_id":"public/images/banners/VCG21gic13799691.jpg","hash":"d5dbbaeaa30db2ff2f9991906689cc00ebae29e2","modified":1620134819560}],"Category":[{"name":"linux","_id":"cko8m8fob00033guf8vjmccmz"},{"name":"算法","_id":"cko8m8foe00063guf7mpb3qyl"},{"name":"1算法","_id":"cko8nwt7r0000i0uf318y9d7t"},{"name":"-算法","_id":"cko8nwu0i0003i0ufbaud1svr"},{"name":"py","parent":"cko8m8foe00063guf7mpb3qyl","_id":"cko8nwxir0006i0ufaa1lfrrw"},{"name":"P","parent":"cko8m8foe00063guf7mpb3qyl","_id":"cko8nwy9x0008i0ufbqhif0al"},{"name":"Pt","parent":"cko8m8foe00063guf7mpb3qyl","_id":"cko8nwyjy000ai0uffso69lwg"},{"name":"Python","parent":"cko8m8foe00063guf7mpb3qyl","_id":"cko8nwzzt000di0uff48gf19s"},{"name":"Linux","_id":"ckoa29py40003f0ufhbiwbrre"},{"name":"Sehll","parent":"ckoa29py40003f0ufhbiwbrre","_id":"ckoa29py70008f0ufewbjaiy8"},{"name":"Vim","parent":"ckoa29py40003f0ufhbiwbrre","_id":"ckoa29py7000af0ufg7j5egbz"}],"Data":[],"Page":[{"title":"关于","date":"2021-05-03T07:26:23.000Z","tags":"关于","thumbnail":"/images/head.jpg","_content":"2021年5月23日，完成了这个博客网站，开启书写博客之路\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-05-03 15:26:23\ntags: 关于\nthumbnail: /images/head.jpg\n---\n2021年5月23日，完成了这个博客网站，开启书写博客之路\n\n","updated":"2021-05-03T11:04:22.231Z","path":"about/index.html","comments":1,"layout":"page","_id":"cko8m8fo100003gufami2bp8y","content":"<p>2021年5月23日，完成了这个博客网站，开启书写博客之路</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2021年5月23日，完成了这个博客网站，开启书写博客之路</p>\n"}],"Post":[{"title":"linux操作宝典","date":"2021-04-03T06:33:15.000Z","cover":"/images/banners/VCG211284641681.jpg","_content":"\n\n\n## 按内容搜索所有文件\n\n```\ngrep -rn \"hello,world!\" *\n```\n\n\t* 表示当前目录所有文件，也可以是某个文件名\n\t-r 是递归查找\n\t-n 是显示行号\n\t-R 查找所有文件包含子目录\n\t-i 忽略大小写\n\t-l 只列出匹配的文件名\n\t-L 列出不匹配的文件名\n\t-w 只匹配整个单词，而不是字符串的一部分（匹配 hello，不匹配helloo）\n\n\n\n## 排查内存占用\n\n### 1.排查磁盘满的节点，执行以下命令：\n\n```\ndf -h\n```\n\n### 2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\n\n\n```\ndu -sh * | grep G\n```\n\n### 3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\n\n```\ndu -sh * | grep G 或者 du -sh * | grep T\n```\n\n### 4.删除查找出来的异常文件命令：\n\n```\nrm -rf 文件名\n```\n\n### 5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\n\n\n```\nlsof -n | grep delete\n```\n\n### 6.找出已删除的文件但未释放内存的进程，然后释放进程。\n\n\n```\nkill -9 进程号\n```","source":"_posts/linux.md","raw":"---\ntitle: linux操作宝典 \ndate: 2021-04-03 14:33:15\ntags: Linux\ncategories: linux\ncover: /images/banners/VCG211284641681.jpg\n---\n\n\n\n## 按内容搜索所有文件\n\n```\ngrep -rn \"hello,world!\" *\n```\n\n\t* 表示当前目录所有文件，也可以是某个文件名\n\t-r 是递归查找\n\t-n 是显示行号\n\t-R 查找所有文件包含子目录\n\t-i 忽略大小写\n\t-l 只列出匹配的文件名\n\t-L 列出不匹配的文件名\n\t-w 只匹配整个单词，而不是字符串的一部分（匹配 hello，不匹配helloo）\n\n\n\n## 排查内存占用\n\n### 1.排查磁盘满的节点，执行以下命令：\n\n```\ndf -h\n```\n\n### 2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\n\n\n```\ndu -sh * | grep G\n```\n\n### 3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\n\n```\ndu -sh * | grep G 或者 du -sh * | grep T\n```\n\n### 4.删除查找出来的异常文件命令：\n\n```\nrm -rf 文件名\n```\n\n### 5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\n\n\n```\nlsof -n | grep delete\n```\n\n### 6.找出已删除的文件但未释放内存的进程，然后释放进程。\n\n\n```\nkill -9 进程号\n```","slug":"linux","published":1,"updated":"2021-05-04T13:23:29.296Z","_id":"cko8m8fo400013guf6hs05978","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"按内容搜索所有文件\"><a href=\"#按内容搜索所有文件\" class=\"headerlink\" title=\"按内容搜索所有文件\"></a>按内容搜索所有文件</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">grep -rn &quot;hello,world!&quot; *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre><code>* 表示当前目录所有文件，也可以是某个文件名\n-r 是递归查找\n-n 是显示行号\n-R 查找所有文件包含子目录\n-i 忽略大小写\n-l 只列出匹配的文件名\n-L 列出不匹配的文件名\n-w 只匹配整个单词，而不是字符串的一部分（匹配 hello，不匹配helloo）\n</code></pre>\n<h2 id=\"排查内存占用\"><a href=\"#排查内存占用\" class=\"headerlink\" title=\"排查内存占用\"></a>排查内存占用</h2><h3 id=\"1-排查磁盘满的节点，执行以下命令：\"><a href=\"#1-排查磁盘满的节点，执行以下命令：\" class=\"headerlink\" title=\"1.排查磁盘满的节点，执行以下命令：\"></a>1.排查磁盘满的节点，执行以下命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">df -h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-进入df-h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\"><a href=\"#2-进入df-h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\" class=\"headerlink\" title=\"2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\"></a>2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">du -sh * | grep G<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\"><a href=\"#3-进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\" class=\"headerlink\" title=\"3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\"></a>3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">du -sh * | grep G 或者 du -sh * | grep T<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-删除查找出来的异常文件命令：\"><a href=\"#4-删除查找出来的异常文件命令：\" class=\"headerlink\" title=\"4.删除查找出来的异常文件命令：\"></a>4.删除查找出来的异常文件命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">rm -rf 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\"><a href=\"#5-如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\" class=\"headerlink\" title=\"5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\"></a>5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">lsof -n | grep delete<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-找出已删除的文件但未释放内存的进程，然后释放进程。\"><a href=\"#6-找出已删除的文件但未释放内存的进程，然后释放进程。\" class=\"headerlink\" title=\"6.找出已删除的文件但未释放内存的进程，然后释放进程。\"></a>6.找出已删除的文件但未释放内存的进程，然后释放进程。</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">kill -9 进程号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"按内容搜索所有文件\"><a href=\"#按内容搜索所有文件\" class=\"headerlink\" title=\"按内容搜索所有文件\"></a>按内容搜索所有文件</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">grep -rn &quot;hello,world!&quot; *<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre><code>* 表示当前目录所有文件，也可以是某个文件名\n-r 是递归查找\n-n 是显示行号\n-R 查找所有文件包含子目录\n-i 忽略大小写\n-l 只列出匹配的文件名\n-L 列出不匹配的文件名\n-w 只匹配整个单词，而不是字符串的一部分（匹配 hello，不匹配helloo）\n</code></pre>\n<h2 id=\"排查内存占用\"><a href=\"#排查内存占用\" class=\"headerlink\" title=\"排查内存占用\"></a>排查内存占用</h2><h3 id=\"1-排查磁盘满的节点，执行以下命令：\"><a href=\"#1-排查磁盘满的节点，执行以下命令：\" class=\"headerlink\" title=\"1.排查磁盘满的节点，执行以下命令：\"></a>1.排查磁盘满的节点，执行以下命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">df -h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-进入df-h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\"><a href=\"#2-进入df-h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\" class=\"headerlink\" title=\"2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。\"></a>2.进入df -h查出的异常分区，执行以下命令，逐层往下找出耗磁盘的目录。</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">du -sh * | grep G<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\"><a href=\"#3-进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\" class=\"headerlink\" title=\"3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：\"></a>3.进入消耗磁盘的目录，找出消耗磁盘空间的异常文件，执行命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">du -sh * | grep G 或者 du -sh * | grep T<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-删除查找出来的异常文件命令：\"><a href=\"#4-删除查找出来的异常文件命令：\" class=\"headerlink\" title=\"4.删除查找出来的异常文件命令：\"></a>4.删除查找出来的异常文件命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">rm -rf 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\"><a href=\"#5-如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\" class=\"headerlink\" title=\"5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：\"></a>5.如果上面找不出异常文件消耗磁盘空间，有可能是已删除文件但未释放内存，占用了很大的空间，执行命令：</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">lsof -n | grep delete<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-找出已删除的文件但未释放内存的进程，然后释放进程。\"><a href=\"#6-找出已删除的文件但未释放内存的进程，然后释放进程。\" class=\"headerlink\" title=\"6.找出已删除的文件但未释放内存的进程，然后释放进程。\"></a>6.找出已删除的文件但未释放内存的进程，然后释放进程。</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">kill -9 进程号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"砖墙问题 leecode 554","date":"2021-05-03T06:22:29.000Z","cover":"/images/banners/VCG41N1070447322.jpg","feature":true,"_content":"题目：你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。\n\n你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。\n\n给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 \n\n\n![](/post/砖墙问题//querstion.png)\n\n输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n输出：2\n示例 2：\n\n输入：wall = [[1],[1],[1]]\n输出：3\n<!--more-->\n\n### 1、题目分析\n* 题目要求穿过的砖块数量最少，等效于通过他的间隙最多\n* 将所有行总数，减去间隙，就是穿过最少的砖块数\n* 记住，每行的间隙位置，就是砖的左侧宽度和\n\n![](/post/砖墙问题/wall.png)\n\n* 第 1 行的间隙有 [1,3,5]\n* 第 2 行的间隙有 [3,4]\n* 第 3 行的间隙有 [1,4]\n* 第 4 行的间隙有 [2]\n* 第 5 行的间隙有 [3,4]\n* 第 6 行的间隙有 [1,4,5]\n\n1. 上述的每行的每个值，代表间隙位置，单行的间隙位置不会相同出\n1. 统计间隙数，最后用总行数减去出现次数，即得到【最少穿过砖块数】\n\n## 解法1：使用hash表  52ms\n\n```python\nclass Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        hashtable = dict()\n        for w in wall:\n            # 记录每一块砖缝，出现次数\n            ans = 0   # 每一行墙，墙缝 \n            # 最后一块砖的墙缝不算, [:-1]代表只取到倒数每二个数\n            for num in w[:-1]:\n                # 统计墙缝\n                ans += num\n                hashtable[ans] = hashtable.get(ans, 0) + 1\n        # 判断，所有行只有一块砖，就直接穿过所有\n        if not hashtable:\n            return len(wall)\n        return len(wall) - max(hashtable.values())\n    \n```\n\n\n```","source":"_posts/砖墙问题.md","raw":"---\ntitle: 砖墙问题 leecode 554 \ndate: 2021-05-03 14:22:29\ntags: \n\t- 算法\n\t- Python\n\t- Hash\ncategories: \n\t- 算法\ncover: /images/banners/VCG41N1070447322.jpg\nfeature: true\n---\n题目：你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。\n\n你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。\n\n给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 \n\n\n![](/post/砖墙问题//querstion.png)\n\n输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n输出：2\n示例 2：\n\n输入：wall = [[1],[1],[1]]\n输出：3\n<!--more-->\n\n### 1、题目分析\n* 题目要求穿过的砖块数量最少，等效于通过他的间隙最多\n* 将所有行总数，减去间隙，就是穿过最少的砖块数\n* 记住，每行的间隙位置，就是砖的左侧宽度和\n\n![](/post/砖墙问题/wall.png)\n\n* 第 1 行的间隙有 [1,3,5]\n* 第 2 行的间隙有 [3,4]\n* 第 3 行的间隙有 [1,4]\n* 第 4 行的间隙有 [2]\n* 第 5 行的间隙有 [3,4]\n* 第 6 行的间隙有 [1,4,5]\n\n1. 上述的每行的每个值，代表间隙位置，单行的间隙位置不会相同出\n1. 统计间隙数，最后用总行数减去出现次数，即得到【最少穿过砖块数】\n\n## 解法1：使用hash表  52ms\n\n```python\nclass Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        hashtable = dict()\n        for w in wall:\n            # 记录每一块砖缝，出现次数\n            ans = 0   # 每一行墙，墙缝 \n            # 最后一块砖的墙缝不算, [:-1]代表只取到倒数每二个数\n            for num in w[:-1]:\n                # 统计墙缝\n                ans += num\n                hashtable[ans] = hashtable.get(ans, 0) + 1\n        # 判断，所有行只有一块砖，就直接穿过所有\n        if not hashtable:\n            return len(wall)\n        return len(wall) - max(hashtable.values())\n    \n```\n\n\n```","slug":"砖墙问题","published":1,"updated":"2021-05-04T13:23:17.706Z","_id":"cko8m8fo900023gufela85h5m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>题目：你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。</p>\n<p>你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。</p>\n<p>给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 </p>\n<p><img src=\"/post/%E7%A0%96%E5%A2%99%E9%97%AE%E9%A2%98/querstion.png\"></p>\n<p>输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]<br>输出：2<br>示例 2：</p>\n<p>输入：wall = [[1],[1],[1]]<br>输出：3</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1、题目分析\"><a href=\"#1、题目分析\" class=\"headerlink\" title=\"1、题目分析\"></a>1、题目分析</h3><ul>\n<li>题目要求穿过的砖块数量最少，等效于通过他的间隙最多</li>\n<li>将所有行总数，减去间隙，就是穿过最少的砖块数</li>\n<li>记住，每行的间隙位置，就是砖的左侧宽度和</li>\n</ul>\n<p><img src=\"/post/%E7%A0%96%E5%A2%99%E9%97%AE%E9%A2%98/wall.png\"></p>\n<ul>\n<li>第 1 行的间隙有 [1,3,5]</li>\n<li>第 2 行的间隙有 [3,4]</li>\n<li>第 3 行的间隙有 [1,4]</li>\n<li>第 4 行的间隙有 [2]</li>\n<li>第 5 行的间隙有 [3,4]</li>\n<li>第 6 行的间隙有 [1,4,5]</li>\n</ul>\n<ol>\n<li>上述的每行的每个值，代表间隙位置，单行的间隙位置不会相同出</li>\n<li>统计间隙数，最后用总行数减去出现次数，即得到【最少穿过砖块数】</li>\n</ol>\n<h2 id=\"解法1：使用hash表-52ms\"><a href=\"#解法1：使用hash表-52ms\" class=\"headerlink\" title=\"解法1：使用hash表  52ms\"></a>解法1：使用hash表  52ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">leastBricks</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> wall<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        hashtable <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> wall<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 记录每一块砖缝，出现次数</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span>   <span class=\"token comment\"># 每一行墙，墙缝 </span>\n            <span class=\"token comment\"># 最后一块砖的墙缝不算, [:-1]代表只取到倒数每二个数</span>\n            <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> w<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 统计墙缝</span>\n                ans <span class=\"token operator\">+=</span> num\n                hashtable<span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hashtable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># 判断，所有行只有一块砖，就直接穿过所有</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> hashtable<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>wall<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>wall<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>```</p>\n","site":{"data":{}},"excerpt":"<p>题目：你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。</p>\n<p>你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。</p>\n<p>给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 </p>\n<p><img src=\"/post/%E7%A0%96%E5%A2%99%E9%97%AE%E9%A2%98/querstion.png\"></p>\n<p>输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]<br>输出：2<br>示例 2：</p>\n<p>输入：wall = [[1],[1],[1]]<br>输出：3</p>","more":"<h3 id=\"1、题目分析\"><a href=\"#1、题目分析\" class=\"headerlink\" title=\"1、题目分析\"></a>1、题目分析</h3><ul>\n<li>题目要求穿过的砖块数量最少，等效于通过他的间隙最多</li>\n<li>将所有行总数，减去间隙，就是穿过最少的砖块数</li>\n<li>记住，每行的间隙位置，就是砖的左侧宽度和</li>\n</ul>\n<p><img src=\"/post/%E7%A0%96%E5%A2%99%E9%97%AE%E9%A2%98/wall.png\"></p>\n<ul>\n<li>第 1 行的间隙有 [1,3,5]</li>\n<li>第 2 行的间隙有 [3,4]</li>\n<li>第 3 行的间隙有 [1,4]</li>\n<li>第 4 行的间隙有 [2]</li>\n<li>第 5 行的间隙有 [3,4]</li>\n<li>第 6 行的间隙有 [1,4,5]</li>\n</ul>\n<ol>\n<li>上述的每行的每个值，代表间隙位置，单行的间隙位置不会相同出</li>\n<li>统计间隙数，最后用总行数减去出现次数，即得到【最少穿过砖块数】</li>\n</ol>\n<h2 id=\"解法1：使用hash表-52ms\"><a href=\"#解法1：使用hash表-52ms\" class=\"headerlink\" title=\"解法1：使用hash表  52ms\"></a>解法1：使用hash表  52ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">leastBricks</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> wall<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        hashtable <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> wall<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 记录每一块砖缝，出现次数</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span>   <span class=\"token comment\"># 每一行墙，墙缝 </span>\n            <span class=\"token comment\"># 最后一块砖的墙缝不算, [:-1]代表只取到倒数每二个数</span>\n            <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> w<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 统计墙缝</span>\n                ans <span class=\"token operator\">+=</span> num\n                hashtable<span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hashtable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># 判断，所有行只有一块砖，就直接穿过所有</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> hashtable<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>wall<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>wall<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>```</p>"},{"title":"两数之和 leetcode 1","date":"2021-05-03T11:55:20.000Z","cover":"/images/banners/VCG41154059609.jpg","feature":true,"_content":"题目：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案\n<!--more-->\n\n示例 1：\n\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n示例 2：\n\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n示例 3：\n\n输入：nums = [3,3], target = 6\n输出：[0,1]\n\n## 解法1  Hash表解法\n思路：\n1、hash表存入的数据key:nums , value :对应下标\n使用目标值target减去数组中的每一个数，如果得到的值，不在hash表中，继续循环，如果存在，那说明是要找的数，直接返回两个下标。\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        hash_table = dict()\n        for i,num in enumerate(nums):\n            if target - num in hash_table:\n                return [hash_table[target - num], i]\n            hash_table[num] = i\n```\n\n\n\n","source":"_posts/两数之和.md","raw":"---\ntitle: 两数之和 leetcode 1\ndate: 2021-05-03 19:55:20\ntags: \n\t- 算法\n\t- Python\n\t- Hash\ncategories: 算法\ncover: /images/banners/VCG41154059609.jpg\nfeature: true\n---\n题目：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案\n<!--more-->\n\n示例 1：\n\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n示例 2：\n\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n示例 3：\n\n输入：nums = [3,3], target = 6\n输出：[0,1]\n\n## 解法1  Hash表解法\n思路：\n1、hash表存入的数据key:nums , value :对应下标\n使用目标值target减去数组中的每一个数，如果得到的值，不在hash表中，继续循环，如果存在，那说明是要找的数，直接返回两个下标。\n```python\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        hash_table = dict()\n        for i,num in enumerate(nums):\n            if target - num in hash_table:\n                return [hash_table[target - num], i]\n            hash_table[num] = i\n```\n\n\n\n","slug":"两数之和","published":1,"updated":"2021-05-04T13:24:25.806Z","_id":"cko8m8fod00053guf6qs994mo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>题目：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案</p>\n<span id=\"more\"></span>\n\n<p>示例 1：</p>\n<p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br>示例 2：</p>\n<p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br>示例 3：</p>\n<p>输入：nums = [3,3], target = 6<br>输出：[0,1]</p>\n<h2 id=\"解法1-Hash表解法\"><a href=\"#解法1-Hash表解法\" class=\"headerlink\" title=\"解法1  Hash表解法\"></a>解法1  Hash表解法</h2><p>思路：<br>1、hash表存入的数据key:nums , value :对应下标<br>使用目标值target减去数组中的每一个数，如果得到的值，不在hash表中，继续循环，如果存在，那说明是要找的数，直接返回两个下标。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        hash_table <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>num <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> target <span class=\"token operator\">-</span> num <span class=\"token keyword\">in</span> hash_table<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>hash_table<span class=\"token punctuation\">[</span>target <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span>\n            hash_table<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","site":{"data":{}},"excerpt":"<p>题目：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案</p>","more":"<p>示例 1：</p>\n<p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br>示例 2：</p>\n<p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br>示例 3：</p>\n<p>输入：nums = [3,3], target = 6<br>输出：[0,1]</p>\n<h2 id=\"解法1-Hash表解法\"><a href=\"#解法1-Hash表解法\" class=\"headerlink\" title=\"解法1  Hash表解法\"></a>解法1  Hash表解法</h2><p>思路：<br>1、hash表存入的数据key:nums , value :对应下标<br>使用目标值target减去数组中的每一个数，如果得到的值，不在hash表中，继续循环，如果存在，那说明是要找的数，直接返回两个下标。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        hash_table <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>num <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> target <span class=\"token operator\">-</span> num <span class=\"token keyword\">in</span> hash_table<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>hash_table<span class=\"token punctuation\">[</span>target <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span>\n            hash_table<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"7整数反转","date":"2021-05-03T16:27:50.000Z","cover":"/images/banners/VCG211263245974.jpg","feature":true,"_content":"\n给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）\n\n## 1、解法1，未优化写法   40ms\n\n### 思路：\n   （1）这个题挺简单，就是通过%运算，每次都取到数的最后一位\n   （2）考虑到负数的问题，所以while那里使用了 x!=0，因为按这种方式计算，最后都会为0\n   （3）注意题目规定的整数范围，这里代码做了提前一位的判断。看下图解\n\n   ![](/post/7整数反转/image-20210504005805249.png)\n\n   第二排数字中，橘子的是5，它是大于上面同位置的4，这就意味着5后跟任何数字，都会比最大32为整数都大。\n   所以，我们到【最大数的1/10】时，就要开始判断了\n   如果某个数字**大于** 214748364那后面就不用再判断了，肯定溢出了。\n   如果某个数字**等于** 214748364呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的**末尾数字**比较，如果这个数字比**7**还大，说明溢出了。\n\n\n\n**负数也是一样：**\n\n![](/post/7整数反转/image-20210504010425266.png)\n\n上图中绿色部分是最小的32位整数，同样是在【最小数的 1/10】时开始判断\n如果某个数字**小于** -214748364说明溢出了\n如果某个数字**等于** -214748364，还需要跟最小数的**末尾比较**，即看它是否**小于8**\n\n### 遇到问题：\n\t因为Python 的%运算，是使用的floor的方式，在计算负数的时候，会出现和Java不同，所以，都转成正数来取模运算\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        reverse_num = 0\n        # 2147483647\n        # -2147483648\n        while(x != 0):\n            if x < 0:\n                tmp_num = -x % 10\n                tmp_num = -tmp_num\n            else:\n                tmp_num = x % 10\n            # 判断是否溢出\n            if (reverse_num > 214748364) or (reverse_num == 214748364 and tmp_num > 7):\n                return 0\n            if (reverse_num < -214748364) or (reverse_num == 214748364 and tmp_num > 7):\n                return 0\n            reverse_num = reverse_num * 10 + tmp_num\n            x = int(x/10)\n        return reverse_num\n```\n\n## 2、 将解法1所写的代码进行优化   32ms\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        # 2147483647\n        # -2147483648\n        y, res = abs(x), 0\n        while(y != 0):\n            tmp_num = y % 10\n            # 判断是否溢出\n            if res < -214748364:\n                return 0\n            if (res > 214748364) or (res == 214748364 and tmp_num > 7):\n                return 0\n            res = res * 10 + tmp_num\n            y = int(y/10)\n        return res if x > 0 else -res\n```\n\n## 3、使用字符串反转的方法  36ms\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        y = str(x)\n        ins = 1\n        res = \"\"\n        if y[0] == \"-\":\n            ins = -1\n            res = y[1:][::-1]\n        else:\n            res = y[::-1]\n        nums = int(res)\n        return 0 if nums <-2**31 or nums > 2**31-1 else (ins * nums)\n```\n\n### 题目总结：\n\t在用字符串反转的方法时，我发现Ptyhon这样将字符串进行转换，整型不会内存溢出，很好奇的我，去网上查阅了资料，发现Python3之后，都是统一使用了长整型\n\n现在是2021年5月4号零晨1:45分，这是我刷leetcode的第三道题，每次将自己写的一串很长的代码，优化成很简单，看着自己的代码运行时间越写越短，内心有一点无比自豪的感觉，很喜欢这种超越自己的，继续加油吧。哈哈哈哈哈哈","source":"_posts/7整数反转.md","raw":"---\ntitle: 7整数反转\ndate: 2021-05-04 00:27:50\ntags:\n\t- 算法\n\t- Python\ncategories: \n\t- 算法\ncover: /images/banners/VCG211263245974.jpg\nfeature: true\n---\n\n给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）\n\n## 1、解法1，未优化写法   40ms\n\n### 思路：\n   （1）这个题挺简单，就是通过%运算，每次都取到数的最后一位\n   （2）考虑到负数的问题，所以while那里使用了 x!=0，因为按这种方式计算，最后都会为0\n   （3）注意题目规定的整数范围，这里代码做了提前一位的判断。看下图解\n\n   ![](/post/7整数反转/image-20210504005805249.png)\n\n   第二排数字中，橘子的是5，它是大于上面同位置的4，这就意味着5后跟任何数字，都会比最大32为整数都大。\n   所以，我们到【最大数的1/10】时，就要开始判断了\n   如果某个数字**大于** 214748364那后面就不用再判断了，肯定溢出了。\n   如果某个数字**等于** 214748364呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的**末尾数字**比较，如果这个数字比**7**还大，说明溢出了。\n\n\n\n**负数也是一样：**\n\n![](/post/7整数反转/image-20210504010425266.png)\n\n上图中绿色部分是最小的32位整数，同样是在【最小数的 1/10】时开始判断\n如果某个数字**小于** -214748364说明溢出了\n如果某个数字**等于** -214748364，还需要跟最小数的**末尾比较**，即看它是否**小于8**\n\n### 遇到问题：\n\t因为Python 的%运算，是使用的floor的方式，在计算负数的时候，会出现和Java不同，所以，都转成正数来取模运算\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        reverse_num = 0\n        # 2147483647\n        # -2147483648\n        while(x != 0):\n            if x < 0:\n                tmp_num = -x % 10\n                tmp_num = -tmp_num\n            else:\n                tmp_num = x % 10\n            # 判断是否溢出\n            if (reverse_num > 214748364) or (reverse_num == 214748364 and tmp_num > 7):\n                return 0\n            if (reverse_num < -214748364) or (reverse_num == 214748364 and tmp_num > 7):\n                return 0\n            reverse_num = reverse_num * 10 + tmp_num\n            x = int(x/10)\n        return reverse_num\n```\n\n## 2、 将解法1所写的代码进行优化   32ms\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        # 2147483647\n        # -2147483648\n        y, res = abs(x), 0\n        while(y != 0):\n            tmp_num = y % 10\n            # 判断是否溢出\n            if res < -214748364:\n                return 0\n            if (res > 214748364) or (res == 214748364 and tmp_num > 7):\n                return 0\n            res = res * 10 + tmp_num\n            y = int(y/10)\n        return res if x > 0 else -res\n```\n\n## 3、使用字符串反转的方法  36ms\n```python\nclass Solution:\n    def reverse(self, x: int) -> int:\n        y = str(x)\n        ins = 1\n        res = \"\"\n        if y[0] == \"-\":\n            ins = -1\n            res = y[1:][::-1]\n        else:\n            res = y[::-1]\n        nums = int(res)\n        return 0 if nums <-2**31 or nums > 2**31-1 else (ins * nums)\n```\n\n### 题目总结：\n\t在用字符串反转的方法时，我发现Ptyhon这样将字符串进行转换，整型不会内存溢出，很好奇的我，去网上查阅了资料，发现Python3之后，都是统一使用了长整型\n\n现在是2021年5月4号零晨1:45分，这是我刷leetcode的第三道题，每次将自己写的一串很长的代码，优化成很简单，看着自己的代码运行时间越写越短，内心有一点无比自豪的感觉，很喜欢这种超越自己的，继续加油吧。哈哈哈哈哈哈","slug":"7整数反转","published":1,"updated":"2021-05-04T13:23:45.839Z","_id":"cko8umry800007ouf554i9su4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）</p>\n<h2 id=\"1、解法1，未优化写法-40ms\"><a href=\"#1、解法1，未优化写法-40ms\" class=\"headerlink\" title=\"1、解法1，未优化写法   40ms\"></a>1、解法1，未优化写法   40ms</h2><h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>   （1）这个题挺简单，就是通过%运算，每次都取到数的最后一位<br>   （2）考虑到负数的问题，所以while那里使用了 x!=0，因为按这种方式计算，最后都会为0<br>   （3）注意题目规定的整数范围，这里代码做了提前一位的判断。看下图解</p>\n<p>   <img src=\"/post/7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/image-20210504005805249.png\"></p>\n<p>   第二排数字中，橘子的是5，它是大于上面同位置的4，这就意味着5后跟任何数字，都会比最大32为整数都大。<br>   所以，我们到【最大数的1/10】时，就要开始判断了<br>   如果某个数字<strong>大于</strong> 214748364那后面就不用再判断了，肯定溢出了。<br>   如果某个数字<strong>等于</strong> 214748364呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的<strong>末尾数字</strong>比较，如果这个数字比<strong>7</strong>还大，说明溢出了。</p>\n<p><strong>负数也是一样：</strong></p>\n<p><img src=\"/post/7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/image-20210504010425266.png\"></p>\n<p>上图中绿色部分是最小的32位整数，同样是在【最小数的 1/10】时开始判断<br>如果某个数字<strong>小于</strong> -214748364说明溢出了<br>如果某个数字<strong>等于</strong> -214748364，还需要跟最小数的<strong>末尾比较</strong>，即看它是否<strong>小于8</strong></p>\n<h3 id=\"遇到问题：\"><a href=\"#遇到问题：\" class=\"headerlink\" title=\"遇到问题：\"></a>遇到问题：</h3><pre><code>因为Python 的%运算，是使用的floor的方式，在计算负数的时候，会出现和Java不同，所以，都转成正数来取模运算\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        reverse_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token comment\"># 2147483647</span>\n        <span class=\"token comment\"># -2147483648</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                tmp_num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n                tmp_num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>tmp_num\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tmp_num <span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            <span class=\"token comment\"># 判断是否溢出</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">></span> <span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            reverse_num <span class=\"token operator\">=</span> reverse_num <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> tmp_num\n            x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> reverse_num<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2、-将解法1所写的代码进行优化-32ms\"><a href=\"#2、-将解法1所写的代码进行优化-32ms\" class=\"headerlink\" title=\"2、 将解法1所写的代码进行优化   32ms\"></a>2、 将解法1所写的代码进行优化   32ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 2147483647</span>\n        <span class=\"token comment\"># -2147483648</span>\n        y<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            tmp_num <span class=\"token operator\">=</span> y <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            <span class=\"token comment\"># 判断是否溢出</span>\n            <span class=\"token keyword\">if</span> res <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">214748364</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">></span> <span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> tmp_num\n            y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span>res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3、使用字符串反转的方法-36ms\"><a href=\"#3、使用字符串反转的方法-36ms\" class=\"headerlink\" title=\"3、使用字符串反转的方法  36ms\"></a>3、使用字符串反转的方法  36ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        ins <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">:</span>\n            ins <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            res <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> nums <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span> <span class=\"token keyword\">or</span> nums <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>ins <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"题目总结：\"><a href=\"#题目总结：\" class=\"headerlink\" title=\"题目总结：\"></a>题目总结：</h3><pre><code>在用字符串反转的方法时，我发现Ptyhon这样将字符串进行转换，整型不会内存溢出，很好奇的我，去网上查阅了资料，发现Python3之后，都是统一使用了长整型\n</code></pre>\n<p>现在是2021年5月4号零晨1:45分，这是我刷leetcode的第三道题，每次将自己写的一串很长的代码，优化成很简单，看着自己的代码运行时间越写越短，内心有一点无比自豪的感觉，很喜欢这种超越自己的，继续加油吧。哈哈哈哈哈哈</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）</p>\n<h2 id=\"1、解法1，未优化写法-40ms\"><a href=\"#1、解法1，未优化写法-40ms\" class=\"headerlink\" title=\"1、解法1，未优化写法   40ms\"></a>1、解法1，未优化写法   40ms</h2><h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>   （1）这个题挺简单，就是通过%运算，每次都取到数的最后一位<br>   （2）考虑到负数的问题，所以while那里使用了 x!=0，因为按这种方式计算，最后都会为0<br>   （3）注意题目规定的整数范围，这里代码做了提前一位的判断。看下图解</p>\n<p>   <img src=\"/post/7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/image-20210504005805249.png\"></p>\n<p>   第二排数字中，橘子的是5，它是大于上面同位置的4，这就意味着5后跟任何数字，都会比最大32为整数都大。<br>   所以，我们到【最大数的1/10】时，就要开始判断了<br>   如果某个数字<strong>大于</strong> 214748364那后面就不用再判断了，肯定溢出了。<br>   如果某个数字<strong>等于</strong> 214748364呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的<strong>末尾数字</strong>比较，如果这个数字比<strong>7</strong>还大，说明溢出了。</p>\n<p><strong>负数也是一样：</strong></p>\n<p><img src=\"/post/7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/image-20210504010425266.png\"></p>\n<p>上图中绿色部分是最小的32位整数，同样是在【最小数的 1/10】时开始判断<br>如果某个数字<strong>小于</strong> -214748364说明溢出了<br>如果某个数字<strong>等于</strong> -214748364，还需要跟最小数的<strong>末尾比较</strong>，即看它是否<strong>小于8</strong></p>\n<h3 id=\"遇到问题：\"><a href=\"#遇到问题：\" class=\"headerlink\" title=\"遇到问题：\"></a>遇到问题：</h3><pre><code>因为Python 的%运算，是使用的floor的方式，在计算负数的时候，会出现和Java不同，所以，都转成正数来取模运算\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        reverse_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token comment\"># 2147483647</span>\n        <span class=\"token comment\"># -2147483648</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                tmp_num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n                tmp_num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>tmp_num\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tmp_num <span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            <span class=\"token comment\"># 判断是否溢出</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">></span> <span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            reverse_num <span class=\"token operator\">=</span> reverse_num <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> tmp_num\n            x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> reverse_num<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2、-将解法1所写的代码进行优化-32ms\"><a href=\"#2、-将解法1所写的代码进行优化-32ms\" class=\"headerlink\" title=\"2、 将解法1所写的代码进行优化   32ms\"></a>2、 将解法1所写的代码进行优化   32ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 2147483647</span>\n        <span class=\"token comment\"># -2147483648</span>\n        y<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            tmp_num <span class=\"token operator\">=</span> y <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            <span class=\"token comment\"># 判断是否溢出</span>\n            <span class=\"token keyword\">if</span> res <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">214748364</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">></span> <span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> tmp_num\n            y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span>res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3、使用字符串反转的方法-36ms\"><a href=\"#3、使用字符串反转的方法-36ms\" class=\"headerlink\" title=\"3、使用字符串反转的方法  36ms\"></a>3、使用字符串反转的方法  36ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        ins <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">:</span>\n            ins <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            res <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> nums <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span> <span class=\"token keyword\">or</span> nums <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>ins <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"题目总结：\"><a href=\"#题目总结：\" class=\"headerlink\" title=\"题目总结：\"></a>题目总结：</h3><pre><code>在用字符串反转的方法时，我发现Ptyhon这样将字符串进行转换，整型不会内存溢出，很好奇的我，去网上查阅了资料，发现Python3之后，都是统一使用了长整型\n</code></pre>\n<p>现在是2021年5月4号零晨1:45分，这是我刷leetcode的第三道题，每次将自己写的一串很长的代码，优化成很简单，看着自己的代码运行时间越写越短，内心有一点无比自豪的感觉，很喜欢这种超越自己的，继续加油吧。哈哈哈哈哈哈</p>\n"},{"title":"shell脚本","date":"2021-05-04T11:55:39.000Z","cover":"/images/banners/VCG41N1169192820.jpg","_content":"\n\n\n###  清屏\n```shell\nclear\n```\n### 输出换行，两个\n```shell\necho -e \"\\n\\n\"\n```\n### 休息一秒\n```shell\nsleep 1\n```\n### 输出用户数\n```shell\nwho | awk '{print $1}' | sort | uniq | wc -l\n```\n### 让计算机发出蜂鸣声\n```shell\necho -en \"\\007\"\n```\n\n### 判断文件夹是否存在\n```shell\nif [ ! -d \"./QQ/\" ];\nthen\n  mkdir QQ\nelse\n  echo \"文件夹存在\"\nfi\n```\n### 文件目录追加到文件中\n```shell\nls >> 文件名\n```\n\n### 输出白底黑字的文字\n```shell\necho -e \"\\033[47;30m Now at your service,*Zhu-Zhi-Wu* \\033[0m\"\n```\n\n### 监听键盘输入任意键\n```shell\nread -n 1 -p \"the End…\"\n```\n\n\n\n### 输入三个数，输出最大数\n\n```shell\nprintf \"请输入三个书：\\n\"\nread first_num\nread secend_num\nread thd_num\nif [ $first_num -gt $secend_num ]\nthen\n  max=$first_num\nelse\n  max=$secend_num\nfi\n\nif [ $thd_num -gt $max ]\nthen\n  max=$thd_num\nfi\n\necho \"$max\"\n```","source":"_posts/shell脚本.md","raw":"---\ntitle: shell脚本\ndate: 2021-05-04 19:55:39\ntags: linux\ncategories: \n  - Linux\n  - Sehll\ncover: /images/banners/VCG41N1169192820.jpg\n---\n\n\n\n###  清屏\n```shell\nclear\n```\n### 输出换行，两个\n```shell\necho -e \"\\n\\n\"\n```\n### 休息一秒\n```shell\nsleep 1\n```\n### 输出用户数\n```shell\nwho | awk '{print $1}' | sort | uniq | wc -l\n```\n### 让计算机发出蜂鸣声\n```shell\necho -en \"\\007\"\n```\n\n### 判断文件夹是否存在\n```shell\nif [ ! -d \"./QQ/\" ];\nthen\n  mkdir QQ\nelse\n  echo \"文件夹存在\"\nfi\n```\n### 文件目录追加到文件中\n```shell\nls >> 文件名\n```\n\n### 输出白底黑字的文字\n```shell\necho -e \"\\033[47;30m Now at your service,*Zhu-Zhi-Wu* \\033[0m\"\n```\n\n### 监听键盘输入任意键\n```shell\nread -n 1 -p \"the End…\"\n```\n\n\n\n### 输入三个数，输出最大数\n\n```shell\nprintf \"请输入三个书：\\n\"\nread first_num\nread secend_num\nread thd_num\nif [ $first_num -gt $secend_num ]\nthen\n  max=$first_num\nelse\n  max=$secend_num\nfi\n\nif [ $thd_num -gt $max ]\nthen\n  max=$thd_num\nfi\n\necho \"$max\"\n```","slug":"shell脚本","published":1,"updated":"2021-05-04T13:26:09.662Z","_id":"ckoa29pxz0000f0uf1ka7ggr9","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"清屏\"><a href=\"#清屏\" class=\"headerlink\" title=\"清屏\"></a>清屏</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">clear<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"输出换行，两个\"><a href=\"#输出换行，两个\" class=\"headerlink\" title=\"输出换行，两个\"></a>输出换行，两个</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">echo -e &quot;\\n\\n&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"休息一秒\"><a href=\"#休息一秒\" class=\"headerlink\" title=\"休息一秒\"></a>休息一秒</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sleep 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"输出用户数\"><a href=\"#输出用户数\" class=\"headerlink\" title=\"输出用户数\"></a>输出用户数</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">who | awk &#39;&#123;print $1&#125;&#39; | sort | uniq | wc -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"让计算机发出蜂鸣声\"><a href=\"#让计算机发出蜂鸣声\" class=\"headerlink\" title=\"让计算机发出蜂鸣声\"></a>让计算机发出蜂鸣声</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">echo -en &quot;\\007&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"判断文件夹是否存在\"><a href=\"#判断文件夹是否存在\" class=\"headerlink\" title=\"判断文件夹是否存在\"></a>判断文件夹是否存在</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">if [ ! -d &quot;.&#x2F;QQ&#x2F;&quot; ];\nthen\n  mkdir QQ\nelse\n  echo &quot;文件夹存在&quot;\nfi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"文件目录追加到文件中\"><a href=\"#文件目录追加到文件中\" class=\"headerlink\" title=\"文件目录追加到文件中\"></a>文件目录追加到文件中</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ls &gt;&gt; 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"输出白底黑字的文字\"><a href=\"#输出白底黑字的文字\" class=\"headerlink\" title=\"输出白底黑字的文字\"></a>输出白底黑字的文字</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">echo -e &quot;\\033[47;30m Now at your service,*Zhu-Zhi-Wu* \\033[0m&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"监听键盘输入任意键\"><a href=\"#监听键盘输入任意键\" class=\"headerlink\" title=\"监听键盘输入任意键\"></a>监听键盘输入任意键</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">read -n 1 -p &quot;the End…&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"输入三个数，输出最大数\"><a href=\"#输入三个数，输出最大数\" class=\"headerlink\" title=\"输入三个数，输出最大数\"></a>输入三个数，输出最大数</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">printf &quot;请输入三个书：\\n&quot;\nread first_num\nread secend_num\nread thd_num\nif [ $first_num -gt $secend_num ]\nthen\n  max&#x3D;$first_num\nelse\n  max&#x3D;$secend_num\nfi\n\nif [ $thd_num -gt $max ]\nthen\n  max&#x3D;$thd_num\nfi\n\necho &quot;$max&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"清屏\"><a href=\"#清屏\" class=\"headerlink\" title=\"清屏\"></a>清屏</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">clear<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"输出换行，两个\"><a href=\"#输出换行，两个\" class=\"headerlink\" title=\"输出换行，两个\"></a>输出换行，两个</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">echo -e &quot;\\n\\n&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"休息一秒\"><a href=\"#休息一秒\" class=\"headerlink\" title=\"休息一秒\"></a>休息一秒</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sleep 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"输出用户数\"><a href=\"#输出用户数\" class=\"headerlink\" title=\"输出用户数\"></a>输出用户数</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">who | awk &#39;&#123;print $1&#125;&#39; | sort | uniq | wc -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"让计算机发出蜂鸣声\"><a href=\"#让计算机发出蜂鸣声\" class=\"headerlink\" title=\"让计算机发出蜂鸣声\"></a>让计算机发出蜂鸣声</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">echo -en &quot;\\007&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"判断文件夹是否存在\"><a href=\"#判断文件夹是否存在\" class=\"headerlink\" title=\"判断文件夹是否存在\"></a>判断文件夹是否存在</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">if [ ! -d &quot;.&#x2F;QQ&#x2F;&quot; ];\nthen\n  mkdir QQ\nelse\n  echo &quot;文件夹存在&quot;\nfi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"文件目录追加到文件中\"><a href=\"#文件目录追加到文件中\" class=\"headerlink\" title=\"文件目录追加到文件中\"></a>文件目录追加到文件中</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ls &gt;&gt; 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"输出白底黑字的文字\"><a href=\"#输出白底黑字的文字\" class=\"headerlink\" title=\"输出白底黑字的文字\"></a>输出白底黑字的文字</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">echo -e &quot;\\033[47;30m Now at your service,*Zhu-Zhi-Wu* \\033[0m&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"监听键盘输入任意键\"><a href=\"#监听键盘输入任意键\" class=\"headerlink\" title=\"监听键盘输入任意键\"></a>监听键盘输入任意键</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">read -n 1 -p &quot;the End…&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"输入三个数，输出最大数\"><a href=\"#输入三个数，输出最大数\" class=\"headerlink\" title=\"输入三个数，输出最大数\"></a>输入三个数，输出最大数</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">printf &quot;请输入三个书：\\n&quot;\nread first_num\nread secend_num\nread thd_num\nif [ $first_num -gt $secend_num ]\nthen\n  max&#x3D;$first_num\nelse\n  max&#x3D;$secend_num\nfi\n\nif [ $thd_num -gt $max ]\nthen\n  max&#x3D;$thd_num\nfi\n\necho &quot;$max&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"vim操作宝典","date":"2021-05-04T12:41:12.000Z","cover":"/images/banners/VCG21gic18180994.jpg","_content":"\n\n\n### 在行尾插入\n\t视图模式：a 键\n\n### 在行上方或者下方插入\n\n```\n两个都是字母\no：在下方\nO：在上方\n```\n\n### 合并两行\n\n```shell\n视图模式：J\n```\n\n### 多行注释\n\n```\n    （1）首先按键盘上的ESC进入命令行模式\n    （2）再按Ctrl+V进入VISUAL BLOCK模式\n    （3）利用上下左右键调整需要注释多少行以及行的宽度\n    （4）再按Shift+i或s进入插入模式\n    （5）输入代表注释的符号，比如#\n    （6）再次按ESC键，这时就可完成多行注释（可能需要等上一会，不要着急）\n```\n\n\n### 去注释\n\n```\n    （1）:起始行号,结束行号s/^/注释符/g\n```\n### 打开目录\n\n```\n    nt\n```\n\n### 纵向分屏，复制当前窗口\n```\n    : vsp\n```\n### 在当前窗口切换编辑文件\n\n```\n    : e 文件路径\n```\n\n### 粘贴历史行\n```\n    \"3p  （中间数字1到9）\n```","source":"_posts/vim操作宝典.md","raw":"---\ntitle: vim操作宝典\ndate: 2021-05-04 20:41:12\ntags: Vim\ncategories: \n  - Linux\n  - Vim\ncover: /images/banners/VCG21gic18180994.jpg\n---\n\n\n\n### 在行尾插入\n\t视图模式：a 键\n\n### 在行上方或者下方插入\n\n```\n两个都是字母\no：在下方\nO：在上方\n```\n\n### 合并两行\n\n```shell\n视图模式：J\n```\n\n### 多行注释\n\n```\n    （1）首先按键盘上的ESC进入命令行模式\n    （2）再按Ctrl+V进入VISUAL BLOCK模式\n    （3）利用上下左右键调整需要注释多少行以及行的宽度\n    （4）再按Shift+i或s进入插入模式\n    （5）输入代表注释的符号，比如#\n    （6）再次按ESC键，这时就可完成多行注释（可能需要等上一会，不要着急）\n```\n\n\n### 去注释\n\n```\n    （1）:起始行号,结束行号s/^/注释符/g\n```\n### 打开目录\n\n```\n    nt\n```\n\n### 纵向分屏，复制当前窗口\n```\n    : vsp\n```\n### 在当前窗口切换编辑文件\n\n```\n    : e 文件路径\n```\n\n### 粘贴历史行\n```\n    \"3p  （中间数字1到9）\n```","slug":"vim操作宝典","published":1,"updated":"2021-05-04T13:26:12.471Z","_id":"ckoa29py30002f0uf97feewvg","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"在行尾插入\"><a href=\"#在行尾插入\" class=\"headerlink\" title=\"在行尾插入\"></a>在行尾插入</h3><pre><code>视图模式：a 键\n</code></pre>\n<h3 id=\"在行上方或者下方插入\"><a href=\"#在行上方或者下方插入\" class=\"headerlink\" title=\"在行上方或者下方插入\"></a>在行上方或者下方插入</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">两个都是字母\no：在下方\nO：在上方<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"合并两行\"><a href=\"#合并两行\" class=\"headerlink\" title=\"合并两行\"></a>合并两行</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">视图模式：J<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"多行注释\"><a href=\"#多行注释\" class=\"headerlink\" title=\"多行注释\"></a>多行注释</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">（1）首先按键盘上的ESC进入命令行模式\n（2）再按Ctrl+V进入VISUAL BLOCK模式\n（3）利用上下左右键调整需要注释多少行以及行的宽度\n（4）再按Shift+i或s进入插入模式\n（5）输入代表注释的符号，比如#\n（6）再次按ESC键，这时就可完成多行注释（可能需要等上一会，不要着急）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"去注释\"><a href=\"#去注释\" class=\"headerlink\" title=\"去注释\"></a>去注释</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">（1）:起始行号,结束行号s&#x2F;^&#x2F;注释符&#x2F;g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"打开目录\"><a href=\"#打开目录\" class=\"headerlink\" title=\"打开目录\"></a>打开目录</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">nt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"纵向分屏，复制当前窗口\"><a href=\"#纵向分屏，复制当前窗口\" class=\"headerlink\" title=\"纵向分屏，复制当前窗口\"></a>纵向分屏，复制当前窗口</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">: vsp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"在当前窗口切换编辑文件\"><a href=\"#在当前窗口切换编辑文件\" class=\"headerlink\" title=\"在当前窗口切换编辑文件\"></a>在当前窗口切换编辑文件</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">: e 文件路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"粘贴历史行\"><a href=\"#粘贴历史行\" class=\"headerlink\" title=\"粘贴历史行\"></a>粘贴历史行</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;3p  （中间数字1到9）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"在行尾插入\"><a href=\"#在行尾插入\" class=\"headerlink\" title=\"在行尾插入\"></a>在行尾插入</h3><pre><code>视图模式：a 键\n</code></pre>\n<h3 id=\"在行上方或者下方插入\"><a href=\"#在行上方或者下方插入\" class=\"headerlink\" title=\"在行上方或者下方插入\"></a>在行上方或者下方插入</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">两个都是字母\no：在下方\nO：在上方<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"合并两行\"><a href=\"#合并两行\" class=\"headerlink\" title=\"合并两行\"></a>合并两行</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">视图模式：J<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"多行注释\"><a href=\"#多行注释\" class=\"headerlink\" title=\"多行注释\"></a>多行注释</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">（1）首先按键盘上的ESC进入命令行模式\n（2）再按Ctrl+V进入VISUAL BLOCK模式\n（3）利用上下左右键调整需要注释多少行以及行的宽度\n（4）再按Shift+i或s进入插入模式\n（5）输入代表注释的符号，比如#\n（6）再次按ESC键，这时就可完成多行注释（可能需要等上一会，不要着急）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"去注释\"><a href=\"#去注释\" class=\"headerlink\" title=\"去注释\"></a>去注释</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">（1）:起始行号,结束行号s&#x2F;^&#x2F;注释符&#x2F;g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"打开目录\"><a href=\"#打开目录\" class=\"headerlink\" title=\"打开目录\"></a>打开目录</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">nt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"纵向分屏，复制当前窗口\"><a href=\"#纵向分屏，复制当前窗口\" class=\"headerlink\" title=\"纵向分屏，复制当前窗口\"></a>纵向分屏，复制当前窗口</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">: vsp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"在当前窗口切换编辑文件\"><a href=\"#在当前窗口切换编辑文件\" class=\"headerlink\" title=\"在当前窗口切换编辑文件\"></a>在当前窗口切换编辑文件</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">: e 文件路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"粘贴历史行\"><a href=\"#粘贴历史行\" class=\"headerlink\" title=\"粘贴历史行\"></a>粘贴历史行</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;3p  （中间数字1到9）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"}],"PostAsset":[{"_id":"source/_posts/砖墙问题/querstion.png","slug":"querstion.png","post":"cko8m8fo900023gufela85h5m","modified":0,"renderable":0},{"_id":"source/_posts/砖墙问题/wall.png","slug":"wall.png","post":"cko8m8fo900023gufela85h5m","modified":0,"renderable":0},{"_id":"source/_posts/7整数反转/image-20210504005805249.png","slug":"image-20210504005805249.png","post":"cko8umry800007ouf554i9su4","modified":0,"renderable":0},{"_id":"source/_posts/7整数反转/image-20210504010425266.png","slug":"image-20210504010425266.png","post":"cko8umry800007ouf554i9su4","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cko8m8fo400013guf6hs05978","category_id":"cko8m8fob00033guf8vjmccmz","_id":"cko8m8fof00093gufcc0i4tah"},{"post_id":"cko8m8fod00053guf6qs994mo","category_id":"cko8m8foe00063guf7mpb3qyl","_id":"cko8m8foh000f3gufa3t61plf"},{"post_id":"cko8m8fo900023gufela85h5m","category_id":"cko8m8foe00063guf7mpb3qyl","_id":"cko8nwuay0005i0uf7033gb2v"},{"post_id":"cko8umry800007ouf554i9su4","category_id":"cko8m8foe00063guf7mpb3qyl","_id":"cko8umryc00037oufddy6bnkb"},{"post_id":"ckoa29pxz0000f0uf1ka7ggr9","category_id":"ckoa29py40003f0ufhbiwbrre","_id":"ckoa29py8000bf0uf4vv42tg7"},{"post_id":"ckoa29pxz0000f0uf1ka7ggr9","category_id":"ckoa29py70008f0ufewbjaiy8","_id":"ckoa29py8000cf0uf61h99i50"},{"post_id":"ckoa29py30002f0uf97feewvg","category_id":"ckoa29py40003f0ufhbiwbrre","_id":"ckoa29py8000df0uf2urh7y7l"},{"post_id":"ckoa29py30002f0uf97feewvg","category_id":"ckoa29py7000af0ufg7j5egbz","_id":"ckoa29py8000ef0uf9n8v8oq4"}],"PostTag":[{"post_id":"cko8m8fod00053guf6qs994mo","tag_id":"cko8m8fof000b3guf1169d11c","_id":"cko8m8foh000e3gufbcuec7k9"},{"post_id":"cko8m8fo900023gufela85h5m","tag_id":"cko8m8fof000b3guf1169d11c","_id":"cko8mge9u0002zkuf4pamdj75"},{"post_id":"cko8m8fo900023gufela85h5m","tag_id":"cko8nz2ff0005d8uf2tjw3lyl","_id":"cko8nz2ff0006d8ufgfoqgs0s"},{"post_id":"cko8m8fo900023gufela85h5m","tag_id":"cko8nz44b0009d8uf3uzs2q0d","_id":"cko8nz44b000ad8ufd2wgff9d"},{"post_id":"cko8m8fod00053guf6qs994mo","tag_id":"cko8nz2ff0005d8uf2tjw3lyl","_id":"cko8o0dow000cd8uffspcf310"},{"post_id":"cko8m8fod00053guf6qs994mo","tag_id":"cko8nz44b0009d8uf3uzs2q0d","_id":"cko8o0dox000dd8uf0l7ydn8t"},{"post_id":"cko8umry800007ouf554i9su4","tag_id":"cko8m8fof000b3guf1169d11c","_id":"cko8umryc00017oufepojcm5o"},{"post_id":"cko8umry800007ouf554i9su4","tag_id":"cko8nz2ff0005d8uf2tjw3lyl","_id":"cko8umryc00027oufeios3j3z"},{"post_id":"ckoa29pxz0000f0uf1ka7ggr9","tag_id":"cko8m8foc00043guf0de357zz","_id":"ckoa29py40004f0ufhacfeke3"},{"post_id":"cko8m8fo400013guf6hs05978","tag_id":"ckoa29py10001f0uf9qav8nqs","_id":"ckoa29py50006f0ufenud7x3g"},{"post_id":"ckoa29py30002f0uf97feewvg","tag_id":"ckoa29py50005f0ufcpq74nhw","_id":"ckoa29py70009f0ufdxak6osi"}],"Tag":[{"name":"linux","_id":"cko8m8foc00043guf0de357zz"},{"name":"Shell","_id":"cko8m8foe00073gufalzzccsl"},{"name":"算法","_id":"cko8m8fof000b3guf1169d11c"},{"name":"P","_id":"cko8nz0pv0000d8ufd9y06te7"},{"name":"Pty","_id":"cko8nz16g0002d8uf0ji86gwn"},{"name":"Python","_id":"cko8nz2ff0005d8uf2tjw3lyl"},{"name":"H","_id":"cko8nz3ln0007d8ufhqv383le"},{"name":"Hash","_id":"cko8nz44b0009d8uf3uzs2q0d"},{"name":"Linux","_id":"ckoa29py10001f0uf9qav8nqs"},{"name":"Vim","_id":"ckoa29py50005f0ufcpq74nhw"}]}}